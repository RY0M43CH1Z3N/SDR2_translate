(lp1
(dp2
S'ModulePrevious'
p3
S'SDR2_Translate'
p4
sS'ModuleCurrent'
p5
S'checkProgress'
p6
sS'Version'
p7
I1
sS'Geometry'
p8
S'1920x1017+-4+-4'
p9
sS'ProjectName'
p10
g4
sS'ImportTypes'
p11
(lp12
(S'Pmw'
p13
S'import'
p14
tp15
a(S'Tkinter'
p16
S'from'
p17
tp18
asS'EditorWidths'
p19
((lp20
L132L
aL132L
a(lp21
L132L
aL132L
a(lp22
L130L
aL130L
atp23
sS'ID'
p24
S'Rapyd Project'
p25
sS'ParkingLot'
p26
(dp27
S'SelectedWidreq'
p28
NsS'Widreqs'
p29
(lp30
ssa(dp31
S'PreviousForm'
p32
S'checkProgressForm'
p33
sS'OnTab'
p34
I1
sS'-Main-'
p35
(dp36
S'Cursor'
p37
S'21.12'
p38
sS'Text'
p39
(lp40
S''
aS'#coding=utf8\n\n'
p41
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p42
aS"import re, ttk, tkMessageBox\nimport os\nfrom os import listdir, walk\nfrom os.path import isfile, join\n\n# Data path is a dictionary with 3 paths - 'orig', 'proc' and 'done'\ndef checkProgress(DataPath):\n    Root = Tk()\n    Root.title('Progress')\n    GetFn = checkProgressForm(Root)\n    GetFn.pack(expand='yes',fill='both')\n    GetFn.populateTree(DataPath)\n    Root.mainloop()\n    try:\n        Root.destroy()\n    except:\n        pass\n    return GetFn.returning"
p43
asg7
I0
sS'Sha'
p44
I10916991
ssS'Forms'
p45
(lp46
(dp47
S'Requested'
p48
g39
sS'Name'
p49
g33
sg28
S'_TreeScroll'
p50
sS'Type'
p51
S'Tkinter.Frame'
p52
sS'Lines'
p53
(lp54
(lp55
I4997
aI7584
aI0
aasg39
(dp56
g37
S'99.22'
p57
sg39
(lp58
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                              checkProgressForm                               #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass checkProgressForm(Frame):\n    def __init__(self,Master=None,*pos,**kw):\n'
p59
aS"        #\n        #Your code here\n        #\n        self.returning = ''\n        self.DataPath = {}\n        self.root = Master\n"
p60
aS"\n        apply(Frame.__init__,(self,Master),kw)\n        self._Frame2 = Frame(self)\n        self._Frame2.pack(side='top')\n        self._TreeView = ttk.Treeview(self._Frame2)\n        self._TreeView.pack(side='left')\n        self._TreeView.bind('<Double-1>',self._onTreeViewDblClick)\n        self._TreeScroll = Scrollbar(self._Frame2)\n        self._TreeScroll.pack(expand='yes',fill='y',side='left')\n        self._Frame1 = Frame(self)\n        self._Frame1.pack(expand='yes',fill='x',side='top')\n        self._Button1 = Button(self._Frame1)\n        self._Button1.pack(anchor='w',expand='yes',fill='x',side='left')\n        self._Button2 = Button(self._Frame1)\n        self._Button2.pack(anchor='e',expand='yes',fill='x',side='left')\n"
p61
aS"        #\n        #Your code here\n        #\n        self._TreeView.insert('', 'end', 'ep_0', text='Prologue')\n        self._TreeView.insert('', 'end', 'ep_1', text='Episode 1')\n        self._TreeView.insert('', 'end', 'ep_2', text='Episode 2')\n        self._TreeView.insert('', 'end', 'ep_3', text='Episode 3')\n        self._TreeView.insert('', 'end', 'ep_4', text='Episode 4')\n        self._TreeView.insert('', 'end', 'ep_5', text='Episode 5')\n        self._TreeView.insert('', 'end', 'ep_M', text='Monokuma Theater')\n        self._TreeView.insert('', 'end', 'ep_F', text='Free Time')\n        self._TreeView.insert('', 'end', 'ep_O', text='Other')\n        # Scrollbar\n        self._TreeScroll.config( command = self._TreeView.yview )\n        self._TreeView['yscrollcommand'] = self._TreeScroll.set\n"
p62
aS'    #\n    #Start of event handler methods\n    #\n'
p63
aS"    def populateTree(self, DataPath):\n        self.DataPath = DataPath\n        # Populate lists\n        orig = []\n        for (dirpath, dirnames, filenames) in walk(DataPath['orig']):\n            orig.extend(filenames)\n        proc = []\n        for (dirpath, dirnames, filenames) in walk(DataPath['proc']):\n            proc.extend(filenames)\n        done = []\n        for (dirpath, dirnames, filenames) in walk(DataPath['done']):\n            done.extend(filenames)\n        print proc\n        # Episodes\n        regexDict = {'ep_0': 'e00', \n                              'ep_1': 'e01', \n                              'ep_2': 'e02', \n                              'ep_3': 'e03', \n                              'ep_4': 'e04', \n                              'ep_5': 'e05'}\n        for key, regex in regexDict.iteritems():\n            epList = filter(lambda fn: re.match(r'%s' % regex, fn) != None, orig)\n            for ep in epList:\n                if ep in proc:\n                    self._TreeView.insert(key, 'end', ep, text='%s' % ep, tags='proc')\n                elif ep in done:\n                    self._TreeView.insert(key, 'end', ep, text='%s' % ep, tags='done')\n                else:\n                    self._TreeView.insert(key, 'end', ep, text='%s' % ep, tags='orig')\n        self._TreeView.tag_configure('proc', background='orange')\n        self._TreeView.tag_configure('done', background='green')\n        pass\n"
p64
aS'\n    def _onTreeViewDblClick(self'
p65
aS',Event=None):\n        item = self._TreeView.selection()[0]\n        fn = None\n        # Create filename using tags\n        if \'proc\' in self._TreeView.item(item, \'tags\'):\n            fn = join(self.DataPath[\'proc\'], \'jp\', \'script\', self._TreeView.item(item,"text"))\n        elif \'done\' in self._TreeView.item(item, \'tags\'):\n            fn = join(self.DataPath[\'done\'], \'jp\', \'script\', self._TreeView.item(item,"text"))\n        elif \'orig\' in self._TreeView.item(item, \'tags\'):\n            fn = join(self.DataPath[\'orig\'], \'jp\', \'script\', self._TreeView.item(item,"text"))\n        else:\n            # Exit if there\'s no tag (e.g. category)\n            pass\n        # Confirm\n        question = \'Open file: %s?\' % self._TreeView.item(item,"text")\n        confirm = tkMessageBox.askyesno("Confirm action", question)\n        if confirm:\n            # Return filename and close popup\n            self.returning = fn\n            self.root.quit()\n        pass\n'
p66
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p67
aS''
asg7
I0
sg44
I15885439
ssg29
(lp68
(dp69
S'ModuleName'
p70
S'Tkinter'
p71
sg49
S'_Button1'
p72
sS'WidgetName'
p73
S'Button'
p74
sS'PackOptions'
p75
(lp76
(dp77
g49
S'anchor'
p78
sS'Value'
p79
S'w'
sa(dp80
g49
S'expand'
p81
sg79
S'yes'
p82
sa(dp83
g49
S'fill'
p84
sg79
S'x'
sasg24
NsS'XY'
p85
(lp86
I3275
aI8780
asS'Bindings'
p87
(lp88
sS'Options'
p89
(lp90
sa(dp91
g70
g71
sg49
S'_Button2'
p92
sg73
g74
sg75
(lp93
(dp94
g49
g78
sg79
S'e'
sa(dp95
g49
g81
sg79
g82
sa(dp96
g49
g84
sg79
S'x'
sasg24
Nsg85
(lp97
I5852
aI8840
asg87
(lp98
sg89
(lp99
sa(dp100
g70
S'Tkinter'
p101
sg49
S'_Frame1'
p102
sg73
S'Frame'
p103
sg75
(lp104
(dp105
g49
g81
sg79
g82
sa(dp106
g49
g84
sg79
S'x'
sasg24
(I0
I1
tp107
sg85
(I0
I0
tp108
sg87
(lp109
sg89
(lp110
sa(dp111
g70
g101
sg49
S'_Frame2'
p112
sg73
g103
sg75
(lp113
sg24
(I0
I0
tp114
sg85
g108
sg87
(lp115
sg89
(lp116
sa(dp117
g70
S'Tkinter'
p118
sg49
g50
sg73
S'Scrollbar'
p119
sg75
(lp120
(dp121
g49
g81
sg79
S'yes'
p122
sa(dp123
g49
g84
sg79
S'y'
sasg24
Nsg85
(lp124
I5106
aI4187
asg87
(lp125
sg89
(lp126
sa(dp127
g70
g71
sg49
S'_TreeView'
p128
sg73
S'Listbox'
p129
sg75
(lp130
sg24
Nsg85
(lp131
I4324
aI4139
asg87
(lp132
(dp133
S'Handler'
p134
S'_onTreeViewDblClick'
p135
sS'Component'
p136
S''
sS'Event'
p137
S'<Double-1>'
p138
sasg89
(lp139
(dp140
g49
S'pyclass'
p141
sg79
S'ttk.Treeview'
p142
sS'Extra'
p143
Nsasa(dp144
g70
S'Tkinter'
p145
sg49
g33
sg73
S'Toplevel'
p146
sg75
(lp147
sg24
(I0
tp148
sg85
g108
sg87
(lp149
sg89
(lp150
sasS'BaseClass'
p151
g52
sg34
I1
sasS'VisibleForm'
p152
g35
sS'SelectedForm'
p153
g35
sg49
g6
sa(dp154
g32
g35
sg34
L1L
sg35
(dp155
g37
S'20.21'
p156
sg39
(lp157
S''
aS'#!/usr/bin/python\n#coding=utf8\nimport __future__\n'
p158
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p159
aS'\n\ntry:\n    #--------------------------------------------------------------------------#\n    # User code should go after this comment so it is inside the "try".        #\n    #     This allows rpErrorHandler to gain control on an error so it         #\n    #     can properly display a Rapyd-aware error message.                    #\n    #--------------------------------------------------------------------------#\n\n    #Adjust sys.path so we can find other modules of this project\n    import sys\n    if \'.\' not in sys.path:\n        sys.path.append(\'.\')\n    #Put lines to import other modules of this project here\n    import ttk, PIL, tkMessageBox, os, re, struct, tkFileDialog, tkSimpleDialog\n    import GuiFuncs, ConfigParser\n    from PIL import Image, ImageTk, ImageDraw, ImageFont\n    from GimFile import GimFile, GmoFile\n    from PakFile import PakFile\n    from OpCodes import *\n    from Common import *\n    from Scene import Scene\n    from clt import *\n    from Character import *\n    from LinFile import *\n    from enum import *\n    from GUI_Additional import IntegerEntry\n    from checkProgress import *\n \n    if __name__ == \'__main__\':\n        # Read config\n        config_ok = False\n        while not config_ok:\n            config = ConfigParser.ConfigParser()\n            config.read(\'config.cfg\')\n            try:\n                GameDataLoc = config.get(\'Game Data\', \'Game_Data_Location\')\n                InProcDataLoc = config.get(\'Game Data\', \'InProc_Data_Location\')\n                DoneDataLoc = config.get(\'Game Data\', \'Done_Data_Location\')\n                if not os.path.exists(GameDataLoc):\n                    raise Exception(\'Bad path\')\n                if not os.path.exists(DoneDataLoc):\n                    raise Exception(\'Bad path\')\n                config_ok = True\n            except:\n                w = GameData()\n                # Wait for the window to close\n                w.wait_window(w)\n                \n        # Load GUI\n'
p160
aS"        Root = Tk()\n        import Tkinter\n        Tkinter.CallWrapper = rpErrorHandler.CallWrapper\n        del Tkinter\n        App = SDR2_Translate(Root)\n        App.pack(expand='yes',fill='both')\n"
p161
aS"        Root.geometry('640x480+10+10')\n        Root.title('SDR2 Translate')\n        Root.mainloop()\n        \n    #--------------------------------------------------------------------------#\n    # User code should go above this comment.                                  #\n    #--------------------------------------------------------------------------#\nexcept:\n    rpErrorHandler.RunError()"
p162
asg7
I0
sg44
I14249087
ssg45
(lp163
(dp164
S'Requested'
p165
S'Text'
p166
sS'Name'
p167
S'Filter'
p168
sS'SelectedWidreq'
p169
Nsg166
(dp170
g37
S'32.0'
p171
sg39
(lp172
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                    Filter                                    #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass Filter(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p173
aS'        #\n        #Your code here\n        #\n'
p174
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self.bind('<Map>',self.on_Filter_Map)\n        self._OpCodesFrame = Frame(self)\n        self._OpCodesFrame.pack(side='top')\n        self._OkFrame = Frame(self)\n        self._OkFrame.pack(side='top')\n        self._CancelBtn = Button(self._OkFrame,text='Cancel')\n        self._CancelBtn.pack(anchor='e',side='right')\n        self._OkBtn = Button(self._OkFrame,text='OK')\n        self._OkBtn.pack(anchor='e',side='right')\n        self._VisibleFrame = Frame(self._OpCodesFrame)\n        self._VisibleFrame.pack(side='left')\n        self._VisibleCodesLbl = Label(self._VisibleFrame,text='Visible OpCodes')\n        self._VisibleCodesLbl.pack(side='top')\n        self._VisibleCodeList = Listbox(self._VisibleFrame)\n        self._VisibleCodeList.pack(side='top')\n        self._VisibleCodeList.bind('<<ListboxSelect>>' \\\n            ,self._on_VisibleCodeList_select)\n        self._BtnFrame = Frame(self._OpCodesFrame)\n        self._BtnFrame.pack(side='left')\n        self._HideBtn = Button(self._BtnFrame,state='disabled',text='=>')\n        self._HideBtn.pack(side='top')\n        self._HideBtn.bind('<ButtonPress-1>',self._on_HideBtn_Button_1)\n        self._ShowBtn = Button(self._BtnFrame,state='disabled',text='<=')\n        self._ShowBtn.pack(side='top')\n        self._ShowBtn.bind('<ButtonPress-1>',self._on_ShowBtn_Button_1)\n        self._HiddenFrame = Frame(self._OpCodesFrame)\n        self._HiddenFrame.pack(side='left')\n        self._HiddenCodeLbl = Label(self._HiddenFrame,text='Hidden OpCodes')\n        self._HiddenCodeLbl.pack(side='top')\n        self._HiddenCodeList = Listbox(self._HiddenFrame)\n        self._HiddenCodeList.pack(side='top')\n        self._HiddenCodeList.bind('<<ListboxSelect>>' \\\n            ,self._on_HiddenCodeList_select)\n"
p175
aS'        #\n        #Your code here\n        #\n        self.Master = Master\n        self.visible_list = {}\n        self.hidden_list = {}\n'
p176
aS'    #\n    #Start of event handler methods\n    #\n'
p177
aS"    def initLists(self, hidden, visible):\n        self.hidden_list = hidden\n        self.visible_list = visible\n        self.populate()\n        pass\n\n    def populate(self):\n        self._VisibleCodeList.delete(0,END)\n        self._HiddenCodeList.delete(0,END)\n        for code,value in self.hidden_list.items():\n            if value != '':\n                self._HiddenCodeList.insert(END, value)\n            else:\n                self._HiddenCodeList.insert(END, 'op_'+code)\n        for code,value in self.visible_list.items():\n            if value != '':\n                self._VisibleCodeList.insert(END, value)\n            else:\n                self._VisibleCodeList.insert(END, 'op_'+code)\n        pass\n"
p178
aS'\n    def _on_HiddenCodeList_select(self'
p179
aS",Event=None):\n        self._ShowBtn['state'] = 'normal'\n        self._HideBtn['state'] = 'disabled'\n        pass\n"
p180
aS'\n    def _on_HideBtn_Button_1(self'
p181
aS',Event=None):\n        # Delete from the Visible list\n        i = int(self._FlowList.curselection()[0])        \n        \n        self._VisibleCodeList.delete(i)\n        # Insert into the Hidden list\n        self._HiddenCodeList.insert\n        pass\n'
p182
aS'\n    def _on_ShowBtn_Button_1(self'
p183
aS',Event=None):\n        pass\n'
p184
aS'\n    def _on_VisibleCodeList_select(self'
p185
aS",Event=None):\n        self._ShowBtn['state'] = 'disabled'\n        self._HideBtn['state'] = 'normal'\n        pass\n"
p186
aS'\n    def on_Filter_Map(self'
p187
aS',Event=None):\n        # Grab the focus\n        self.focus_set()\n        self.grab_set()\n        self.transient(self.Master)\n        pass\n'
p188
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p189
aS''
asg7
I0
sg44
I8776831
ssS'Lines'
p190
(lp191
(lp192
I4997
aI8768
aI0
aa(lp193
I3384
aI4378
aI1
aa(lp194
I4973
aI4378
aI1
aasS'BaseClass'
p195
S'Tkinter.Toplevel'
p196
sS'Widreqs'
p197
(lp198
(dp199
S'ModuleName'
p200
S'Tkinter'
p201
sg167
g168
sS'WidgetName'
p202
S'Toplevel'
p203
sS'PackOptions'
p204
(lp205
sS'Options'
p206
(lp207
sS'XY'
p208
(I0
I0
tp209
sS'Bindings'
p210
(lp211
(dp212
S'Handler'
p213
S'on_Filter_Map'
p214
sS'Component'
p215
S''
sS'Event'
p216
S'<Map>'
p217
sasS'ID'
p218
(I0
tp219
sa(dp220
g200
S'Tkinter'
p221
sg167
S'_BtnFrame'
p222
sg202
S'Frame'
p223
sg204
(lp224
sg206
(lp225
sg208
g209
sg210
(lp226
sg218
(L0L
L0L
L1L
tp227
sa(dp228
g200
S'Tkinter'
p229
sg167
S'_CancelBtn'
p230
sg202
S'Button'
p231
sg204
(lp232
(dp233
g167
S'anchor'
p234
sS'Value'
p235
S'e'
sasg206
(lp236
(dp237
g167
S'text'
p238
sg235
S'Cancel'
p239
sS'Extra'
p240
Nsasg208
(lp241
I8138
aI9306
asg210
(lp242
sg218
Nsa(dp243
g200
g229
sg167
S'_HiddenCodeLbl'
p244
sg202
S'Label'
p245
sg204
(lp246
sg206
(lp247
(dp248
g167
S'text'
p249
sg235
S'Hidden OpCodes'
p250
sg240
Nsasg208
(lp251
I6962
aI203
asg210
(lp252
sg218
Nsa(dp253
g200
g229
sg167
S'_HiddenCodeList'
p254
sg202
S'Listbox'
p255
sg204
(lp256
sg206
(lp257
sg208
(lp258
I6847
aI4545
asg210
(lp259
(dp260
g213
S'_on_HiddenCodeList_select'
p261
sg215
S''
sg216
S'<<ListboxSelect>>'
p262
sasg218
Nsa(dp263
g200
g221
sg167
S'_HiddenFrame'
p264
sg202
g223
sg204
(lp265
sg206
(lp266
sg208
g209
sg210
(lp267
sg218
(L0L
L0L
L2L
tp268
sa(dp269
g200
g229
sg167
S'_HideBtn'
p270
sg202
g231
sg204
(lp271
sg206
(lp272
(dp273
g167
g238
sg235
S'=>'
p274
sg240
Nsa(dp275
g167
S'state'
p276
sg235
S'disabled'
p277
sg240
Nsasg208
(lp278
I4002
aI3816
asg210
(lp279
(dp280
g213
S'_on_HideBtn_Button_1'
p281
sg215
S''
sg216
S'<ButtonPress-1>'
p282
sasg218
Nsa(dp283
g200
g229
sg167
S'_OkBtn'
p284
sg202
g231
sg204
(lp285
(dp286
g167
g234
sg235
S'e'
sasg206
(lp287
(dp288
g167
g238
sg235
S'OK'
p289
sg240
Nsasg208
(lp290
I7016
aI9306
asg210
(lp291
sg218
Nsa(dp292
g200
g221
sg167
S'_OkFrame'
p293
sg202
g223
sg204
(lp294
sg206
(lp295
sg208
g209
sg210
(lp296
sg218
(L0L
L1L
tp297
sa(dp298
g200
g221
sg167
S'_OpCodesFrame'
p299
sg202
g223
sg204
(lp300
sg206
(lp301
sg208
g209
sg210
(lp302
sg218
(L0L
L0L
tp303
sa(dp304
g200
g229
sg167
S'_ShowBtn'
p305
sg202
g231
sg204
(lp306
sg206
(lp307
(dp308
g167
g238
sg235
S'<='
p309
sg240
Nsa(dp310
g167
g276
sg235
g277
sg240
Nsasg208
(lp311
I3996
aI5108
asg210
(lp312
(dp313
g213
S'_on_ShowBtn_Button_1'
p314
sg215
S''
sg216
S'<ButtonPress-1>'
p315
sasg218
Nsa(dp316
g200
g229
sg167
S'_VisibleCodeList'
p317
sg202
g255
sg204
(lp318
sg206
(lp319
sg208
(lp320
I2110
aI4342
asg210
(lp321
(dp322
g213
S'_on_VisibleCodeList_select'
p323
sg215
S''
sg216
S'<<ListboxSelect>>'
p324
sasg218
Nsa(dp325
g200
g229
sg167
S'_VisibleCodesLbl'
p326
sg202
g245
sg204
(lp327
sg206
(lp328
(dp329
g167
g249
sg235
S'Visible OpCodes'
p330
sg240
Nsasg208
(lp331
I1825
aI419
asg210
(lp332
sg218
Nsa(dp333
g200
g221
sg167
S'_VisibleFrame'
p334
sg202
g223
sg204
(lp335
sg206
(lp336
sg208
g209
sg210
(lp337
sg218
(L0L
L0L
L0L
tp338
sasS'Type'
p339
g196
sS'OnTab'
p340
L1L
sa(dp341
g165
g166
sg167
S'GameData'
p342
sg169
S'_BrowseInProcBtn'
p343
sg166
(dp344
g37
S'99.0'
p345
sg39
(lp346
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                   GameData                                   #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass GameData(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p347
aS'        #\n        #Your code here\n        #\n'
p348
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self.GameDataLoc = StringVar()\n        self.DoneDataLoc = StringVar()\n        self.InProcDataLoc = StringVar()\n        self._Frame3 = Frame(self)\n        self._Frame3.pack(side='top')\n        self._GameDataLbl = Label(self._Frame3,text='Game Data Options')\n        self._GameDataLbl.pack(side='top')\n        self._Frame5 = Frame(self)\n        self._Frame5.pack(side='top')\n        self._Frame1 = Frame(self)\n        self._Frame1.pack(side='top')\n        self._OkBtn = Button(self._Frame1,text='Ok')\n        self._OkBtn.pack(side='left')\n        self._OkBtn.bind('<ButtonPress-1>',self._on_OkBtn_Button_1)\n        self._CancelBtn = Button(self._Frame1,text='Cancel')\n        self._CancelBtn.pack(side='left')\n        self._CancelBtn.bind('<ButtonRelease-1>',self._on_CancelBtn_ButRel_1)\n        self._Frame6 = Frame(self._Frame5)\n        self._Frame6.pack(side='left')\n        self._PathLbl = Label(self._Frame6,text='Path to Game Data')\n        self._PathLbl.pack(anchor='w',side='top')\n        self._DoneLbl = Label(self._Frame6,text='Path to Done Files')\n        self._DoneLbl.pack(anchor='w',side='bottom')\n        self._InProcLbl = Label(self._Frame6,text='Path to In Process Files')\n        self._InProcLbl.pack(anchor='w',side='bottom')\n        self._Frame8 = Frame(self._Frame5)\n        self._Frame8.pack(side='left')\n        self._Frame4 = Frame(self._Frame8)\n        self._Frame4.pack(side='top')\n        self._DataLoc = Entry(self._Frame4,textvariable=self.GameDataLoc)\n        self._DataLoc.pack(side='left')\n        self._BrowseLocBtn = Button(self._Frame4,text='Browse')\n        self._BrowseLocBtn.pack(side='left')\n        self._BrowseLocBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_BrowseLocBtn_Button_1)\n        self._Frame9 = Frame(self._Frame8)\n        self._Frame9.pack(side='top')\n        self._InProcLoc = Entry(self._Frame9,textvariable=self.InProcDataLoc)\n        self._InProcLoc.pack(side='left')\n        self._BrowseInProcBtn = Button(self._Frame9,text='Browse')\n        self._BrowseInProcBtn.pack(side='left')\n        self._BrowseInProcBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_BrowseInProcBtn_ButRel_1)\n        self._Frame2 = Frame(self._Frame8)\n        self._Frame2.pack(side='top')\n        self._DoneLoc = Entry(self._Frame2,textvariable=self.DoneDataLoc)\n        self._DoneLoc.pack(side='left')\n        self._BrowseDoneBtn = Button(self._Frame2,text='Browse')\n        self._BrowseDoneBtn.pack(side='left')\n        self._BrowseDoneBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_BrowseDoneBtn_ButRel_1)\n"
p349
aS"        #\n        #Your code here\n        #\n        try:\n            self.GameDataLoc.set(GameDataLoc)\n        except:\n            self.GameDataLoc.set('')\n        try:\n            self.InProcDataLoc.set(InProcDataLoc)\n        except:\n            self.InProcDataLoc.set('')\n        try:\n            self.DoneDataLoc.set(DoneDataLoc)\n        except:\n            self.DoneDataLoc.set('')\n"
p350
aS'    #\n    #Start of event handler methods\n    #\n'
p351
aS'\n'
aS'\n    def _on_BrowseDoneBtn_ButRel_1(self'
p352
aS',Event=None):\n        loc = tkFileDialog.askdirectory()\n        if loc:\n            self.DoneDataLoc.set(loc)\n        pass\n'
p353
aS'\n    def _on_BrowseInProcBtn_ButRel_1(self'
p354
aS',Event=None):\n        loc = tkFileDialog.askdirectory()\n        if loc:\n            self.InProcDataLoc.set(loc)\n        pass\n'
p355
aS'\n    def _on_BrowseLocBtn_Button_1(self'
p356
aS',Event=None):\n        loc = tkFileDialog.askdirectory()\n        if loc:\n            self.GameDataLoc.set(loc)\n        pass\n'
p357
aS'\n    def _on_CancelBtn_ButRel_1(self'
p358
aS',Event=None):\n        # Exit\n        self.destroy()\n        pass\n'
p359
aS'\n    def _on_OkBtn_Button_1(self'
p360
aS",Event=None):\n        # Write config\n        config = ConfigParser.ConfigParser()\n        config.add_section('Game Data')\n        config.set('Game Data', 'Game_Data_Location', self.GameDataLoc.get())\n        config.set('Game Data', 'InProc_Data_Location', self.InProcDataLoc.get())\n        config.set('Game Data', 'Done_Data_Location', self.DoneDataLoc.get())\n        with open('config.cfg', 'wb') as configfile:\n            config.write(configfile)\n        # Exit\n        self.destroy()\n        pass\n"
p361
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p362
aS''
asg7
I0
sg44
I4621695
ssg190
(lp363
(lp364
I4997
aI431
aI0
aa(lp365
I4997
aI3026
aI0
aa(lp366
I3008
aI1722
aI1
aa(lp367
I6501
aI1507
aI0
aa(lp368
I6501
aI2249
aI0
aasg195
S'Tkinter.Toplevel'
p369
sg197
(lp370
(dp371
g200
S'Tkinter'
p372
sg167
g342
sg202
S'Toplevel'
p373
sg204
(lp374
sg206
(lp375
sg208
g209
sg210
(lp376
sg218
(I0
tp377
sa(dp378
g200
S'Tkinter'
p379
sg167
S'_BrowseDoneBtn'
p380
sg202
S'Button'
p381
sg204
(lp382
sg206
(lp383
(dp384
g167
g238
sg235
S'Browse'
p385
sg240
Nsasg208
(lp386
I5106
aI2584
asg210
(lp387
(dp388
g213
S'_on_BrowseDoneBtn_ButRel_1'
p389
sg215
S''
sg216
S'<ButtonRelease-1>'
p390
sasg218
Nsa(dp391
g200
g71
sg167
g343
sg202
g74
sg204
(lp392
sg206
(lp393
(dp394
g167
g238
sg235
S'Browse'
p395
sg240
Nsasg208
(lp396
I5070
aI1818
asg210
(lp397
(dp398
g213
S'_on_BrowseInProcBtn_ButRel_1'
p399
sg215
S''
sg216
S'<ButtonRelease-1>'
p400
sasg218
Nsa(dp401
g200
S'Tkinter'
p402
sg167
S'_BrowseLocBtn'
p403
sg202
S'Button'
p404
sg204
(lp405
sg206
(lp406
(dp407
g167
g238
sg235
S'Browse'
p408
sg240
Nsasg208
(lp409
I5015
aI1053
asg210
(lp410
(dp411
g213
S'_on_BrowseLocBtn_Button_1'
p412
sg215
S''
sg216
S'<ButtonRelease-1>'
p413
sasg218
Nsa(dp414
g200
S'Tkinter'
p415
sg167
S'_CancelBtn'
p416
sg202
S'Button'
p417
sg204
(lp418
sg206
(lp419
(dp420
g167
g238
sg235
S'Cancel'
p421
sg240
Nsasg208
(lp422
I5045
aI5132
asg210
(lp423
(dp424
g213
S'_on_CancelBtn_ButRel_1'
p425
sg215
S''
sg216
S'<ButtonRelease-1>'
p426
sasg218
Nsa(dp427
g200
g402
sg167
S'_DataLoc'
p428
sg202
S'Entry'
p429
sg204
(lp430
sg206
(lp431
(dp432
g167
S'textvariable'
p433
sg235
S'GameDataLoc'
p434
sg240
S's.as'
p435
sasg208
(lp436
I3463
aI1100
asg210
(lp437
sg218
Nsa(dp438
g200
g379
sg167
S'_DoneLbl'
p439
sg202
S'Label'
p440
sg204
(lp441
(dp442
g167
g234
sg235
S'w'
sasg206
(lp443
(dp444
g167
g249
sg235
S'Path to Done Files'
p445
sg240
Nsasg208
(lp446
I1801
aI2632
asg210
(lp447
sg218
Nsa(dp448
g200
g379
sg167
S'_DoneLoc'
p449
sg202
S'Entry'
p450
sg204
(lp451
sg206
(lp452
(dp453
g167
g433
sg235
S'DoneDataLoc'
p454
sg240
S's.as'
p455
sasg208
(lp456
I3511
aI2560
asg210
(lp457
sg218
Nsa(dp458
g200
S'Tkinter'
p459
sg167
S'_Frame1'
p460
sg202
S'Frame'
p461
sg204
(lp462
sg206
(lp463
sg208
g209
sg210
(lp464
sg218
(I0
I2
tp465
sa(dp466
g200
g101
sg167
S'_Frame2'
p467
sg202
g103
sg204
(lp468
sg206
(lp469
sg208
g209
sg210
(lp470
sg218
(I0
I1
I1
I2
tp471
sa(dp472
g200
g459
sg167
S'_Frame3'
p473
sg202
g461
sg204
(lp474
sg206
(lp475
sg208
g209
sg210
(lp476
sg218
(I0
I0
tp477
sa(dp478
g200
g101
sg167
S'_Frame4'
p479
sg202
g103
sg204
(lp480
sg206
(lp481
sg208
g209
sg210
(lp482
sg218
(I0
I1
I1
I0
tp483
sa(dp484
g200
g101
sg167
S'_Frame5'
p485
sg202
g103
sg204
(lp486
sg206
(lp487
sg208
g209
sg210
(lp488
sg218
(I0
I1
tp489
sa(dp490
g200
g101
sg167
S'_Frame6'
p491
sg202
g103
sg204
(lp492
sg206
(lp493
sg208
g209
sg210
(lp494
sg218
(I0
I1
I0
tp495
sa(dp496
g200
g101
sg167
S'_Frame8'
p497
sg202
g103
sg204
(lp498
sg206
(lp499
sg208
g209
sg210
(lp500
sg218
(I0
I1
I1
tp501
sa(dp502
g200
g101
sg167
S'_Frame9'
p503
sg202
g103
sg204
(lp504
sg206
(lp505
sg208
g209
sg210
(lp506
sg218
(I0
I1
I1
I1
tp507
sa(dp508
g200
g402
sg167
S'_GameDataLbl'
p509
sg202
S'Label'
p510
sg204
(lp511
sg206
(lp512
(dp513
g167
g249
sg235
S'Game Data Options'
p514
sg240
Nsasg208
(lp515
I4378
aI179
asg210
(lp516
sg218
Nsa(dp517
g200
g71
sg167
S'_InProcLbl'
p518
sg202
S'Label'
p519
sg204
(lp520
(dp521
g167
g234
sg235
S'w'
sasg206
(lp522
(dp523
g167
g249
sg235
S'Path to In Process Files'
p524
sg240
Nsasg208
(lp525
I1759
aI1950
asg210
(lp526
sg218
Nsa(dp527
g200
g71
sg167
S'_InProcLoc'
p528
sg202
S'Entry'
p529
sg204
(lp530
sg206
(lp531
(dp532
g167
g433
sg235
S'InProcDataLoc'
p533
sg240
S's.as'
p534
sasg208
(lp535
I3481
aI1806
asg210
(lp536
sg218
Nsa(dp537
g200
g415
sg167
S'_OkBtn'
p538
sg202
g417
sg204
(lp539
sg206
(lp540
(dp541
g167
g238
sg235
S'Ok'
p542
sg240
Nsasg208
(lp543
I4494
aI5144
asg210
(lp544
(dp545
g213
S'_on_OkBtn_Button_1'
p546
sg215
S''
sg216
S'<ButtonPress-1>'
p547
sasg218
Nsa(dp548
g200
g402
sg167
S'_PathLbl'
p549
sg202
g510
sg204
(lp550
(dp551
g167
g234
sg235
S'w'
sasg206
(lp552
(dp553
g167
g249
sg235
S'Path to Game Data'
p554
sg240
Nsasg208
(lp555
I1777
aI1208
asg210
(lp556
sg218
Nsasg339
g369
sg340
L1L
sa(dp557
g165
S'Gui'
p558
sg167
S'OpCodeCreator'
p559
sg169
Nsg166
(dp560
g37
S'86.0'
p561
sg39
(lp562
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                OpCodeCreator                                 #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass OpCodeCreator(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p563
aS'        #\n        #Your code here\n        #\n        self.selected_opcode = 0\n        self.selected_par = 0\n        self.opcode_list = []\n        self.par_list = []\n        self.Master = Master\n'
p564
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self.bind('<Map>',self.on_OpCodeCreator_Map)\n        self._ParValue = StringVar()\n        self._ParName = StringVar()\n        self._HeaderFrame = Frame(self)\n        self._HeaderFrame.pack(side='top')\n        self._TopLabel = Label(self._HeaderFrame\n            ,text='Define the opcode and press OK')\n        self._TopLabel.pack(side='top')\n        self._ListFrame = Frame(self)\n        self._ListFrame.pack(side='top')\n        self._OpCodeList = Listbox(self._ListFrame)\n        self._OpCodeList.pack(expand='yes',fill='both',side='left')\n        self._OpCodeList.bind('<<ListboxSelect>>',self._on_OpCodeList_select)\n        self._OpCodeList.bind('<Map>',self._on_OpCodeList_Map)\n        self._ParBox = Listbox(self._ListFrame)\n        self._ParBox.pack(side='left')\n        self._ParBox.bind('<<ListboxSelect>>',self._on_ParBox_select)\n        self._EntryFrame = Frame(self)\n        self._EntryFrame.pack(side='top')\n        self._ParNameLbl = Label(self._EntryFrame,textvariable=self._ParName)\n        self._ParNameLbl.pack(side='left')\n        self._ParEntry = Entry(self._EntryFrame,textvariable=self._ParValue)\n        self._ParEntry.pack(side='left')\n        self._AddParBtn = Button(self._EntryFrame,text='Set')\n        self._AddParBtn.pack(side='left')\n        self._AddParBtn.bind('<ButtonPress-1>',self._on_AddParBtn_Button_1)\n        self._SubmitFrame = Frame(self)\n        self._SubmitFrame.pack(expand='yes',fill='x',side='top')\n        self._CancelBtn = Button(self._SubmitFrame,text='Cancel')\n        self._CancelBtn.pack(anchor='e',side='right')\n        self._CancelBtn.bind('<ButtonPress-1>',self._on_CancelBtn_Button_1)\n        self._OkBtn = Button(self._SubmitFrame,text='OK')\n        self._OkBtn.pack(anchor='e',side='right')\n        self._OkBtn.bind('<ButtonPress-1>',self._on_OkBtn_Button_1)\n"
p565
aS'        #\n        #Your code here\n        #\n'
p566
aS'    #\n    #Start of event handler methods\n    #\n'
p567
aS'\n'
aS'\n    def _on_AddParBtn_Button_1(self'
p568
aS',Event=None):\n        # Save current parameter to the list\n        i = self.selected_par  \n        self.par_list[i] = (self.par_list[i][0], int(self._ParValue.get()))\n        # Re-populate parameters listbox\n        self._ParBox_populate()\n        pass\n'
p569
aS'\n    def _on_CancelBtn_Button_1(self'
p570
aS',Event=None):\n        self.destroy()\n        pass\n'
p571
aS'\n    def _on_OkBtn_Button_1(self'
p572
aS',Event=None):\n        question = "You really sure you want to add the new op?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            # Insert new value into the master\'s lists\n            i = self.Master.current_act_idx+1\n            self.Master.lin_stack[-1].opcode_list.insert(i, self.selected_opcode)\n            self.Master.lin_stack[-1].action_list.insert(i, OP_FUNCTIONS[self.selected_opcode])\n            self.Master.lin_stack[-1].pars_list.insert(i, self.par_list)\n            # Fix the string offset, initial value for the 0x70 + opcode\n            add_offset = 0x02\n            for par in OP_PARAMS[self.selected_opcode]:\n                # Add size of each parameter\n                add_offset += struct.calcsize(par[1]) \n            # Add the new offset to the base offset\n            self.Master.lin_stack[-1].baseoffset += add_offset\n            # Add to the master\'s listbox\n            self.Master._FlowList.insert(i, "%s%s" % (self.Master.lin_stack[-1].action_list[i], self.Master.lin_stack[-1].pars_list[i]))\n            # Exit\n            self.destroy()\n        pass\n'
p573
aS'\n    def _on_OpCodeList_Map(self'
p574
aS',Event=None):\n        for code,name in OP_FUNCTIONS.iteritems():\n            if not name:\n                self._OpCodeList.insert(END, "op_%d" % code)\n            else:\n                self._OpCodeList.insert(END, name)\n            # We need to store the opcodes, otherwise we won\'t have 2-sided relation\n            self.opcode_list.append(code)\n        pass\n    \n'
p575
aS'\n    def _on_OpCodeList_select(self'
p576
aS',Event=None):\n        i = int(self._OpCodeList.curselection()[0])\n        self.selected_opcode = self.opcode_list[i]\n        # Add the parameters to the list\n        self.par_list = []\n        for par in OP_PARAMS[self.selected_opcode]:\n            self.par_list.append((par[0], -1))\n        # Display pars in the listbox\n        self._ParBox_populate()\n        pass\n        \n    def _ParBox_populate(self):\n        self._ParBox.delete(0,END)\n        for par in self.par_list:\n            self._ParBox.insert(END, par)\n        pass\n    \n'
p577
aS'\n    def _on_ParBox_select(self'
p578
aS',Event=None):\n        self.selected_par = int(self._ParBox.curselection()[0])  \n        i = self.selected_par      \n        # Put the current name and value to the label and editbox\n        self._ParName.set(self.par_list[i][0])\n        self._ParValue.set(self.par_list[i][1])\n        pass\n'
p579
aS'\n    def on_OpCodeCreator_Map(self'
p580
aS',Event=None):\n        # Grab the focus\n        self.focus_set()\n        self.grab_set()\n        # Some strange shit happend on Windoze with the next line\n        #self.transient(self.Master)\n        pass\n'
p581
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p582
aS''
asg7
I0
sg44
I9408383
ssg190
(lp583
(lp584
I4997
aI622
aI0
aa(lp585
I4997
aI6914
aI0
aa(lp586
I4997
aI8947
aI0
aasg195
S'Tkinter.Toplevel'
p587
sg197
(lp588
(dp589
g200
S'Tkinter'
p590
sg167
g559
sg202
S'Toplevel'
p591
sg204
(lp592
sg206
(lp593
sg208
g209
sg210
(lp594
(dp595
g213
S'on_OpCodeCreator_Map'
p596
sg215
S''
sg216
S'<Map>'
p597
sasg218
g219
sa(dp598
g200
S'Tkinter'
p599
sg167
S'_AddParBtn'
p600
sg202
S'Button'
p601
sg204
(lp602
sg206
(lp603
(dp604
g167
g238
sg235
S'Set'
p605
sg240
Nsasg208
(lp606
I4469
aI7847
asg210
(lp607
(dp608
g213
S'_on_AddParBtn_Button_1'
p609
sg215
S''
sg216
S'<ButtonPress-1>'
p610
sasg218
Nsa(dp611
g200
g599
sg167
S'_CancelBtn'
p612
sg202
g601
sg204
(lp613
(dp614
g167
g234
sg235
S'e'
sasg206
(lp615
(dp616
g167
g238
sg235
S'Cancel'
p617
sg240
Nsasg208
(lp618
I8096
aI9617
asg210
(lp619
(dp620
g213
S'_on_CancelBtn_Button_1'
p621
sg215
S''
sg216
S'<ButtonPress-1>'
p622
sasg218
Nsa(dp623
g200
S'Tkinter'
p624
sg167
S'_EntryFrame'
p625
sg202
S'Frame'
p626
sg204
(lp627
sg206
(lp628
sg208
g209
sg210
(lp629
sg218
(L0L
L2L
tp630
sa(dp631
g200
g624
sg167
S'_HeaderFrame'
p632
sg202
g626
sg204
(lp633
sg206
(lp634
sg208
g209
sg210
(lp635
sg218
(L0L
L0L
tp636
sa(dp637
g200
g624
sg167
S'_ListFrame'
p638
sg202
g626
sg204
(lp639
sg206
(lp640
sg208
g209
sg210
(lp641
sg218
(L0L
L1L
tp642
sa(dp643
g200
g599
sg167
S'_OkBtn'
p644
sg202
g601
sg204
(lp645
(dp646
g167
g234
sg235
S'e'
sasg206
(lp647
(dp648
g167
g238
sg235
S'OK'
p649
sg240
Nsasg208
(lp650
I7326
aI9522
asg210
(lp651
(dp652
g213
S'_on_OkBtn_Button_1'
p653
sg215
S''
sg216
S'<ButtonPress-1>'
p654
sasg218
Nsa(dp655
g200
g599
sg167
S'_OpCodeList'
p656
sg202
S'Listbox'
p657
sg204
(lp658
(dp659
g167
S'expand'
p660
sg235
S'yes'
p661
sa(dp662
g167
S'fill'
p663
sg235
S'both'
p664
sasg206
(lp665
sg208
(lp666
I1662
aI3110
asg210
(lp667
(dp668
g213
S'_on_OpCodeList_select'
p669
sg215
S''
sg216
S'<<ListboxSelect>>'
p670
sa(dp671
g213
S'_on_OpCodeList_Map'
p672
sg215
S''
sg216
S'<Map>'
p673
sasg218
Nsa(dp674
g200
g599
sg167
S'_ParBox'
p675
sg202
g657
sg204
(lp676
sg206
(lp677
sg208
(lp678
I5409
aI3110
asg210
(lp679
(dp680
g213
S'_on_ParBox_select'
p681
sg215
S''
sg216
S'<<ListboxSelect>>'
p682
sasg218
Nsa(dp683
g200
g599
sg167
S'_ParEntry'
p684
sg202
S'Entry'
p685
sg204
(lp686
sg206
(lp687
(dp688
g167
g433
sg235
S'_ParValue'
p689
sg240
S's.as'
p690
sasg208
(lp691
I3857
aI7835
asg210
(lp692
sg218
Nsa(dp693
g200
g599
sg167
S'_ParNameLbl'
p694
sg202
S'Label'
p695
sg204
(lp696
sg206
(lp697
(dp698
g167
S'textvariable'
p699
sg235
S'_ParName'
p700
sg240
S's.as'
p701
sasg208
(lp702
I3341
aI7775
asg210
(lp703
sg218
Nsa(dp704
g200
g624
sg167
S'_SubmitFrame'
p705
sg202
g626
sg204
(lp706
(dp707
g167
g660
sg235
g661
sa(dp708
g167
g663
sg235
S'x'
sasg206
(lp709
sg208
g209
sg210
(lp710
sg218
(L0L
L3L
tp711
sa(dp712
g200
g599
sg167
S'_TopLabel'
p713
sg202
g695
sg204
(lp714
sg206
(lp715
(dp716
g167
g249
sg235
S'Define the opcode and press OK'
p717
sg240
Nsasg208
(lp718
I4603
aI191
asg210
(lp719
sg218
Nsasg339
g587
sg340
L1L
sa(dp720
g48
g39
sg49
S'SDR2_Translate'
p721
sg28
S'_StringScroll'
p722
sg51
S'Tkinter.Frame'
p723
sg53
(lp724
(lp725
I4997
aI562
aI0
aa(lp726
I2547
aI5275
aI1
aa(lp727
I1273
aI1687
aI0
aa(lp728
I1273
aI9318
aI0
aa(lp729
I6270
aI7584
aI0
aa(lp730
I6270
aI8266
aI0
aa(lp731
I6270
aI6435
aI0
aa(lp732
I5282
aI3493
aI1
aa(lp733
I7744
aI3493
aI1
aa(lp734
I3911
aI5766
aI0
aa(lp735
I3911
aI2057
aI0
aa(lp736
I6513
aI5766
aI0
aa(lp737
I4348
aI7010
aI1
aa(lp738
I5749
aI7010
aI1
aa(lp739
I5949
aI9127
aI1
aa(lp740
I7975
aI9438
aI0
aasg39
(dp741
g37
S'222.63'
p742
sg39
(lp743
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                SDR2_Translate                                #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass SDR2_Translate(Frame):\n    def __init__(self,Master=None,*pos,**kw):\n'
p744
aS"        #\n        #Your code here\n        #\n        self.curPath = '.'\n        self.current_str_idx = 0\n        self.current_act_idx = 0\n        self.actionFlow = []\n        self.strange_byte = ''\n        self.currentImage = ''\n        self.scene = Scene()\n        self.charNames = getCharNames(GameDataLoc)\n        self.lin_stack = []\n        self.mode = ''\n        self.pak_filenum = 0\n        self.pak_stack = []\n        self.visible_opcodes = OP_FUNCTIONS\n        self.hidden_opcodes = {}\n"
p745
aS"\n        apply(Frame.__init__,(self,Master),kw)\n        self._CurAction = StringVar()\n        self._CurrentEditString1 = StringVar()\n        self._CurrentEditString2 = StringVar()\n        self._CurrentEditString3 = StringVar()\n        self._FileNameText = StringVar()\n        self._Filtered = StringVar()\n        self._TextWidthVal = StringVar()\n        self._MaxWidthEnabled = IntVar()\n        self._OpCodeEditText = StringVar()\n        self._ParEditText = StringVar()\n        self._ParLabelText = StringVar()\n        self._EditString1Len = StringVar()\n        self._EditString2Len = StringVar()\n        self._EditString3Len = StringVar()\n        self._StringIdx = StringVar()\n        self._FileNameFrame = Frame(self)\n        self._FileNameFrame.pack(fill='x',side='top')\n        self._FileName = Label(self._FileNameFrame\n            ,textvariable=self._FileNameText)\n        self._FileName.pack(side='top')\n        self._Frame2 = Frame(self)\n        self._Frame2.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self._OpFrame = Frame(self._Frame2)\n        self._OpFrame.pack(anchor='nw',fill='y',ipadx='25',side='left')\n        self._ContentFrame = Frame(self._Frame2)\n        self._ContentFrame.pack(anchor='nw',expand='yes',fill='both',side='left')\n        self._Frame1 = Frame(self._OpFrame)\n        self._Frame1.pack(fill='both',side='top')\n        self._FlowFrameLabel = Label(self._Frame1,text='Actions List')\n        self._FlowFrameLabel.pack(anchor='nw',side='left')\n        self._FilterFlowList = Checkbutton(self._Frame1\n            ,command=self._on_FilterFlowList_check,text='Filtered'\n            ,variable=self._Filtered)\n        self._FilterFlowList.pack(anchor='ne',side='right')\n        self._FlowFileUpBtn = Button(self._Frame1,state='disabled',text='UP')\n        self._FlowFileUpBtn.pack(side='right')\n        self._FlowFileUpBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_FlowFileUpBtn_ButRel_1)\n        self._FlowFrame = Frame(self._OpFrame)\n        self._FlowFrame.pack(expand='yes',fill='both',side='top')\n        self._FlowList = Listbox(self._FlowFrame)\n        self._FlowList.pack(expand='yes',fill='both',side='left')\n        self._FlowList.bind('<<ListboxSelect>>',self._on_FlowList_select)\n        self._FlowList.bind('<Double-Button-1>',self._on_FlowList_DblBtn)\n        self._FlowScroll = Scrollbar(self._FlowFrame)\n        self._FlowScroll.pack(anchor='e',fill='y',side='left')\n        self._Frame3 = Frame(self._OpFrame)\n        self._Frame3.pack(fill='x',side='top')\n        self._AddOpBtn = Button(self._Frame3,height='3',text='ADD OP')\n        self._AddOpBtn.pack(expand='yes',fill='both',side='left')\n        self._AddOpBtn.bind('<ButtonRelease-1>',self._on_AddOpBtn_Button_1)\n        self._DelOpBtn = Button(self._Frame3,text='DELETE OP')\n        self._DelOpBtn.pack(expand='yes',fill='both',side='left')\n        self._DelOpBtn.bind('<ButtonRelease-1>',self._on_DelOpBtn_Button_1)\n        self._TabHost = ttk.Notebook(self._ContentFrame)\n        self._TabHost.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self._Frame9 = Frame(self._ContentFrame)\n        self._Frame9.pack(fill='x',side='top')\n        self._WorkLabelFrame = Frame(self._ContentFrame)\n        self._WorkLabelFrame.pack(anchor='nw',fill='x',side='top')\n        self._WorkFrameLabel = Label(self._WorkLabelFrame,text='Parameters List')\n        self._WorkFrameLabel.pack(padx='35',side='left')\n        self._CurActionLabel = Label(self._WorkLabelFrame\n            ,textvariable=self._CurAction)\n        self._CurActionLabel.pack(side='left')\n        self._ParFrame = Frame(self._ContentFrame)\n        self._ParFrame.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self._StringFrame = Frame(self._TabHost)\n        self._StringFrame.pack(side='left')\n        self._MiscFrame = Frame(self._TabHost)\n        self._MiscFrame.pack(side='left')\n        self._CanvasFrame = Frame(self._TabHost)\n        self._CanvasFrame.pack(side='left')\n        self._ScreenView = Canvas(self._CanvasFrame,background='#000000'\n            ,height=SCREEN_H,width=SCREEN_W)\n        self._ScreenView.pack(expand='yes',side='left')\n        self._Frame10 = Frame(self._Frame9)\n        self._Frame10.pack(side='left')\n        self._EditString1 = ttk.Entry(self._Frame10\n            ,textvariable=self._CurrentEditString1,width='50')\n        self._EditString1.pack(anchor='s',side='top')\n        self._EditString3 = Entry(self._Frame10\n            ,textvariable=self._CurrentEditString3,width='50')\n        self._EditString3.pack(side='bottom')\n        self._EditString2 = Entry(self._Frame10\n            ,textvariable=self._CurrentEditString2,width='50')\n        self._EditString2.pack(side='bottom')\n        self._Frame12 = Frame(self._Frame9)\n        self._Frame12.pack(side='left')\n        self._String1Len = Label(self._Frame12,textvariable=self._EditString1Len)\n        self._String1Len.pack(side='top')\n        self._String2Len = Label(self._Frame12,textvariable=self._EditString2Len)\n        self._String2Len.pack(side='top')\n        self._String3Len = Label(self._Frame12,textvariable=self._EditString3Len)\n        self._String3Len.pack(side='bottom')\n        self._Frame11 = Frame(self._Frame9)\n        self._Frame11.pack(anchor='nw',fill='x',side='left')\n        self._SetStringBtn = Button(self._Frame11,text='SET STRING')\n        self._SetStringBtn.pack(side='left')\n        self._SetStringBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_SetStringBtn_Button_1)\n        self._Frame4 = Frame(self._ParFrame)\n        self._Frame4.pack(expand='yes',fill='both',side='left')\n        self._ParList = Listbox(self._Frame4)\n        self._ParList.pack(expand='yes',fill='both',side='top')\n        self._Frame5 = Frame(self._ParFrame)\n        self._Frame5.pack(expand='yes',fill='x',side='left')\n        self._Frame8 = Frame(self._StringFrame)\n        self._Frame8.pack(side='top')\n        self._StringListLabel = Label(self._Frame8,text='String list')\n        self._StringListLabel.pack(anchor='n',fill='x',side='left')\n        self._Frame6 = Frame(self._StringFrame)\n        self._Frame6.pack(expand='yes',fill='both',side='top')\n        self._StringList = Listbox(self._Frame6)\n        self._StringList.pack(anchor='nw',expand='yes',fill='both',side='left')\n        self._StringList.bind('<<ListboxSelect>>',self._on_StringList_select)\n        self._StringScroll = Scrollbar(self._Frame6)\n        self._StringScroll.pack(anchor='e',fill='y',side='left')\n        self._Frame7 = Frame(self._StringFrame)\n        self._Frame7.pack(fill='both',side='top')\n        self._StringIdxTextLbl = Label(self._Frame7,text='Current string:')\n        self._StringIdxTextLbl.pack(side='left')\n        self._StringIdxLbl = Label(self._Frame7,textvariable=self._StringIdx)\n        self._StringIdxLbl.pack(side='left')\n        self._AddStringBtn = Button(self._Frame7,text='Add string')\n        self._AddStringBtn.pack(anchor='e',side='left')\n        self._AddStringBtn.bind('<ButtonPress-1>' \\\n            ,self._on_AddStringBtn_Button_1)\n        self._Frame14 = Frame(self._MiscFrame)\n        self._Frame14.pack(expand='yes',fill='both',side='top')\n        self._TextAreaLbl = Label(self._Frame14,text='Text area')\n        self._TextAreaLbl.pack(anchor='n',side='top')\n        self._PakTextArea = Text(self._Frame14,height='8',wrap='word')\n        self._PakTextArea.pack(expand='yes',fill='y',side='top')\n        self._Frame13 = Frame(self._MiscFrame)\n        self._Frame13.pack(fill='x',side='top')\n        self._MaxWidthEntry = IntegerEntry(self._Frame13,state='disabled'\n            ,textvariable=self._TextWidthVal)\n        self._MaxWidthEntry.pack(side='left')\n        self._MaxWidthTest = Checkbutton(self._Frame13\n            ,command=self._on_MaxWidthTest_click,text='Max Width'\n            ,variable=self._MaxWidthEnabled)\n        self._MaxWidthTest.pack(fill='x',side='left')\n        self._SetPakTextBtn = Button(self._Frame13,text='Set Text')\n        self._SetPakTextBtn.pack(side='right')\n        self._SetPakTextBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_SetPakTextBtn_ButRel_1)\n        self._ParListFrame = Frame(self._Frame5)\n        self._ParListFrame.pack(expand='yes',fill='x',side='top')\n        self._OpCodeLabel = Label(self._ParListFrame,text='Op Code',width='10')\n        self._OpCodeLabel.pack(anchor='nw',side='left')\n        self._OpCodeEdit = Entry(self._ParListFrame\n            ,textvariable=self._OpCodeEditText)\n        self._OpCodeEdit.pack(anchor='nw',side='left')\n        self._ParEditFrame = Frame(self._Frame5)\n        self._ParEditFrame.pack(expand='yes',fill='x',side='top')\n        self._ParLabel = Label(self._ParEditFrame\n            ,textvariable=self._ParLabelText,width='10')\n        self._ParLabel.pack(anchor='nw',side='left')\n        self._ParEdit = Entry(self._ParEditFrame,textvariable=self._ParEditText)\n        self._ParEdit.pack(anchor='nw',side='left')\n        self._Button1 = Button(self._ParEditFrame)\n        self._Button1.pack(anchor='nw',side='left')\n"
p746
aS'        #\n        #Your code here\n        #\n        self._FileNameText.set(\'Select the file\')\n        self._ParLabelText.set(\'Par name\')\n        self._CurrentEditString1.trace(\'w\', self._on_EditString1_modified)\n        self._CurrentEditString2.trace(\'w\', self._on_EditString2_modified)\n        self._CurrentEditString3.trace(\'w\', self._on_EditString3_modified)\n        self._TextWidthVal.trace(\'w\', self._on_MaxWidthEntry_changed)\n        # Tabs\n        self._TabHost.add(self._CanvasFrame, text="Canvas")\n        self._TabHost.add(self._StringFrame, text="Strings")\n        self._TabHost.add(self._MiscFrame, text="Pak Text")\n        # Filter\n        self._FilterFlowList.deselect()\n        # Set menu\n        self._RootMenu = Menu(Master)\n        # File menu\n        FileMenu = Menu(self._RootMenu, tearoff=0)\n        FileMenu.add_command(label="Open", command=self.openFile)\n        FileMenu.add_command(label="Save", command=self.saveFile)\n        FileMenu.add_command(label="Check Progress", command=self.checkProgress)\n        FileMenu.add_command(label="Extract Pak", command=self.extractPak)\n        FileMenu.add_command(label="Exit", command=exit)\n        self._RootMenu.add_cascade(label="File", menu=FileMenu)\n        # Options menu\n        OptionsMenu = Menu(self._RootMenu, tearoff=0)\n        OptionsMenu.add_command(label="Game Data", command=self.openGameDataOpts)\n        self._RootMenu.add_cascade(label="Options", menu=OptionsMenu)\n        Master.config(menu=self._RootMenu)\n        # Scrollbars\n        self._FlowScroll.config( command = self._FlowList.yview )\n        self._FlowList[\'yscrollcommand\'] = self._FlowScroll.set\n        self._StringScroll.config( command = self._StringList.yview )\n        self._StringList[\'yscrollcommand\'] = self._StringScroll.set\n'
p747
aS'    #\n    #Start of event handler methods\n    #\n'
p748
aS"    def _on_EditString1_modified(self,*args):\n        # We don't need to count the <CLT>s\n        string = self._CurrentEditString1.get()\n        string = re.sub(r'<CLT.*?>', '', string)\n        self._EditString1Len.set('Chars left: %d' % (96 - len(string)))\n        pass\n\n    def _on_EditString2_modified(self,*args):\n        # We don't need to count the <CLT>s\n        string = self._CurrentEditString2.get()\n        string = re.sub(r'<CLT.*?>', '', string)\n        self._EditString2Len.set('Chars left: %d' % (96 - len(string)))\n        pass\n\n    def _on_EditString3_modified(self,*args):\n        # We don't need to count the <CLT>s\n        string = self._CurrentEditString3.get()\n        string = re.sub(r'<CLT.*?>', '', string)\n        self._EditString3Len.set('Chars left: %d' % (96 - len(string)))\n        pass\n"
p749
aS'\n    def _on_AddOpBtn_Button_1(self'
p750
aS',Event=None):\n        question = "This action will ADD a new Operation into the script. Continue?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            # Here we should open another window to add op\n            w = OpCodeCreator(self)\n            # Wait for the window to close\n            w.wait_window(w)\n            pass\n        pass\n'
p751
aS'\n    def _on_AddStringBtn_Button_1(self'
p752
aS',Event=None):\n        # Show warning\n        question = "This action will ADD a string into the script. Continue?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            s = tkSimpleDialog.askstring("Add string", "")\n            if s:\n                # Append the string into the list and add it to the listbox\n                try:\n                    # Find opcode in which we declare the number of strings\n                    ns_idx = self.lin_stack[-1].opcode_list.index(0)\n                    # Add one more string\n                    self.lin_stack[-1].pars_list[ns_idx] = (self.lin_stack[-1].pars_list[ns_idx][0], self.lin_stack[-1].pars_list[ns_idx][0][1] + 1)\n                    # Add the string to the string_list \n                    self.lin_stack[-1].string_list.append(s.encode(\'utf16\'))\n                    # Add it to the listbox\n                    self._StringList.insert(END, s)\n                    # Show the index of the new string\n                    tkMessageBox.showinfo(\'String added\', \'Inserted string index: %s\' % str(len(self.lin_stack[-1].string_list) - 1))\n                except:\n                    # Something went wrong\n                    tkMessageBox.showerror(\'Error\', \'Error adding string\')\n        pass\n'
p753
aS'\n    def _on_DelOpBtn_Button_1(self'
p754
aS',Event=None):\n        question = "This action will DELETE the Operation from the script. Continue?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            i = int(self._FlowList.curselection()[0])\n            # Delete from lists\n            self._FlowList.delete(i)\n            # Change strings section offset\n            opcode = self.lin_stack[-1].opcode_list[i]\n            offset = 0x02\n            # Add size of each parameter\n            for par in OP_PARAMS[opcode]:\n                offset += struct.calcsize(par[1]) \n            self.lin_stack[-1].baseoffset -= offset\n            # Delete opcode, action and parameters\n            del self.lin_stack[-1].opcode_list[i]\n            del self.lin_stack[-1].action_list[i]\n            del self.lin_stack[-1].pars_list[i]\n        pass\n'
p755
aS'\n    def _on_FilterFlowList_check(self'
p756
aS",Event=None):\n        if self._Filtered.get() == '1':\n            # Create a filter window\n            flt = Filter(self)\n            # Populate the window\n            flt.initLists(self.hidden_opcodes, self.visible_opcodes)\n            # Wait for the window to close\n            flt.wait_window(flt)\n            pass\n        else:\n            pass\n        pass\n"
p757
aS'\n    def _on_FlowFileUpBtn_ButRel_1(self'
p758
aS',Event=None):\n        # For lin - just pop the last one and populate with the old\n        if self.mode == \'.lin\':\n            st = self.lin_stack\n            question = "Save changes?"\n            proceed = tkMessageBox.askyesno("WARNING", question)\n            if proceed:\n                self.saveFile()\n            st.pop()\n            self.populateLinLists()\n            # Check stack size, if last element - disable UP btn\n            if len(st) < 2:\n                self._FlowFileUpBtn.config(state=\'disabled\')\n            # Fix header\n            self._FileNameText.set(os.path.split(st[-1].fn)[1])\n            pass\n        # For pak - we have internal writer\n        if self.mode == \'.pak\':\n            st = self.pak_stack\n            # Save changes\n            question = "Save changes?"\n            proceed = tkMessageBox.askyesno("WARNING", question)\n            if proceed:\n                # Create a data tuple\n                filename = st[-2].files[self.pak_filenum][0]\n                data = st[-1].to_string()\n                st[-2].files[self.pak_filenum] = (filename, data)\n            # Clear flowlist and pop the last element of the pak stack\n            self._FlowList.delete(0,END)\n            st.pop()\n            # Populate flowlist with original pak\'s files\n            for f in st[-1].files:\n                self._FlowList.insert(END, "%s" % f[0])                \n            # Check stack size, if last element - disable UP btn\n            if len(st) < 2:\n                self._FlowFileUpBtn.config(state=\'disabled\')\n        pass\n'
p759
aS'\n    def _on_FlowList_DblBtn(self'
p760
aS',Event=None):\n        if self.mode == \'.pak\':\n            self._on_FlowList_DblBtn_Pak()\n        pass\n    \n    def _on_FlowList_DblBtn_Pak(self):\n        if self._FlowList.size() > 0:\n            # Now working not with actions, but with files\n            i = int(self._FlowList.curselection()[0])\n            file = self.pak_stack[-1].files[i]\n            if \'.dat\' in file[0] or \'.p3d\' in file[0]:\n                question = "Try unpacking binary file?"\n                proceed = tkMessageBox.askyesno("WARNING", question)\n                if proceed:\n                    self.pak_filenum = i\n                    # We\'ll use it as a directory\n                    self._FlowList.delete(0,END)\n                    # Now unpack the file\n                    pak = PakFile()\n                    pak.fromData(file[1])\n                    self.pak_stack.append(pak)\n                    for f in self.pak_stack[-1].files:\n                        self._FlowList.insert(END, "%s" % f[0])\n                    # Set UP btn working\n                    self._FlowFileUpBtn.config(state=\'normal\')\n'
p761
aS'\n    def _on_FlowList_select(self'
p762
aS',Event=None):\n        self.current_act_idx = int(self._FlowList.curselection()[0])\n        if self.mode == \'.lin\':\n            self._on_FlowList_select_Lin()\n        if self.mode == \'.pak\':\n            self._on_FlowList_select_Pak()\n        pass\n    \n    def _on_FlowList_select_Lin(self):\n        if self._FlowList.size() > 0:\n            i = int(self._FlowList.curselection()[0])\n            action = self.lin_stack[-1].action_list[i]\n            pars = self.lin_stack[-1].pars_list[i]\n            code = self.lin_stack[-1].opcode_list[i]\n            # Clear everything related to pars in GUI\n            self._OpCodeEditText.set(\'\')\n            self._ParEditText.set(\'\')\n            self._ParLabelText.set(\'Par name\')\n            self._ParList.delete(0,END)\n            # Put all parameters to the GUI\n            self._OpCodeEditText.set(code)\n            for par in pars:\n                self._ParList.insert(END, "%s:\\t %d" % (par[0],par[1]) )\n            # What to do for different opcodes\n            # Show sprite\n            if code == WRD_SPRITE:\n                GuiFuncs.showSprite(self, GameDataLoc, pars)\n            # Show flash\n            if code == WRD_FLASH:\n                GuiFuncs.showFlash(self, GameDataLoc, pars)\n            # Show BGD\n            if code == WRD_BGD:\n                GuiFuncs.showBGD(self, GameDataLoc, pars)\n            # Text highlighting\n            if code == WRD_CLT:\n                self.scene.text_clt = True\n            # Get string idx\n            if code == WRD_GET_LINE_IDX:\n                self._StringList.select_set(pars[0][1])\n                self._on_StringList_select()\n                self.scene.text = self._StringList.get(pars[0][1])\n            # Print next string from FIFO\n            if code == WRD_PRINT_LINE:\n                GuiFuncs.printLine(self)\n            # If waiting for input (go to the next line waiting)\n            if code == WRD_WAIT_INPUT:\n                self.scene.text = \'\'\n            # Set speaker\n            if code == WRD_SPEAKER:\n                self.scene.speaker = self.charNames[pars[0][1]]\n            # Call script\n            if code == WRD_CALL_SCRIPT:\n                question = \'Call script: e%02d_%03d_%03d.lin?\' % (pars[0][1], pars[1][1], pars[2][1])\n                proceed = tkMessageBox.askyesno("Call script", question)\n                if proceed:\n                    # Clear canvas\n                    self._ScreenView.delete(ALL)\n                    self.scene.flash = []\n                    # Clear lists\n                    self._FlowList.delete(0,END)\n                    self._StringList.delete(0,END)\n                    # Load next file\n                    next_fn = os.path.join(DoneDataLoc, \'jp\', \'script\', \'e%02d_%03d_%03d.lin\' % (pars[0][1], pars[1][1], pars[2][1]))\n                    if not os.path.isfile(next_fn):\n                        next_fn = os.path.join(GameDataLoc, \'jp\', \'script\', \'e%02d_%03d_%03d.lin\' % (pars[0][1], pars[1][1], pars[2][1]))                    \n                    self.decodeFile(next_fn, clear = False)\n                    # Set UP btn working\n                    self._FlowFileUpBtn.config(state=\'normal\')\n            # Go to the next script\n            if code == WRD_GOTO_SCRIPT:\n                question = \'Go to the next script: e%02d_%03d_%03d.lin?\' % (pars[0][1], pars[1][1], pars[2][1])\n                loadNext = tkMessageBox.askyesno("Go to the next script", question)\n                if loadNext:\n                    # Clear canvas\n                    self._ScreenView.delete(ALL)\n                    self.scene.flash = []\n                    # Clear lists\n                    self._FlowList.delete(0,END)\n                    self._StringList.delete(0,END)\n                    # Load next file\n                    next_fn = os.path.join(DoneDataLoc, \'jp\', \'script\', \'e%02d_%03d_%03d.lin\' % (pars[0][1], pars[1][1], pars[2][1]))\n                    if not os.path.isfile(next_fn):\n                        next_fn = os.path.join(GameDataLoc, \'jp\', \'script\', \'e%02d_%03d_%03d.lin\' % (pars[0][1], pars[1][1], pars[2][1]))                    \n                    self.decodeFile(next_fn)\n        pass\n    \n    def _on_FlowList_select_Pak(self):\n        if self._FlowList.size() > 0:\n            # Now working not with actions, but with files\n            i = int(self._FlowList.curselection()[0])    \n            # If not - looking at the current pak file and level\n            file = self.pak_stack[-1].files[i]\n            # Checking the file type\n            if \'.gim\' in file[0]:\n                GimImage = GimFile()\n                GimImage.fromData(file[1])\n                GimImage.getImage()\n                pilImage = PIL.Image.new("RGBA", (GimImage.width, GimImage.height))\n                pilImage.putdata(GimImage.image)\n                self.scene.sprite = ImageTk.PhotoImage(pilImage)\n                POS_X = (2*SCREEN_W - GimImage.width)/2\n                POS_Y = (2*SCREEN_H - GimImage.height)/2\n                imagesprite = self._ScreenView.create_image(POS_X,POS_Y,image=self.scene.sprite, tag = \'sprite\')                \n            elif \'.gmo\' in file[0]:\n                GmoImage = GmoFile()\n                GmoImage.fromData(file[1])\n                GmoImage.extractGim()\n                GmoImage.gim.getImage()\n                pilImage = PIL.Image.new("RGBA", (GmoImage.gim.width, GmoImage.gim.height))\n                pilImage.putdata(GmoImage.gim.image)\n                self.scene.sprite = ImageTk.PhotoImage(pilImage)\n                POS_X = (2*SCREEN_W - GmoImage.gim.width)/2\n                POS_Y = (2*SCREEN_H - GmoImage.gim.height)/2\n                imagesprite = self._ScreenView.create_image(POS_X,POS_Y,image=self.scene.sprite, tag = \'sprite\')                \n            elif \'.txt\' in file[0]:\n                self.scene.text = file[1].decode(\'utf16\')\n                self._CurrentEditString1.set(self.scene.text)\n                self._PakTextArea.delete(1.0, END)\n                self._PakTextArea.insert(END, self.scene.text)\n        pass\n                \n    def openGameDataOpts(self):\n        gd = GameData()\n        pass\n    \n    def extractPak(self):\n        options = {}\n        options[\'filetypes\'] = [(\'pak files\', (\'*.pak\',\'*.p3d\'))]\n        fn = tkFileDialog.askopenfilename(**options)\n        ds = tkFileDialog.askdirectory()\n        if fn and ds:\n            pak = PakFile(fn)\n            pak.getFiles()\n            for f in pak.files:\n                fp = open(os.path.join(ds, f[0]), \'wb\')\n                fp.write(f[1])\n                fp.close\n        tkMessageBox.showinfo(\'Complete\', \'Pak file %s extracted successfully into %s\' % (fn, ds))\n        pass\n    \n    def checkProgress(self):\n        DataPath = {\'orig\': GameDataLoc,\n                             \'proc\': InProcDataLoc,\n                             \'done\': DoneDataLoc\n        }\n        fn = checkProgress(DataPath)\n        if fn:\n            self.openFile(fn)\n        pass\n        \n    def openFile(self, fn = None):\n        options = {}\n        options[\'filetypes\'] = [(\'script files\', \'.lin\'), (\'image files\', (\'*.gim\',\'*.gmo\')), (\'pak files\', (\'*.pak\',\'*.p3d\')), (\'all files\', \'.*\')]\n        if not fn:\n            fn = tkFileDialog.askopenfilename(**options)\n        if fn:\n            self.decodeFile(fn)\n        pass\n    \n    def saveFile(self):\n        fn = tkFileDialog.asksaveasfilename(initialfile=self._FileNameText.get())\n        if fn:\n            self.encodeFile(fn)\n            # Get current slider positions and re-read both files\n            fl = self._FlowList.yview()\n            st = self._StringList.yview()\n            self.decodeFile(fn)\n            self._FlowList.yview_moveto(fl[0])\n            self._StringList.yview_moveto(st[0])\n        pass\n    \n    def populateLinLists(self):\n        # Clear everything\n        self._StringList.delete(0,END)\n        self._FlowList.delete(0,END)\n        # Put strings into listbox\n        for s in self.lin_stack[-1].string_list:\n            self._StringList.insert(END, s.decode(\'utf16\'))        \n        # Set action list\n        for i in xrange(len(self.lin_stack[-1].action_list)):\n            self._FlowList.insert(END, "%s%s" % (self.lin_stack[-1].action_list[i], self.lin_stack[-1].pars_list[i]))\n        pass\n    \n    def decodeFile(self, fn, clear = True):\n        # Clear stacks\n        if clear:\n            self.lin_stack = []\n            self.pak_stack = []\n        # Get file type from ext\n        file = os.path.split(fn)[1]\n        self._FileNameText.set(file)\n        print("Decoding %s" % fn)\n        # Lin file\n        if \'.lin\' in file:\n            self.mode = \'.lin\'\n            # Decode another file\n            self.lin_stack.append(LinFile())\n            self.lin_stack[-1].decodeLinFile(fn)\n            self.populateLinLists()\n        \n        # Pak file\n        if \'.pak\' in file:\n            self.mode = \'.pak\'\n            # Decode .pak file\n            pak = PakFile(fn)\n            pak.getFiles()\n            # Append it into stack\n            self.pak_stack.append(pak)\n            # Clear everything\n            self._StringList.delete(0,END)\n            self._FlowList.delete(0,END)\n            # Put all filenames into the flow list\n            for f in self.pak_stack[-1].files:\n                self._FlowList.insert(END, "%s" % f[0])\n        \n        # P3d file\n        if \'.p3d\' in file:\n            self.mode = \'.pak\'\n            # Decode .pak file\n            pak = P3dFile(fn)\n            pak.getFiles()\n            # Append it into stack\n            self.pak_stack.append(pak)\n            # Clear everything\n            self._StringList.delete(0,END)\n            self._FlowList.delete(0,END)\n            # Put all filenames into the flow list\n            for f in self.pak_stack[-1].files:\n                self._FlowList.insert(END, "%s" % f[0])\n        pass\n        \n    def encodeFile(self,fn):\n        file = os.path.split(fn)[1]\n        self._FileNameText.set(file)\n        if \'.lin\' in fn:\n            self.lin_stack[-1].encodeLinFile(fn)\n        if \'.pak\' in fn:\n            self.pak_stack[-1].makePak(fn)\n        pass\n        \n    def exit():\n        Root.quit()\n\n'
p763
aS'\n    def _on_MaxWidthEntry_changed(self'
p764
aS',*args):\n        try:\n            self._PakTextArea.config(width=int(self._TextWidthVal.get()))\n        except:\n            pass\n        pass\n'
p765
aS'\n    def _on_MaxWidthTest_click(self'
p766
aS",Event=None):\n        if self._MaxWidthEnabled.get() == 1:\n            self._MaxWidthEntry.config(state='normal')\n            try: \n                self._PakTextArea.config(width=int(self._TextWidthVal.get()))\n            except:\n                self._TextWidthVal.set('36')\n        else:\n            self._MaxWidthEntry.config(state='disabled')\n        pass\n"
p767
aS'\n    def _on_SetPakTextBtn_ButRel_1(self'
p768
aS",Event=None):\n        str = self._PakTextArea.get(1.0, END)\n        i = self.current_act_idx\n        l = list(self.pak_stack[-1].files[i])\n        l[1] = str.encode('utf16')\n        self.pak_stack[-1].files[i] = tuple(l)\n        pass\n"
p769
aS'\n    def _on_SetStringBtn_Button_1(self'
p770
aS',Event=None):\n        # For .lin file we\'re just changing the string in its string_list\n        if self.mode == \'.lin\':\n            # Construct the new string\n            str1 = self._CurrentEditString1.get()\n            str2 = self._CurrentEditString2.get()\n            str3 = self._CurrentEditString3.get()\n            final_string = \'\'\n            if str1 != \'\':\n                final_string += str1 + (\'\\x0d\\x00\\x0a\\x00\').decode(\'utf16\')\n            if str2 != \'\':\n                final_string += str2 + (\'\\x0d\\x00\\x0a\\x00\').decode(\'utf16\')\n            if str3 != \'\':\n                final_string += str3 + (\'\\x0d\\x00\\x0a\\x00\').decode(\'utf16\')\n            # Replace chars that\'re not present in the game\n            final_string = final_string.replace(\'?\', u"\\uFF1F") # Question mark\n            # Get string index\n            idx = self.current_str_idx\n            # Delete the old string from the visible list\n            self._StringList.delete(idx)\n            # Insert the new string\n            self.lin_stack[-1].string_list[idx] = final_string\n            self._StringList.insert(idx, final_string)\n            # Show the new version\n            self.scene.text = self._StringList.get(idx)\n            GuiFuncs.printLine(self)\n        # For .pak we\'re changing the Pak.files[i] content\n        elif self.mode == \'.pak\':\n            str = self._CurrentEditString1.get()\n            i = self.current_act_idx\n            l = list(self.pak_stack[-1].files[i])\n            l[1] = str.encode(\'utf16\')\n            self.pak_stack[-1].files[i] = tuple(l)\n        pass\n'
p771
aS'\n    def _on_StringList_select(self'
p772
aS",Event=None):\n        if self._StringList.size() > 0:\n            num = int(self._StringList.curselection()[0])\n            string = self._StringList.get(num)\n            string = string.split('\\r\\n')\n            self._CurrentEditString1.set(string[0])\n            if len(string) > 1:\n                self._CurrentEditString2.set(string[1])\n            else:\n                self._CurrentEditString2.set('')\n            if len(string) > 2:\n                self._CurrentEditString3.set(string[2])\n            else:\n                self._CurrentEditString3.set('')\n            self.current_str_idx = num\n            self._StringIdx.set(num)\n        pass\n"
p773
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p774
aS'\n# This one-liner splits the string without consuming delimiters\ndef splitkeepsep(s, sep):\n    return reduce(lambda acc, elem: acc[:-1] + [acc[-1] + elem] if elem == sep else acc + [elem], re.split("(%s)" % re.escape(sep), s), [])'
p775
asg7
I0
sg44
I16268671
ssg29
(lp776
(dp777
g70
S'Tkinter'
p778
sg49
g721
sg73
S'Frame'
p779
sg75
(lp780
sg24
g148
sg85
g108
sg87
(lp781
sg89
(lp782
sa(dp783
g70
g599
sg49
S'_AddOpBtn'
p784
sg73
g601
sg75
(lp785
(dp786
g49
g81
sg79
g661
sa(dp787
g49
g84
sg79
g664
sasg24
Nsg85
(lp788
I794
aI9689
asg87
(lp789
(dp790
g134
S'_on_AddOpBtn_Button_1'
p791
sg136
S''
sg137
S'<ButtonRelease-1>'
p792
sasg89
(lp793
(dp794
g49
S'text'
p795
sg79
S'ADD OP'
p796
sg143
Nsa(dp797
g49
S'height'
p798
sg79
S'n:3'
p799
sg143
Nsasa(dp800
g70
S'Tkinter'
p801
sg49
S'_AddStringBtn'
p802
sg73
S'Button'
p803
sg75
(lp804
(dp805
g49
g78
sg79
S'e'
sasg24
Nsg85
(lp806
I3790
aI6124
asg87
(lp807
(dp808
g134
S'_on_AddStringBtn_Button_1'
p809
sg136
S''
sg137
S'<ButtonPress-1>'
p810
sasg89
(lp811
(dp812
g49
g795
sg79
S'Add string'
p813
sg143
Nsasa(dp814
g70
g229
sg49
S'_Button1'
p815
sg73
g231
sg75
(lp816
(dp817
g49
g78
sg79
S'nw'
p818
sasg24
Nsg85
(lp819
I7871
aI9749
asg87
(lp820
sg89
(lp821
sa(dp822
g70
S'Tkinter'
p823
sg49
S'_CanvasFrame'
p824
sg73
S'Frame'
p825
sg75
(lp826
sg24
(L0L
L1L
L1L
L0L
L2L
tp827
sg85
g108
sg87
(lp828
sg89
(lp829
sa(dp830
g70
S'Tkinter'
p831
sg49
S'_ContentFrame'
p832
sg73
S'Frame'
p833
sg75
(lp834
(dp835
g49
g78
sg79
S'nw'
p836
sa(dp837
g49
g81
sg79
S'yes'
p838
sa(dp839
g49
g84
sg79
S'both'
p840
sasg24
(L0L
L1L
L1L
tp841
sg85
g108
sg87
(lp842
sg89
(lp843
sa(dp844
g70
S'Tkinter'
p845
sg49
S'_CurActionLabel'
p846
sg73
S'Label'
p847
sg75
(lp848
sg24
Nsg85
(lp849
I6367
aI7823
asg87
(lp850
sg89
(lp851
(dp852
g49
S'textvariable'
p853
sg79
S'_CurAction'
p854
sg143
S's.as'
p855
sasa(dp856
g70
g599
sg49
S'_DelOpBtn'
p857
sg73
g601
sg75
(lp858
(dp859
g49
g81
sg79
g661
sa(dp860
g49
g84
sg79
g664
sasg24
Nsg85
(lp861
I1516
aI9689
asg87
(lp862
(dp863
g134
S'_on_DelOpBtn_Button_1'
p864
sg136
S''
sg137
S'<ButtonRelease-1>'
p865
sasg89
(lp866
(dp867
g49
g795
sg79
S'DELETE OP'
p868
sg143
Nsasa(dp869
g70
S'Tkinter'
p870
sg49
S'_EditString1'
p871
sg73
S'Entry'
p872
sg75
(lp873
(dp874
g49
g78
sg79
S's'
sasg24
Nsg85
(lp875
I3269
aI6639
asg87
(lp876
sg89
(lp877
(dp878
g49
S'pyclass'
p879
sg79
S'ttk.Entry'
p880
sg143
Nsa(dp881
g49
S'width'
p882
sg79
S'n:50'
p883
sg143
Nsa(dp884
g49
S'textvariable'
p885
sg79
S'_CurrentEditString1'
p886
sg143
S's.as'
p887
sasa(dp888
g70
g845
sg49
S'_EditString2'
p889
sg73
S'Entry'
p890
sg75
(lp891
sg24
Nsg85
(lp892
I3281
aI7010
asg87
(lp893
sg89
(lp894
(dp895
g49
g882
sg79
S'n:50'
p896
sg143
Nsa(dp897
g49
g885
sg79
S'_CurrentEditString2'
p898
sg143
S's.as'
p899
sasa(dp900
g70
S'Tkinter'
p901
sg49
S'_EditString3'
p902
sg73
S'Entry'
p903
sg75
(lp904
sg24
Nsg85
(lp905
I3299
aI7321
asg87
(lp906
sg89
(lp907
(dp908
g49
g882
sg79
S'n:50'
p909
sg143
Nsa(dp910
g49
g885
sg79
S'_CurrentEditString3'
p911
sg143
S's.as'
p912
sasa(dp913
g70
S'Tkinter'
p914
sg49
S'_FileName'
p915
sg73
S'Label'
p916
sg75
(lp917
sg24
Nsg85
(lp918
I4615
aI239
asg87
(lp919
sg89
(lp920
(dp921
g49
g853
sg79
S'_FileNameText'
p922
sg143
S's.as'
p923
sasa(dp924
g70
g831
sg49
S'_FileNameFrame'
p925
sg73
g833
sg75
(lp926
(dp927
g49
g84
sg79
S'x'
sasg24
(L0L
L0L
tp928
sg85
g108
sg87
(lp929
sg89
(lp930
sa(dp931
g70
g229
sg49
S'_FilterFlowList'
p932
sg73
S'Checkbutton'
p933
sg75
(lp934
(dp935
g49
g78
sg79
S'ne'
p936
sasg24
Nsg85
(lp937
I1983
aI1459
asg87
(lp938
sg89
(lp939
(dp940
g49
S'text'
p941
sg79
S'Filtered'
p942
sg143
Nsa(dp943
g49
S'variable'
p944
sg79
S'_Filtered'
p945
sg143
S'sif.as'
p946
sa(dp947
g49
S'command'
p948
sg79
S'_on_FilterFlowList_check'
p949
sg143
L1L
sasa(dp950
g70
g379
sg49
S'_FlowFileUpBtn'
p951
sg73
g381
sg75
(lp952
sg24
Nsg85
(lp953
I1195
aI1447
asg87
(lp954
(dp955
g134
S'_on_FlowFileUpBtn_ButRel_1'
p956
sg136
S''
sg137
S'<ButtonRelease-1>'
p957
sasg89
(lp958
(dp959
g49
g795
sg79
S'UP'
p960
sg143
Nsa(dp961
g49
S'state'
p962
sg79
S'disabled'
p963
sg143
Nsasa(dp964
g70
g624
sg49
S'_FlowFrame'
p965
sg73
g626
sg75
(lp966
(dp967
g49
g81
sg79
g661
sa(dp968
g49
g84
sg79
g664
sasg24
(L0L
L1L
L0L
L1L
tp969
sg85
g108
sg87
(lp970
sg89
(lp971
sa(dp972
g70
g914
sg49
S'_FlowFrameLabel'
p973
sg73
g916
sg75
(lp974
(dp975
g49
g78
sg79
S'nw'
p976
sasg24
Nsg85
(lp977
I285
aI1447
asg87
(lp978
sg89
(lp979
(dp980
g49
S'text'
p981
sg79
S'Actions List'
p982
sg143
Nsasa(dp983
g70
g379
sg49
S'_FlowList'
p984
sg73
S'Listbox'
p985
sg75
(lp986
(dp987
g49
g81
sg79
S'yes'
p988
sa(dp989
g49
g84
sg79
S'both'
p990
sasg24
Nsg85
(lp991
I988
aI4653
asg87
(lp992
(dp993
g134
S'_on_FlowList_select'
p994
sg136
S''
sg137
S'<<ListboxSelect>>'
p995
sa(dp996
g134
S'_on_FlowList_DblBtn'
p997
sg136
S''
sg137
S'<Double-Button-1>'
p998
sasg89
(lp999
sa(dp1000
g70
g379
sg49
S'_FlowScroll'
p1001
sg73
S'Scrollbar'
p1002
sg75
(lp1003
(dp1004
g49
g78
sg79
S'e'
sa(dp1005
g49
g84
sg79
S'y'
sasg24
Nsg85
(lp1006
I1322
aI4641
asg87
(lp1007
sg89
(lp1008
sa(dp1009
g70
g221
sg49
S'_Frame1'
p1010
sg73
g223
sg75
(lp1011
(dp1012
g49
g84
sg79
S'both'
p1013
sasg24
(L0L
L1L
L0L
L0L
tp1014
sg85
g108
sg87
(lp1015
sg89
(lp1016
sa(dp1017
g70
S'Tkinter'
p1018
sg49
S'_Frame10'
p1019
sg73
S'Frame'
p1020
sg75
(lp1021
sg24
(L0L
L1L
L1L
L1L
L0L
tp1022
sg85
g108
sg87
(lp1023
sg89
(lp1024
sa(dp1025
g70
g1018
sg49
S'_Frame11'
p1026
sg73
g1020
sg75
(lp1027
(dp1028
g49
g78
sg79
S'nw'
p1029
sa(dp1030
g49
g84
sg79
S'x'
sasg24
(L0L
L1L
L1L
L1L
L2L
tp1031
sg85
g108
sg87
(lp1032
sg89
(lp1033
sa(dp1034
g70
g1018
sg49
S'_Frame12'
p1035
sg73
g1020
sg75
(lp1036
sg24
(L0L
L1L
L1L
L1L
L1L
tp1037
sg85
g108
sg87
(lp1038
sg89
(lp1039
sa(dp1040
g70
S'Tkinter'
p1041
sg49
S'_Frame13'
p1042
sg73
S'Frame'
p1043
sg75
(lp1044
(dp1045
g49
g84
sg79
S'x'
sasg24
(L0L
L1L
L1L
L0L
L1L
L1L
tp1046
sg85
g108
sg87
(lp1047
sg89
(lp1048
sa(dp1049
g70
g1041
sg49
S'_Frame14'
p1050
sg73
g1043
sg75
(lp1051
(dp1052
g49
g81
sg79
S'yes'
p1053
sa(dp1054
g49
g84
sg79
S'both'
p1055
sasg24
(L0L
L1L
L1L
L0L
L1L
L0L
tp1056
sg85
g108
sg87
(lp1057
sg89
(lp1058
sa(dp1059
g70
g831
sg49
S'_Frame2'
p1060
sg73
g833
sg75
(lp1061
(dp1062
g49
g78
sg79
g836
sa(dp1063
g49
g81
sg79
S'yes'
p1064
sa(dp1065
g49
g84
sg79
S'both'
p1066
sasg24
(L0L
L1L
tp1067
sg85
g108
sg87
(lp1068
sg89
(lp1069
sa(dp1070
g70
g624
sg49
S'_Frame3'
p1071
sg73
g626
sg75
(lp1072
(dp1073
g49
g84
sg79
S'x'
sasg24
(L0L
L1L
L0L
L2L
tp1074
sg85
g108
sg87
(lp1075
sg89
(lp1076
sa(dp1077
g70
S'Tkinter'
p1078
sg49
S'_Frame4'
p1079
sg73
S'Frame'
p1080
sg75
(lp1081
(dp1082
g49
g81
sg79
S'yes'
p1083
sa(dp1084
g49
g84
sg79
g1013
sasg24
(L0L
L1L
L1L
L3L
L0L
tp1085
sg85
g108
sg87
(lp1086
sg89
(lp1087
sa(dp1088
g70
g1078
sg49
S'_Frame5'
p1089
sg73
g1080
sg75
(lp1090
(dp1091
g49
g81
sg79
S'yes'
p1092
sa(dp1093
g49
g84
sg79
S'x'
sasg24
(L0L
L1L
L1L
L3L
L1L
tp1094
sg85
g108
sg87
(lp1095
sg89
(lp1096
sa(dp1097
g70
S'Tkinter'
p1098
sg49
S'_Frame6'
p1099
sg73
S'Frame'
p1100
sg75
(lp1101
(dp1102
g49
g81
sg79
S'yes'
p1103
sa(dp1104
g49
g84
sg79
S'both'
p1105
sasg24
(L0L
L1L
L1L
L0L
L0L
L1L
tp1106
sg85
g108
sg87
(lp1107
sg89
(lp1108
sa(dp1109
g70
g1098
sg49
S'_Frame7'
p1110
sg73
g1100
sg75
(lp1111
(dp1112
g49
g84
sg79
g1105
sasg24
(L0L
L1L
L1L
L0L
L0L
L2L
tp1113
sg85
g108
sg87
(lp1114
sg89
(lp1115
sa(dp1116
g70
S'Tkinter'
p1117
sg49
S'_Frame8'
p1118
sg73
S'Frame'
p1119
sg75
(lp1120
sg24
(L0L
L1L
L1L
L0L
L0L
L0L
tp1121
sg85
g108
sg87
(lp1122
sg89
(lp1123
sa(dp1124
g70
g1078
sg49
S'_Frame9'
p1125
sg73
g1080
sg75
(lp1126
(dp1127
g49
g84
sg79
S'x'
sasg24
(L0L
L1L
L1L
L1L
tp1128
sg85
g108
sg87
(lp1129
sg89
(lp1130
sa(dp1131
g70
S'Tkinter'
p1132
sg49
S'_MaxWidthEntry'
p1133
sg73
S'Entry'
p1134
sg75
(lp1135
sg24
Nsg85
(lp1136
I5591
aI6077
asg87
(lp1137
sg89
(lp1138
(dp1139
g49
g879
sg79
S'IntegerEntry'
p1140
sg143
Nsa(dp1141
g49
S'state'
p1142
sg79
S'disabled'
p1143
sg143
Nsa(dp1144
g49
g885
sg79
S'_TextWidthVal'
p1145
sg143
S's.as'
p1146
sasa(dp1147
g70
g1132
sg49
S'_MaxWidthTest'
p1148
sg73
S'Checkbutton'
p1149
sg75
(lp1150
(dp1151
g49
g84
sg79
S'x'
sasg24
Nsg85
(lp1152
I5828
aI6029
asg87
(lp1153
sg89
(lp1154
(dp1155
g49
g941
sg79
S'Max Width'
p1156
sg143
Nsa(dp1157
g49
g944
sg79
S'_MaxWidthEnabled'
p1158
sg143
S'sif.ai'
p1159
sa(dp1160
g49
g948
sg79
S'_on_MaxWidthTest_click'
p1161
sg143
L1L
sasa(dp1162
g70
g221
sg49
S'_MiscFrame'
p1163
sg73
g223
sg75
(lp1164
sg24
(L0L
L1L
L1L
L0L
L1L
tp1165
sg85
g108
sg87
(lp1166
sg89
(lp1167
sa(dp1168
g70
S'Tkinter'
p1169
sg49
S'_OpCodeEdit'
p1170
sg73
S'Entry'
p1171
sg75
(lp1172
(dp1173
g49
g78
sg79
S'nw'
p1174
sasg24
Nsg85
(lp1175
I7095
aI8708
asg87
(lp1176
sg89
(lp1177
(dp1178
g49
g885
sg79
S'_OpCodeEditText'
p1179
sg143
S's.as'
p1180
sasa(dp1181
g70
g845
sg49
S'_OpCodeLabel'
p1182
sg73
g847
sg75
(lp1183
(dp1184
g49
g78
sg79
g1174
sasg24
Nsg85
(lp1185
I6380
aI8708
asg87
(lp1186
sg89
(lp1187
(dp1188
g49
g981
sg79
S'Op Code'
p1189
sg143
Nsa(dp1190
g49
S'width'
p1191
sg79
S'n:10'
p1192
sg143
Nsasa(dp1193
g70
g831
sg49
S'_OpFrame'
p1194
sg73
g833
sg75
(lp1195
(dp1196
g49
S'ipadx'
p1197
sg79
S'n:25'
p1198
sa(dp1199
g49
g78
sg79
g836
sa(dp1200
g49
g84
sg79
S'y'
sasg24
(L0L
L1L
L0L
tp1201
sg85
g108
sg87
(lp1202
sg89
(lp1203
sa(dp1204
g70
g1132
sg49
S'_PakTextArea'
p1205
sg73
S'Text'
p1206
sg75
(lp1207
(dp1208
g49
g81
sg79
g1053
sa(dp1209
g49
g84
sg79
S'y'
sasg24
Nsg85
(lp1210
I6204
aI2440
asg87
(lp1211
sg89
(lp1212
(dp1213
g49
S'height'
p1214
sg79
S'n:8'
p1215
sg143
Nsa(dp1216
g49
S'wrap'
p1217
sg79
S'word'
p1218
sg143
Nsasa(dp1219
g70
g845
sg49
S'_ParEdit'
p1220
sg73
g890
sg75
(lp1221
(dp1222
g49
g78
sg79
g818
sasg24
Nsg85
(lp1223
I7101
aI9689
asg87
(lp1224
sg89
(lp1225
(dp1226
g49
g885
sg79
S'_ParEditText'
p1227
sg143
S's.as'
p1228
sasa(dp1229
g70
g1078
sg49
S'_ParEditFrame'
p1230
sg73
g1080
sg75
(lp1231
(dp1232
g49
g81
sg79
g1083
sa(dp1233
g49
g84
sg79
S'x'
sasg24
(L0L
L1L
L1L
L3L
L1L
L1L
tp1234
sg85
g108
sg87
(lp1235
sg89
(lp1236
sa(dp1237
g70
g1078
sg49
S'_ParFrame'
p1238
sg73
g1080
sg75
(lp1239
(dp1240
g49
g78
sg79
g1174
sa(dp1241
g49
g81
sg79
g1092
sa(dp1242
g49
g84
sg79
g1013
sasg24
(L0L
L1L
L1L
L3L
tp1243
sg85
g108
sg87
(lp1244
sg89
(lp1245
sa(dp1246
g70
g845
sg49
S'_ParLabel'
p1247
sg73
g847
sg75
(lp1248
(dp1249
g49
g78
sg79
g818
sasg24
Nsg85
(lp1250
I6422
aI9701
asg87
(lp1251
sg89
(lp1252
(dp1253
g49
g1191
sg79
S'n:10'
p1254
sg143
Nsa(dp1255
g49
g853
sg79
S'_ParLabelText'
p1256
sg143
S's.as'
p1257
sasa(dp1258
g70
g229
sg49
S'_ParList'
p1259
sg73
g255
sg75
(lp1260
(dp1261
g49
g81
sg79
g1083
sa(dp1262
g49
g84
sg79
g1013
sasg24
Nsg85
(lp1263
I3511
aI8864
asg87
(lp1264
sg89
(lp1265
sa(dp1266
g70
g1078
sg49
S'_ParListFrame'
p1267
sg73
g1080
sg75
(lp1268
(dp1269
g49
g81
sg79
g1083
sa(dp1270
g49
g84
sg79
S'x'
sasg24
(L0L
L1L
L1L
L3L
L1L
L0L
tp1271
sg85
g108
sg87
(lp1272
sg89
(lp1273
sa(dp1274
g70
S'Tkinter'
p1275
sg49
S'_ScreenView'
p1276
sg73
S'Canvas'
p1277
sg75
(lp1278
(dp1279
g49
g81
sg79
S'yes'
p1280
sasg24
Nsg85
(lp1281
I8599
aI2931
asg87
(lp1282
sg89
(lp1283
(dp1284
g49
S'height'
p1285
sg79
S'u:SCREEN_H'
p1286
sg143
Nsa(dp1287
g49
S'width'
p1288
sg79
S'u:SCREEN_W'
p1289
sg143
Nsa(dp1290
g49
S'background'
p1291
sg79
S'c:#000000'
p1292
sg143
Nsasa(dp1293
g70
g1132
sg49
S'_SetPakTextBtn'
p1294
sg73
S'Button'
p1295
sg75
(lp1296
sg24
Nsg85
(lp1297
I7168
aI6077
asg87
(lp1298
(dp1299
g134
S'_on_SetPakTextBtn_ButRel_1'
p1300
sg136
S''
sg137
S'<ButtonRelease-1>'
p1301
sasg89
(lp1302
(dp1303
g49
g795
sg79
S'Set Text'
p1304
sg143
Nsasa(dp1305
g70
S'Tkinter'
p1306
sg49
S'_SetStringBtn'
p1307
sg73
S'Button'
p1308
sg75
(lp1309
sg24
Nsg85
(lp1310
I6198
aI6950
asg87
(lp1311
(dp1312
g134
S'_on_SetStringBtn_Button_1'
p1313
sg136
S''
sg137
S'<ButtonRelease-1>'
p1314
sasg89
(lp1315
(dp1316
g49
g795
sg79
S'SET STRING'
p1317
sg143
Nsasa(dp1318
g70
g1306
sg49
S'_String1Len'
p1319
sg73
S'Label'
p1320
sg75
(lp1321
sg24
Nsg85
(lp1322
I4609
aI6687
asg87
(lp1323
sg89
(lp1324
(dp1325
g49
g853
sg79
S'_EditString1Len'
p1326
sg143
S's.as'
p1327
sasa(dp1328
g70
g1306
sg49
S'_String2Len'
p1329
sg73
g1320
sg75
(lp1330
sg24
Nsg85
(lp1331
I4597
aI6998
asg87
(lp1332
sg89
(lp1333
(dp1334
g49
g853
sg79
S'_EditString2Len'
p1335
sg143
S's.as'
p1336
sasa(dp1337
g70
g1306
sg49
S'_String3Len'
p1338
sg73
g1320
sg75
(lp1339
sg24
Nsg85
(lp1340
I4609
aI7344
asg87
(lp1341
sg89
(lp1342
(dp1343
g49
g853
sg79
S'_EditString3Len'
p1344
sg143
S's.as'
p1345
sasa(dp1346
g70
g823
sg49
S'_StringFrame'
p1347
sg73
g825
sg75
(lp1348
sg24
(L0L
L1L
L1L
L0L
L0L
tp1349
sg85
g108
sg87
(lp1350
sg89
(lp1351
sa(dp1352
g70
g801
sg49
S'_StringIdxLbl'
p1353
sg73
S'Label'
p1354
sg75
(lp1355
sg24
Nsg85
(lp1356
I3390
aI6089
asg87
(lp1357
sg89
(lp1358
(dp1359
g49
g853
sg79
S'_StringIdx'
p1360
sg143
S's.as'
p1361
sasa(dp1362
g70
g801
sg49
S'_StringIdxTextLbl'
p1363
sg73
g1354
sg75
(lp1364
sg24
Nsg85
(lp1365
I3038
aI6089
asg87
(lp1366
sg89
(lp1367
(dp1368
g49
g981
sg79
S'Current string:'
p1369
sg143
Nsasa(dp1370
g70
g914
sg49
S'_StringList'
p1371
sg73
S'Listbox'
p1372
sg75
(lp1373
(dp1374
g49
g78
sg79
S'nw'
p1375
sa(dp1376
g49
g81
sg79
S'yes'
p1377
sa(dp1378
g49
g84
sg79
S'both'
p1379
sasg24
Nsg85
(lp1380
I3038
aI2584
asg87
(lp1381
(dp1382
g134
S'_on_StringList_select'
p1383
sg136
S''
sg137
S'<<ListboxSelect>>'
p1384
sasg89
(lp1385
sa(dp1386
g70
g870
sg49
S'_StringListLabel'
p1387
sg73
S'Label'
p1388
sg75
(lp1389
(dp1390
g49
g78
sg79
S'n'
sa(dp1391
g49
g84
sg79
S'x'
sasg24
Nsg85
(lp1392
I3038
aI1627
asg87
(lp1393
sg89
(lp1394
(dp1395
g49
g981
sg79
S'String list'
p1396
sg143
Nsasa(dp1397
g70
S'Tkinter'
p1398
sg49
g722
sg73
S'Scrollbar'
p1399
sg75
(lp1400
(dp1401
g49
g78
sg79
S'e'
sa(dp1402
g49
g84
sg79
S'y'
sasg24
Nsg85
(lp1403
I3542
aI2620
asg87
(lp1404
sg89
(lp1405
sa(dp1406
g70
S'Tkinter'
p1407
sg49
S'_TabHost'
p1408
sg73
S'Frame'
p1409
sg75
(lp1410
(dp1411
g49
g78
sg79
S'nw'
p1412
sa(dp1413
g49
g81
sg79
g838
sa(dp1414
g49
g84
sg79
g1379
sasg24
(L0L
L1L
L1L
L0L
tp1415
sg85
g108
sg87
(lp1416
sg89
(lp1417
(dp1418
g49
S'pyclass'
p1419
sg79
S'ttk.Notebook'
p1420
sg143
Nsasa(dp1421
g70
g1132
sg49
S'_TextAreaLbl'
p1422
sg73
S'Label'
p1423
sg75
(lp1424
(dp1425
g49
g78
sg79
S'n'
sasg24
Nsg85
(lp1426
I6198
aI1555
asg87
(lp1427
sg89
(lp1428
(dp1429
g49
g981
sg79
S'Text area'
p1430
sg143
Nsasa(dp1431
g70
g1169
sg49
S'_WorkFrameLabel'
p1432
sg73
S'Label'
p1433
sg75
(lp1434
(dp1435
g49
S'padx'
p1436
sg79
S'n:35'
p1437
sasg24
Nsg85
(lp1438
I5191
aI7847
asg87
(lp1439
sg89
(lp1440
(dp1441
g49
g981
sg79
S'Parameters List'
p1442
sg143
Nsasa(dp1443
g70
g1407
sg49
S'_WorkLabelFrame'
p1444
sg73
g1409
sg75
(lp1445
(dp1446
g49
g78
sg79
g1412
sa(dp1447
g49
g84
sg79
S'x'
sasg24
(L0L
L1L
L1L
L2L
tp1448
sg85
g108
sg87
(lp1449
sg89
(lp1450
sasg151
g723
sg34
L1L
sasg152
g721
sg153
g721
sg49
g4
sa(dp1451
g32
Nsg34
L1L
sg35
(dp1452
g37
S'11.0'
p1453
sg39
(lp1454
S''
aS'#coding=utf8\n\n'
p1455
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p1456
aS'\nfrom enum import Enum\n\nSCREEN_W = 480\nSCREEN_H = 272\n\nTEXT_H = 90\n\nSCENE_MODES   = Enum("normal", "normal_flat", "trial", "rules", "ammo", "ammoname", "ammosummary", "present", "presentname", "debate", "mtb", "climax", "anagram", "dive", "hanron", "menu", "map", "report", "report2", "skill", "skill2", "music", "eventname", "artworkname", "moviename", "theatre", "novel", "help", "other")\nSCENE_SPECIAL = Enum("option", "showopt", "react", "debate", "chatter", "hanron", "checkobj", "checkchar")\nBOX_COLORS    = Enum("yellow", "green", "blue")\nBOX_TYPES     = Enum("normal", "flat", "novel")\n\nCHAPTER_MONOKUMA = 100\nCHAPTER_FREETIME = 101\nCHAPTER_ISLAND   = 102\nCHAPTER_NOVEL    = 103'
p1457
asg7
I0
sg44
I14492031
ssg45
(lp1458
sg152
S'-Main-'
p1459
sg153
g1459
sg49
S'Common'
p1460
sa(dp1461
g32
S'-Main-'
p1462
sg34
L1L
sg35
(dp1463
g37
S'7.0'
p1464
sg39
(lp1465
S''
aS'#coding=utf8\n\n'
p1466
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p1467
aS'import ttk, PIL, tkMessageBox\n\ngui = ResViewer()'
p1468
asg7
I0
sg44
I2407807
ssg45
(lp1469
(dp1470
g48
S'Gui'
p1471
sg49
S'ResViewer'
p1472
sg28
Nsg51
S'Tkinter.Toplevel'
p1473
sg53
(lp1474
(lp1475
I4997
aI945
aI0
aa(lp1476
I1528
aI5467
aI1
aa(lp1477
I5761
aI9055
aI0
aa(lp1478
I4081
aI5000
aI1
aa(lp1479
I7216
aI5000
aI1
aasg39
(dp1480
g37
S'68.0'
p1481
sg39
(lp1482
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                  ResViewer                                   #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass ResViewer(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p1483
aS'        #\n        #Your code here\n        #\n'
p1484
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self._Frame5 = Frame(self)\n        self._Frame5.pack(side='top')\n        self._TopMenu = Menu(self._Frame5)\n        self._TopMenu.pack(side='left')\n        self._TopMenu.bind('<Map>',self._on_TopMenu_Map)\n        self._Frame3 = Frame(self)\n        self._Frame3.pack(side='top')\n        self._FileListFrame = Frame(self._Frame3)\n        self._FileListFrame.pack(side='left')\n        self._FileList = Listbox(self._FileListFrame)\n        self._FileList.pack(side='top')\n        self._Frame4 = Frame(self._Frame3)\n        self._Frame4.pack(side='left')\n        self._TabHost = ttk.Notebook(self._Frame4)\n        self._TabHost.pack(side='top')\n        self._Frame1 = Frame(self._Frame4)\n        self._Frame1.pack(side='top')\n        self._TextFrame = Frame(self._TabHost)\n        self._TextFrame.pack(side='left')\n        self._TextEdit = Entry(self._TextFrame)\n        self._TextEdit.pack(side='top')\n        self._CanvasFrame = Frame(self._TabHost)\n        self._CanvasFrame.pack(side='left')\n        self._Canvas = Canvas(self._CanvasFrame)\n        self._Canvas.pack(side='top')\n        self._MiscFrame = Frame(self._TabHost)\n        self._MiscFrame.pack(side='left')\n"
p1485
aS'        #\n        #Your code here\n        #\n        self._TabHost.add(self._TextFrame, text="Text")\n        self._TabHost.add(self._CanvasFrame, text="Graphics")\n        self._TabHost.add(self._MiscFrame, text="Misc")\n'
p1486
aS'    #\n    #Start of event handler methods\n    #\n'
p1487
aS'\n'
aS'\n    def _on_TopMenu_Map(self'
p1488
aS',Event=None):\n        # File menu\n        FileMenu = Menu(self._RootMenu, tearoff=0)\n        FileMenu.add_command(label="Open", command=self.openFile)\n        FileMenu.add_command(label="Save", command=self.saveFile)\n        FileMenu.add_command(label="Exit", command=exit)\n        self._RootMenu.add_cascade(label="File", menu=FileMenu)\n        pass\n    \n    def openFile(self):\n        pass\n    \n    def saveFile(self):\n        pass\n    \n    def exit(self):\n        self.destroy()\n        pass\n'
p1489
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p1490
aS''
asg7
I0
sg44
I12886399
ssg29
(lp1491
(dp1492
g70
S'Tkinter'
p1493
sg49
g1472
sg73
S'Toplevel'
p1494
sg75
(lp1495
sg24
g148
sg85
g108
sg87
(lp1496
sg89
(lp1497
sa(dp1498
g70
g229
sg49
S'_Canvas'
p1499
sg73
S'Canvas'
p1500
sg75
(lp1501
sg24
Nsg85
(lp1502
I5585
aI3122
asg87
(lp1503
sg89
(lp1504
sa(dp1505
g70
g221
sg49
S'_CanvasFrame'
p1506
sg73
g223
sg75
(lp1507
sg24
(L0L
L1L
L1L
L0L
L1L
tp1508
sg85
g108
sg87
(lp1509
sg89
(lp1510
sa(dp1511
g70
g229
sg49
S'_FileList'
p1512
sg73
g255
sg75
(lp1513
sg24
Nsg85
(lp1514
I685
aI3684
asg87
(lp1515
sg89
(lp1516
sa(dp1517
g70
g221
sg49
S'_FileListFrame'
p1518
sg73
g223
sg75
(lp1519
sg24
(L0L
L1L
L0L
tp1520
sg85
g108
sg87
(lp1521
sg89
(lp1522
sa(dp1523
g70
g221
sg49
S'_Frame1'
p1524
sg73
g223
sg75
(lp1525
sg24
(L0L
L1L
L1L
L1L
tp1526
sg85
g108
sg87
(lp1527
sg89
(lp1528
sa(dp1529
g70
g221
sg49
S'_Frame3'
p1530
sg73
g223
sg75
(lp1531
sg24
(L0L
L1L
tp1532
sg85
g108
sg87
(lp1533
sg89
(lp1534
sa(dp1535
g70
g221
sg49
S'_Frame4'
p1536
sg73
g223
sg75
(lp1537
sg24
(L0L
L1L
L1L
tp1538
sg85
g108
sg87
(lp1539
sg89
(lp1540
sa(dp1541
g70
g221
sg49
S'_Frame5'
p1542
sg73
g223
sg75
(lp1543
sg24
(L0L
L0L
tp1544
sg85
g108
sg87
(lp1545
sg89
(lp1546
sa(dp1547
g70
g221
sg49
S'_MiscFrame'
p1548
sg73
g223
sg75
(lp1549
sg24
(L0L
L1L
L1L
L0L
L2L
tp1550
sg85
g108
sg87
(lp1551
sg89
(lp1552
sa(dp1553
g70
g221
sg49
S'_TabHost'
p1554
sg73
g223
sg75
(lp1555
sg24
(L0L
L1L
L1L
L0L
tp1556
sg85
g108
sg87
(lp1557
sg89
(lp1558
(dp1559
g49
g1419
sg79
S'ttk.Notebook'
p1560
sg143
Nsasa(dp1561
g70
g229
sg49
S'_TextEdit'
p1562
sg73
S'Entry'
p1563
sg75
(lp1564
sg24
Nsg85
(lp1565
I2632
aI3313
asg87
(lp1566
sg89
(lp1567
sa(dp1568
g70
g221
sg49
S'_TextFrame'
p1569
sg73
g223
sg75
(lp1570
sg24
(L0L
L1L
L1L
L0L
L0L
tp1571
sg85
g108
sg87
(lp1572
sg89
(lp1573
sa(dp1574
g70
g229
sg49
S'_TopMenu'
p1575
sg73
S'Menu'
p1576
sg75
(lp1577
sg24
Nsg85
(lp1578
I243
aI371
asg87
(lp1579
(dp1580
g134
S'_on_TopMenu_Map'
p1581
sg136
S''
sg137
S'<Map>'
p1582
sasg89
(lp1583
sasg151
g1473
sg34
L1L
sasg152
g1472
sg153
g1472
sg49
S'ResViewer'
p1584
sa.