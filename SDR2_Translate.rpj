(lp1
(dp2
S'ModulePrevious'
p3
S'Common'
p4
sS'ModuleCurrent'
p5
S'SDR2_Translate'
p6
sS'Version'
p7
I1
sS'Geometry'
p8
S'1920x1017+-4+-4'
p9
sS'ProjectName'
p10
g6
sS'ImportTypes'
p11
(lp12
(S'Pmw'
p13
S'import'
p14
tp15
a(S'Tkinter'
p16
S'from'
p17
tp18
asS'EditorWidths'
p19
((lp20
I132
aI132
a(lp21
I132
aI132
a(lp22
I130
aI130
atp23
sS'ID'
p24
S'Rapyd Project'
p25
sS'ParkingLot'
p26
(dp27
S'SelectedWidreq'
p28
NsS'Widreqs'
p29
(lp30
ssa(dp31
S'PreviousForm'
p32
NsS'OnTab'
p33
I1
sS'-Main-'
p34
(dp35
S'Cursor'
p36
S'50.0'
p37
sS'Text'
p38
(lp39
S''
aV#coding=utf8\u000a\u000a################################################################################\u000a### Copyright © 2012-2013 BlackDragonHunt\u000a### \u000a### This file is part of the Super Duper Script Editor.\u000a### \u000a### The Super Duper Script Editor is free software: you can redistribute it\u000a### and/or modify it under the terms of the GNU General Public License as\u000a### published by the Free Software Foundation, either version 3 of the License,\u000a### or (at your option) any later version.\u000a### \u000a### The Super Duper Script Editor is distributed in the hope that it will be\u000a### useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\u000a### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\u000a### GNU General Public License for more details.\u000a### \u000a### You should have received a copy of the GNU General Public License\u000a### along with the Super Duper Script Editor.\u000a### If not, see <http://www.gnu.org/licenses/>.\u000a################################################################################\u000a\u000a
p40
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p41
aS'\nimport os\nfrom enum import Enum\n\nSPRITE_TYPE = Enum("bustup", "stand")\n\nclass SpriteId():\n  def __init__(\n    self,\n    sprite_type = SPRITE_TYPE.bustup,\n    char_id = -1,\n    sprite_id = -1\n  ):\n    self.sprite_type = sprite_type\n    self.char_id = char_id\n    self.sprite_id = sprite_id\n\ndef get_sprite_file(sprite_id):\n  \n  if sprite_id.char_id == -1 or sprite_id.sprite_id == -1:\n    return None\n  \n  filename = "%s_%02d_%02d.png" % (str(sprite_id.sprite_type), sprite_id.char_id, sprite_id.sprite_id)\n  return filename\n\n### EOF ###'
p42
asg7
I0
sS'Sha'
p43
I14672383
ssS'Forms'
p44
(lp45
sS'VisibleForm'
p46
S'-Main-'
p47
sS'SelectedForm'
p48
g34
sS'Name'
p49
S'Sprite'
p50
sa(dp51
g32
g34
sg33
I1
sg34
(dp52
g36
S'41.20'
p53
sg38
(lp54
S''
aS'#!/usr/bin/python\n#coding=utf8\n\n'
p55
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p56
aS'\n\ntry:\n    #--------------------------------------------------------------------------#\n    # User code should go after this comment so it is inside the "try".        #\n    #     This allows rpErrorHandler to gain control on an error so it         #\n    #     can properly display a Rapyd-aware error message.                    #\n    #--------------------------------------------------------------------------#\n\n    #Adjust sys.path so we can find other modules of this project\n    import sys\n    if \'.\' not in sys.path:\n        sys.path.append(\'.\')\n    #Put lines to import other modules of this project here\n    import ttk, PIL, tkMessageBox, os, re, struct, tkFileDialog, tkSimpleDialog\n    import GuiFuncs, ConfigParser\n    from PIL import Image, ImageTk, ImageDraw, ImageFont\n    from GimFile import GimFile, GmoFile\n    from PakFile import PakFile\n    from OpCodes import *\n    from Common import *\n    from Scene import Scene\n    from clt import *\n    from Character import *\n    from LinFile import *\n    from enum import *\n \n    if __name__ == \'__main__\':\n        # Read config\n        config_ok = False\n        while not config_ok:\n            config = ConfigParser.ConfigParser()\n            config.read(\'config.cfg\')\n            try:\n                GameDataLoc = config.get(\'Game Data\', \'Game_Data_Location\')\n                DoneDataLoc = config.get(\'Game Data\', \'Done_Data_Location\')\n                config_ok = True\n            except:\n                w = GameData()\n                # Wait for the window to close\n                w.wait_window(w)\n                \n        # Load GUI\n'
p57
aS"        Root = Tk()\n        import Tkinter\n        Tkinter.CallWrapper = rpErrorHandler.CallWrapper\n        del Tkinter\n        App = SDR2_Translate(Root)\n        App.pack(expand='yes',fill='both')\n"
p58
aS"        Root.geometry('640x480+10+10')\n        Root.title('SDR2 Translate')\n        Root.mainloop()\n        \n    #--------------------------------------------------------------------------#\n    # User code should go above this comment.                                  #\n    #--------------------------------------------------------------------------#\nexcept:\n    rpErrorHandler.RunError()"
p59
asg7
I0
sg43
I7096191
ssg44
(lp60
(dp61
S'Requested'
p62
S'Gui'
p63
sg49
S'Filter'
p64
sg28
NsS'Type'
p65
S'Tkinter.Toplevel'
p66
sS'Lines'
p67
(lp68
(lp69
I5000
aI8756
aI0
aa(lp70
I3385
aI4378
aI1
aa(lp71
I4970
aI4378
aI1
aasg38
(dp72
g36
S'32.0'
p73
sg38
(lp74
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                    Filter                                    #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass Filter(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p75
aS'        #\n        #Your code here\n        #\n'
p76
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self.bind('<Map>',self.on_Filter_Map)\n        self._OpCodesFrame = Frame(self)\n        self._OpCodesFrame.pack(side='top')\n        self._OkFrame = Frame(self)\n        self._OkFrame.pack(side='top')\n        self._CancelBtn = Button(self._OkFrame,text='Cancel')\n        self._CancelBtn.pack(anchor='e',side='right')\n        self._OkBtn = Button(self._OkFrame,text='OK')\n        self._OkBtn.pack(anchor='e',side='right')\n        self._VisibleFrame = Frame(self._OpCodesFrame)\n        self._VisibleFrame.pack(side='left')\n        self._VisibleCodesLbl = Label(self._VisibleFrame,text='Visible OpCodes')\n        self._VisibleCodesLbl.pack(side='top')\n        self._VisibleCodeList = Listbox(self._VisibleFrame)\n        self._VisibleCodeList.pack(side='top')\n        self._VisibleCodeList.bind('<<ListboxSelect>>' \\\n            ,self._on_VisibleCodeList_select)\n        self._BtnFrame = Frame(self._OpCodesFrame)\n        self._BtnFrame.pack(side='left')\n        self._HideBtn = Button(self._BtnFrame,state='disabled',text='=>')\n        self._HideBtn.pack(side='top')\n        self._HideBtn.bind('<ButtonPress-1>',self._on_HideBtn_Button_1)\n        self._ShowBtn = Button(self._BtnFrame,state='disabled',text='<=')\n        self._ShowBtn.pack(side='top')\n        self._ShowBtn.bind('<ButtonPress-1>',self._on_ShowBtn_Button_1)\n        self._HiddenFrame = Frame(self._OpCodesFrame)\n        self._HiddenFrame.pack(side='left')\n        self._HiddenCodeLbl = Label(self._HiddenFrame,text='Hidden OpCodes')\n        self._HiddenCodeLbl.pack(side='top')\n        self._HiddenCodeList = Listbox(self._HiddenFrame)\n        self._HiddenCodeList.pack(side='top')\n        self._HiddenCodeList.bind('<<ListboxSelect>>' \\\n            ,self._on_HiddenCodeList_select)\n"
p77
aS'        #\n        #Your code here\n        #\n        self.Master = Master\n        self.visible_list = {}\n        self.hidden_list = {}\n'
p78
aS'    #\n    #Start of event handler methods\n    #\n'
p79
aS"    def initLists(self, hidden, visible):\n        self.hidden_list = hidden\n        self.visible_list = visible\n        self.populate()\n        pass\n\n    def populate(self):\n        self._VisibleCodeList.delete(0,END)\n        self._HiddenCodeList.delete(0,END)\n        for code,value in self.hidden_list.items():\n            if value != '':\n                self._HiddenCodeList.insert(END, value)\n            else:\n                self._HiddenCodeList.insert(END, 'op_'+code)\n        for code,value in self.visible_list.items():\n            if value != '':\n                self._VisibleCodeList.insert(END, value)\n            else:\n                self._VisibleCodeList.insert(END, 'op_'+code)\n        pass\n"
p80
aS'\n    def _on_HiddenCodeList_select(self'
p81
aS",Event=None):\n        self._ShowBtn['state'] = 'normal'\n        self._HideBtn['state'] = 'disabled'\n        pass\n"
p82
aS'\n    def _on_HideBtn_Button_1(self'
p83
aS',Event=None):\n        # Delete from the Visible list\n        i = int(self._FlowList.curselection()[0])        \n        \n        self._VisibleCodeList.delete(i)\n        # Insert into the Hidden list\n        self._HiddenCodeList.insert\n        pass\n'
p84
aS'\n    def _on_ShowBtn_Button_1(self'
p85
aS',Event=None):\n        pass\n'
p86
aS'\n    def _on_VisibleCodeList_select(self'
p87
aS",Event=None):\n        self._ShowBtn['state'] = 'disabled'\n        self._HideBtn['state'] = 'normal'\n        pass\n"
p88
aS'\n    def on_Filter_Map(self'
p89
aS',Event=None):\n        # Grab the focus\n        self.focus_set()\n        self.grab_set()\n        self.transient(self.Master)\n        pass\n'
p90
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p91
aS''
asg7
I0
sg43
I8776831
ssg29
(lp92
(dp93
S'ModuleName'
p94
S'Tkinter'
p95
sg49
g64
sS'WidgetName'
p96
S'Toplevel'
p97
sS'PackOptions'
p98
(lp99
sg24
(I0
tp100
sS'XY'
p101
(I0
I0
tp102
sS'Bindings'
p103
(lp104
(dp105
S'Handler'
p106
S'on_Filter_Map'
p107
sS'Component'
p108
S''
sS'Event'
p109
S'<Map>'
p110
sasS'Options'
p111
(lp112
sa(dp113
g94
S'Tkinter'
p114
sg49
S'_BtnFrame'
p115
sg96
S'Frame'
p116
sg98
(lp117
sg24
(I0
I0
I1
tp118
sg101
g102
sg103
(lp119
sg111
(lp120
sa(dp121
g94
S'Tkinter'
p122
sg49
S'_CancelBtn'
p123
sg96
S'Button'
p124
sg98
(lp125
(dp126
g49
S'anchor'
p127
sS'Value'
p128
S'e'
sasg24
Nsg101
(lp129
I8136
aI9306
asg103
(lp130
sg111
(lp131
(dp132
g49
S'text'
p133
sg128
S'Cancel'
p134
sS'Extra'
p135
Nsasa(dp136
g94
g122
sg49
S'_HiddenCodeLbl'
p137
sg96
S'Label'
p138
sg98
(lp139
sg24
Nsg101
(lp140
I6964
aI215
asg103
(lp141
sg111
(lp142
(dp143
g49
S'text'
p144
sg128
S'Hidden OpCodes'
p145
sg135
Nsasa(dp146
g94
g122
sg49
S'_HiddenCodeList'
p147
sg96
S'Listbox'
p148
sg98
(lp149
sg24
Nsg101
(lp150
I6846
aI4545
asg103
(lp151
(dp152
g106
S'_on_HiddenCodeList_select'
p153
sg108
S''
sg109
S'<<ListboxSelect>>'
p154
sasg111
(lp155
sa(dp156
g94
g114
sg49
S'_HiddenFrame'
p157
sg96
g116
sg98
(lp158
sg24
(I0
I0
I2
tp159
sg101
g102
sg103
(lp160
sg111
(lp161
sa(dp162
g94
g122
sg49
S'_HideBtn'
p163
sg96
g124
sg98
(lp164
sg24
Nsg101
(lp165
I4000
aI3804
asg103
(lp166
(dp167
g106
S'_on_HideBtn_Button_1'
p168
sg108
S''
sg109
S'<ButtonPress-1>'
p169
sasg111
(lp170
(dp171
g49
g133
sg128
S'=>'
p172
sg135
Nsa(dp173
g49
S'state'
p174
sg128
S'disabled'
p175
sg135
Nsasa(dp176
g94
g122
sg49
S'_OkBtn'
p177
sg96
g124
sg98
(lp178
(dp179
g49
g127
sg128
S'e'
sasg24
Nsg101
(lp180
I7018
aI9306
asg103
(lp181
sg111
(lp182
(dp183
g49
g133
sg128
S'OK'
p184
sg135
Nsasa(dp185
g94
g114
sg49
S'_OkFrame'
p186
sg96
g116
sg98
(lp187
sg24
(I0
I1
tp188
sg101
g102
sg103
(lp189
sg111
(lp190
sa(dp191
g94
g114
sg49
S'_OpCodesFrame'
p192
sg96
g116
sg98
(lp193
sg24
(I0
I0
tp194
sg101
g102
sg103
(lp195
sg111
(lp196
sa(dp197
g94
g122
sg49
S'_ShowBtn'
p198
sg96
g124
sg98
(lp199
sg24
Nsg101
(lp200
I3994
aI5108
asg103
(lp201
(dp202
g106
S'_on_ShowBtn_Button_1'
p203
sg108
S''
sg109
S'<ButtonPress-1>'
p204
sasg111
(lp205
(dp206
g49
g133
sg128
S'<='
p207
sg135
Nsa(dp208
g49
g174
sg128
g175
sg135
Nsasa(dp209
g94
g122
sg49
S'_VisibleCodeList'
p210
sg96
g148
sg98
(lp211
sg24
Nsg101
(lp212
I2112
aI4354
asg103
(lp213
(dp214
g106
S'_on_VisibleCodeList_select'
p215
sg108
S''
sg109
S'<<ListboxSelect>>'
p216
sasg111
(lp217
sa(dp218
g94
g122
sg49
S'_VisibleCodesLbl'
p219
sg96
g138
sg98
(lp220
sg24
Nsg101
(lp221
I1834
aI407
asg103
(lp222
sg111
(lp223
(dp224
g49
g144
sg128
S'Visible OpCodes'
p225
sg135
Nsasa(dp226
g94
g114
sg49
S'_VisibleFrame'
p227
sg96
g116
sg98
(lp228
sg24
(I0
I0
I0
tp229
sg101
g102
sg103
(lp230
sg111
(lp231
sasS'BaseClass'
p232
g66
sg33
I1
sa(dp233
g62
g38
sg49
S'GameData'
p234
sg28
S'_CancelBtn'
p235
sg65
S'Tkinter.Toplevel'
p236
sg67
(lp237
(lp238
I4997
aI419
aI0
aa(lp239
I4997
aI1124
aI0
aa(lp240
I4997
aI4258
aI0
aasg38
(dp241
g36
S'55.37'
p242
sg38
(lp243
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                   GameData                                   #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass GameData(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p244
aS'        #\n        #Your code here\n        #\n'
p245
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self.GameDataLoc = StringVar()\n        self.DoneDataLoc = StringVar()\n        self._Frame3 = Frame(self)\n        self._Frame3.pack(side='top')\n        self._GameDataLbl = Label(self._Frame3,text='Game Data Options')\n        self._GameDataLbl.pack(side='top')\n        self._Frame2 = Frame(self)\n        self._Frame2.pack(side='top')\n        self._PathLbl = Label(self._Frame2,text='Path to Game Data')\n        self._PathLbl.pack(side='left')\n        self._DataLoc = Entry(self._Frame2,textvariable=self.GameDataLoc)\n        self._DataLoc.pack(side='left')\n        self._BrowseLocBtn = Button(self._Frame2,text='Browse')\n        self._BrowseLocBtn.pack(side='left')\n        self._BrowseLocBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_BrowseLocBtn_Button_1)\n        self._Frame4 = Frame(self)\n        self._Frame4.pack(side='top')\n        self._DoneLbl = Label(self._Frame4,text='Path to Done Files')\n        self._DoneLbl.pack(side='left')\n        self._DoneLoc = Entry(self._Frame4,textvariable=self.DoneDataLoc)\n        self._DoneLoc.pack(side='left')\n        self._BrowseDoneBtn = Button(self._Frame4,text='Browse')\n        self._BrowseDoneBtn.pack(side='left')\n        self._BrowseDoneBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_BrowseDoneBtn_ButRel_1)\n        self._Frame1 = Frame(self)\n        self._Frame1.pack(side='top')\n        self._OkBtn = Button(self._Frame1,text='Ok')\n        self._OkBtn.pack(side='left')\n        self._OkBtn.bind('<ButtonPress-1>',self._on_OkBtn_Button_1)\n        self._CancelBtn = Button(self._Frame1,text='Cancel')\n        self._CancelBtn.pack(side='left')\n        self._CancelBtn.bind('<ButtonRelease-1>',self._on_CancelBtn_ButRel_1)\n"
p246
aS"        #\n        #Your code here\n        #\n        try:\n            self.GameDataLoc.set(GameDataLoc)\n        except:\n            self.GameDataLoc.set('')\n        try:\n            self.DoneDataLoc.set(DoneDataLoc)\n        except:\n            self.DoneDataLoc.set('')\n"
p247
aS'    #\n    #Start of event handler methods\n    #\n'
p248
aS'\n'
aS'\n    def _on_BrowseDoneBtn_ButRel_1(self'
p249
aS',Event=None):\n        loc = tkFileDialog.askdirectory()\n        if loc:\n            self.DoneDataLoc.set(loc)\n        pass\n'
p250
aS'\n    def _on_BrowseLocBtn_Button_1(self'
p251
aS',Event=None):\n        loc = tkFileDialog.askdirectory()\n        if loc:\n            self.GameDataLoc.set(loc)\n        pass\n'
p252
aS'\n    def _on_CancelBtn_ButRel_1(self'
p253
aS',Event=None):\n        # Exit\n        self.destroy()\n        pass\n'
p254
aS'\n    def _on_OkBtn_Button_1(self'
p255
aS",Event=None):\n        # Write config\n        config = ConfigParser.ConfigParser()\n        config.add_section('Game Data')\n        config.set('Game Data', 'Game_Data_Location', self.GameDataLoc.get())\n        config.set('Game Data', 'Done_Data_Location', self.DoneDataLoc.get())\n        with open('config.cfg', 'wb') as configfile:\n            config.write(configfile)\n        # Exit\n        self.destroy()\n        pass\n"
p256
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p257
aS''
asg7
I0
sg43
I13667199
ssg29
(lp258
(dp259
g94
S'Tkinter'
p260
sg49
g234
sg96
S'Toplevel'
p261
sg98
(lp262
sg24
(I0
tp263
sg101
g102
sg103
(lp264
sg111
(lp265
sa(dp266
g94
S'Tkinter'
p267
sg49
S'_BrowseDoneBtn'
p268
sg96
S'Button'
p269
sg98
(lp270
sg24
Nsg101
(lp271
I2529
aI2297
asg103
(lp272
(dp273
g106
S'_on_BrowseDoneBtn_ButRel_1'
p274
sg108
S''
sg109
S'<ButtonRelease-1>'
p275
sasg111
(lp276
(dp277
g49
g133
sg128
S'Browse'
p278
sg135
Nsasa(dp279
g94
S'Tkinter'
p280
sg49
S'_BrowseLocBtn'
p281
sg96
S'Button'
p282
sg98
(lp283
sg24
Nsg101
(lp284
I2547
aI813
asg103
(lp285
(dp286
g106
S'_on_BrowseLocBtn_Button_1'
p287
sg108
S''
sg109
S'<ButtonRelease-1>'
p288
sasg111
(lp289
(dp290
g49
g133
sg128
S'Browse'
p291
sg135
Nsasa(dp292
g94
S'Tkinter'
p293
sg49
g235
sg96
S'Button'
p294
sg98
(lp295
sg24
Nsg101
(lp296
I5045
aI5132
asg103
(lp297
(dp298
g106
S'_on_CancelBtn_ButRel_1'
p299
sg108
S''
sg109
S'<ButtonRelease-1>'
p300
sasg111
(lp301
(dp302
g49
g133
sg128
S'Cancel'
p303
sg135
Nsasa(dp304
g94
g280
sg49
S'_DataLoc'
p305
sg96
S'Entry'
p306
sg98
(lp307
sg24
Nsg101
(lp308
I1965
aI778
asg103
(lp309
sg111
(lp310
(dp311
g49
S'textvariable'
p312
sg128
S'GameDataLoc'
p313
sg135
S's.as'
p314
sasa(dp315
g94
g267
sg49
S'_DoneLbl'
p316
sg96
S'Label'
p317
sg98
(lp318
sg24
Nsg101
(lp319
I1261
aI2297
asg103
(lp320
sg111
(lp321
(dp322
g49
g144
sg128
S'Path to Done Files'
p323
sg135
Nsasa(dp324
g94
g267
sg49
S'_DoneLoc'
p325
sg96
S'Entry'
p326
sg98
(lp327
sg24
Nsg101
(lp328
I1977
aI2333
asg103
(lp329
sg111
(lp330
(dp331
g49
g312
sg128
S'DoneDataLoc'
p332
sg135
S's.as'
p333
sasa(dp334
g94
S'Tkinter'
p335
sg49
S'_Frame1'
p336
sg96
S'Frame'
p337
sg98
(lp338
sg24
(I0
I3
tp339
sg101
g102
sg103
(lp340
sg111
(lp341
sa(dp342
g94
g335
sg49
S'_Frame2'
p343
sg96
g337
sg98
(lp344
sg24
(I0
I1
tp345
sg101
g102
sg103
(lp346
sg111
(lp347
sa(dp348
g94
g335
sg49
S'_Frame3'
p349
sg96
g337
sg98
(lp350
sg24
(I0
I0
tp351
sg101
g102
sg103
(lp352
sg111
(lp353
sa(dp354
g94
S'Tkinter'
p355
sg49
S'_Frame4'
p356
sg96
S'Frame'
p357
sg98
(lp358
sg24
(I0
I2
tp359
sg101
g102
sg103
(lp360
sg111
(lp361
sa(dp362
g94
g280
sg49
S'_GameDataLbl'
p363
sg96
S'Label'
p364
sg98
(lp365
sg24
Nsg101
(lp366
I4378
aI179
asg103
(lp367
sg111
(lp368
(dp369
g49
g144
sg128
S'Game Data Options'
p370
sg135
Nsasa(dp371
g94
g293
sg49
S'_OkBtn'
p372
sg96
g294
sg98
(lp373
sg24
Nsg101
(lp374
I4494
aI5144
asg103
(lp375
(dp376
g106
S'_on_OkBtn_Button_1'
p377
sg108
S''
sg109
S'<ButtonPress-1>'
p378
sasg111
(lp379
(dp380
g49
g133
sg128
S'Ok'
p381
sg135
Nsasa(dp382
g94
g280
sg49
S'_PathLbl'
p383
sg96
g364
sg98
(lp384
sg24
Nsg101
(lp385
I1225
aI778
asg103
(lp386
sg111
(lp387
(dp388
g49
g144
sg128
S'Path to Game Data'
p389
sg135
Nsasasg232
g236
sg33
I1
sa(dp390
g62
g38
sg49
S'OpCodeCreator'
p391
sg28
Nsg65
S'Tkinter.Toplevel'
p392
sg67
(lp393
(lp394
I5000
aI622
aI0
aa(lp395
I5000
aI6914
aI0
aa(lp396
I5000
aI8935
aI0
aasg38
(dp397
g36
S'91.0'
p398
sg38
(lp399
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                OpCodeCreator                                 #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass OpCodeCreator(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p400
aS'        #\n        #Your code here\n        #\n        self.selected_opcode = 0\n        self.selected_par = 0\n        self.opcode_list = []\n        self.par_list = []\n        self.Master = Master\n'
p401
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self.bind('<Map>',self.on_OpCodeCreator_Map)\n        self._ParValue = StringVar()\n        self._ParName = StringVar()\n        self._HeaderFrame = Frame(self)\n        self._HeaderFrame.pack(side='top')\n        self._TopLabel = Label(self._HeaderFrame\n            ,text='Define the opcode and press OK')\n        self._TopLabel.pack(side='top')\n        self._ListFrame = Frame(self)\n        self._ListFrame.pack(side='top')\n        self._OpCodeList = Listbox(self._ListFrame)\n        self._OpCodeList.pack(expand='yes',fill='both',side='left')\n        self._OpCodeList.bind('<<ListboxSelect>>',self._on_OpCodeList_select)\n        self._OpCodeList.bind('<Map>',self._on_OpCodeList_Map)\n        self._ParBox = Listbox(self._ListFrame)\n        self._ParBox.pack(side='left')\n        self._ParBox.bind('<<ListboxSelect>>',self._on_ParBox_select)\n        self._EntryFrame = Frame(self)\n        self._EntryFrame.pack(side='top')\n        self._ParNameLbl = Label(self._EntryFrame,textvariable=self._ParName)\n        self._ParNameLbl.pack(side='left')\n        self._ParEntry = Entry(self._EntryFrame,textvariable=self._ParValue)\n        self._ParEntry.pack(side='left')\n        self._AddParBtn = Button(self._EntryFrame,text='Set')\n        self._AddParBtn.pack(side='left')\n        self._AddParBtn.bind('<ButtonPress-1>',self._on_AddParBtn_Button_1)\n        self._SubmitFrame = Frame(self)\n        self._SubmitFrame.pack(expand='yes',fill='x',side='top')\n        self._CancelBtn = Button(self._SubmitFrame,text='Cancel')\n        self._CancelBtn.pack(anchor='e',side='right')\n        self._CancelBtn.bind('<ButtonPress-1>',self._on_CancelBtn_Button_1)\n        self._OkBtn = Button(self._SubmitFrame,text='OK')\n        self._OkBtn.pack(anchor='e',side='right')\n        self._OkBtn.bind('<ButtonPress-1>',self._on_OkBtn_Button_1)\n"
p402
aS'        #\n        #Your code here\n        #\n'
p403
aS'    #\n    #Start of event handler methods\n    #\n'
p404
aS'\n'
aS'\n    def _on_AddParBtn_Button_1(self'
p405
aS',Event=None):\n        # Save current parameter to the list\n        i = self.selected_par  \n        self.par_list[i] = (self.par_list[i][0], int(self._ParValue.get()))\n        # Re-populate parameters listbox\n        self._ParBox_populate()\n        pass\n'
p406
aS'\n    def _on_CancelBtn_Button_1(self'
p407
aS',Event=None):\n        self.destroy()\n        pass\n'
p408
aS'\n    def _on_OkBtn_Button_1(self'
p409
aS',Event=None):\n        question = "You really sure you want to add the new op?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            # Insert new value into the master\'s lists\n            i = self.Master.current_act_idx+1\n            self.Master.Lin.opcode_list.insert(i, self.selected_opcode)\n            self.Master.Lin.action_list.insert(i, OP_FUNCTIONS[self.selected_opcode])\n            self.Master.Lin.pars_list.insert(i, self.par_list)\n            # Fix the string offset, initial value for the 0x70 + opcode\n            add_offset = 0x02\n            for par in OP_PARAMS[self.selected_opcode]:\n                # Add size of each parameter\n                add_offset += struct.calcsize(par[1]) \n            # Add the new offset to the base offset\n            self.Master.Lin.baseoffset += add_offset\n            # Add to the master\'s listbox\n            self.Master._FlowList.insert(i, "%s%s" % (self.Master.Lin.action_list[i], self.Master.Lin.pars_list[i]))\n            # Exit\n            self.destroy()\n        pass\n'
p410
aS'\n    def _on_OpCodeList_Map(self'
p411
aS',Event=None):\n        for code,name in OP_FUNCTIONS.iteritems():\n            if not name:\n                self._OpCodeList.insert(END, "op_%d" % code)\n            else:\n                self._OpCodeList.insert(END, name)\n            # We need to store the opcodes, otherwise we won\'t have 2-sided relation\n            self.opcode_list.append(code)\n        pass\n    \n'
p412
aS'\n    def _on_OpCodeList_select(self'
p413
aS',Event=None):\n        i = int(self._OpCodeList.curselection()[0])\n        self.selected_opcode = self.opcode_list[i]\n        # Add the parameters to the list\n        self.par_list = []\n        for par in OP_PARAMS[self.selected_opcode]:\n            self.par_list.append((par[0], -1))\n        # Display pars in the listbox\n        self._ParBox_populate()\n        pass\n        \n    def _ParBox_populate(self):\n        self._ParBox.delete(0,END)\n        for par in self.par_list:\n            self._ParBox.insert(END, par)\n        pass\n    \n'
p414
aS'\n    def _on_ParBox_select(self'
p415
aS',Event=None):\n        self.selected_par = int(self._ParBox.curselection()[0])  \n        i = self.selected_par      \n        # Put the current name and value to the label and editbox\n        self._ParName.set(self.par_list[i][0])\n        self._ParValue.set(self.par_list[i][1])\n        pass\n'
p416
aS'\n    def on_OpCodeCreator_Map(self'
p417
aS',Event=None):\n        # Grab the focus\n        self.focus_set()\n        self.grab_set()\n        # Some strange shit happend on Windoze with the next line\n        #self.transient(self.Master)\n        pass\n'
p418
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p419
aS''
asg7
I0
sg43
I7966079
ssg29
(lp420
(dp421
g94
S'Tkinter'
p422
sg49
g391
sg96
S'Toplevel'
p423
sg98
(lp424
sg24
g100
sg101
g102
sg103
(lp425
(dp426
g106
S'on_OpCodeCreator_Map'
p427
sg108
S''
sg109
S'<Map>'
p428
sasg111
(lp429
sa(dp430
g94
S'Tkinter'
p431
sg49
S'_AddParBtn'
p432
sg96
S'Button'
p433
sg98
(lp434
sg24
Nsg101
(lp435
I4467
aI7859
asg103
(lp436
(dp437
g106
S'_on_AddParBtn_Button_1'
p438
sg108
S''
sg109
S'<ButtonPress-1>'
p439
sasg111
(lp440
(dp441
g49
g133
sg128
S'Set'
p442
sg135
Nsasa(dp443
g94
g431
sg49
S'_CancelBtn'
p444
sg96
g433
sg98
(lp445
(dp446
g49
g127
sg128
S'e'
sasg24
Nsg101
(lp447
I8095
aI9617
asg103
(lp448
(dp449
g106
S'_on_CancelBtn_Button_1'
p450
sg108
S''
sg109
S'<ButtonPress-1>'
p451
sasg111
(lp452
(dp453
g49
g133
sg128
S'Cancel'
p454
sg135
Nsasa(dp455
g94
S'Tkinter'
p456
sg49
S'_EntryFrame'
p457
sg96
S'Frame'
p458
sg98
(lp459
sg24
(I0
I2
tp460
sg101
g102
sg103
(lp461
sg111
(lp462
sa(dp463
g94
g456
sg49
S'_HeaderFrame'
p464
sg96
g458
sg98
(lp465
sg24
(I0
I0
tp466
sg101
g102
sg103
(lp467
sg111
(lp468
sa(dp469
g94
g456
sg49
S'_ListFrame'
p470
sg96
g458
sg98
(lp471
sg24
(I0
I1
tp472
sg101
g102
sg103
(lp473
sg111
(lp474
sa(dp475
g94
g431
sg49
S'_OkBtn'
p476
sg96
g433
sg98
(lp477
(dp478
g49
g127
sg128
S'e'
sasg24
Nsg101
(lp479
I7325
aI9533
asg103
(lp480
(dp481
g106
S'_on_OkBtn_Button_1'
p482
sg108
S''
sg109
S'<ButtonPress-1>'
p483
sasg111
(lp484
(dp485
g49
g133
sg128
S'OK'
p486
sg135
Nsasa(dp487
g94
g431
sg49
S'_OpCodeList'
p488
sg96
S'Listbox'
p489
sg98
(lp490
(dp491
g49
S'expand'
p492
sg128
S'yes'
p493
sa(dp494
g49
S'fill'
p495
sg128
S'both'
p496
sasg24
Nsg101
(lp497
I1663
aI3110
asg103
(lp498
(dp499
g106
S'_on_OpCodeList_select'
p500
sg108
S''
sg109
S'<<ListboxSelect>>'
p501
sa(dp502
g106
S'_on_OpCodeList_Map'
p503
sg108
S''
sg109
S'<Map>'
p504
sasg111
(lp505
sa(dp506
g94
g431
sg49
S'_ParBox'
p507
sg96
g489
sg98
(lp508
sg24
Nsg101
(lp509
I5402
aI3110
asg103
(lp510
(dp511
g106
S'_on_ParBox_select'
p512
sg108
S''
sg109
S'<<ListboxSelect>>'
p513
sasg111
(lp514
sa(dp515
g94
g431
sg49
S'_ParEntry'
p516
sg96
S'Entry'
p517
sg98
(lp518
sg24
Nsg101
(lp519
I3864
aI7847
asg103
(lp520
sg111
(lp521
(dp522
g49
g312
sg128
S'_ParValue'
p523
sg135
S's.as'
p524
sasa(dp525
g94
g431
sg49
S'_ParNameLbl'
p526
sg96
S'Label'
p527
sg98
(lp528
sg24
Nsg101
(lp529
I3343
aI7775
asg103
(lp530
sg111
(lp531
(dp532
g49
S'textvariable'
p533
sg128
S'_ParName'
p534
sg135
S's.as'
p535
sasa(dp536
g94
g456
sg49
S'_SubmitFrame'
p537
sg96
g458
sg98
(lp538
(dp539
g49
g492
sg128
g493
sa(dp540
g49
g495
sg128
S'x'
sasg24
(I0
I3
tp541
sg101
g102
sg103
(lp542
sg111
(lp543
sa(dp544
g94
g431
sg49
S'_TopLabel'
p545
sg96
g527
sg98
(lp546
sg24
Nsg101
(lp547
I4609
aI203
asg103
(lp548
sg111
(lp549
(dp550
g49
g144
sg128
S'Define the opcode and press OK'
p551
sg135
Nsasasg232
g392
sg33
I1
sa(dp552
g62
g38
sg49
S'SDR2_Translate'
p553
sg28
S'_FlowFileUpBtn'
p554
sg65
S'Tkinter.Frame'
p555
sg67
(lp556
(lp557
I4997
aI550
aI0
aa(lp558
I2547
aI5275
aI1
aa(lp559
I1273
aI1687
aI0
aa(lp560
I1273
aI9330
aI0
aa(lp561
I6270
aI7584
aI0
aa(lp562
I6270
aI8266
aI0
aa(lp563
I6270
aI6435
aI0
aa(lp564
I5294
aI3493
aI1
aa(lp565
I7744
aI3493
aI1
aa(lp566
I3918
aI5754
aI0
aa(lp567
I4348
aI7010
aI1
aa(lp568
I5749
aI7010
aI1
aa(lp569
I5949
aI9127
aI1
aa(lp570
I7975
aI9462
aI0
aasg38
(dp571
g36
S'373.0'
p572
sg38
(lp573
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                SDR2_Translate                                #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass SDR2_Translate(Frame):\n    def __init__(self,Master=None,*pos,**kw):\n'
p574
aS"        #\n        #Your code here\n        #\n        self.curPath = '.'\n        self.current_str_idx = 0\n        self.current_act_idx = 0\n        self.actionFlow = []\n        self.strange_byte = ''\n        self.currentImage = ''\n        self.scene = Scene()\n        self.charNames = getCharNames(GameDataLoc)\n        self.lin_stack = []\n        self.mode = ''\n        self.pak_filenum = 0\n        self.pak_stack = []\n        self.visible_opcodes = OP_FUNCTIONS\n        self.hidden_opcodes = {}\n"
p575
aS"\n        apply(Frame.__init__,(self,Master),kw)\n        self._CurAction = StringVar()\n        self._CurrentEditString1 = StringVar()\n        self._CurrentEditString2 = StringVar()\n        self._CurrentEditString3 = StringVar()\n        self._FileNameText = StringVar()\n        self._Filtered = StringVar()\n        self._OpCodeEditText = StringVar()\n        self._ParEditText = StringVar()\n        self._ParLabelText = StringVar()\n        self._EditString1Len = StringVar()\n        self._EditString2Len = StringVar()\n        self._EditString3Len = StringVar()\n        self._StringIdx = StringVar()\n        self._FileNameFrame = Frame(self)\n        self._FileNameFrame.pack(fill='x',side='top')\n        self._FileName = Label(self._FileNameFrame\n            ,textvariable=self._FileNameText)\n        self._FileName.pack(side='top')\n        self._Frame2 = Frame(self)\n        self._Frame2.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self._OpFrame = Frame(self._Frame2)\n        self._OpFrame.pack(anchor='nw',fill='y',ipadx='25',side='left')\n        self._ContentFrame = Frame(self._Frame2)\n        self._ContentFrame.pack(anchor='nw',expand='yes',fill='both',side='left')\n        self._Frame1 = Frame(self._OpFrame)\n        self._Frame1.pack(fill='both',side='top')\n        self._FlowFrameLabel = Label(self._Frame1,text='Actions List')\n        self._FlowFrameLabel.pack(anchor='nw',side='left')\n        self._FilterFlowList = Checkbutton(self._Frame1\n            ,command=self._on_FilterFlowList_check,text='Filtered'\n            ,variable=self._Filtered)\n        self._FilterFlowList.pack(anchor='ne',side='right')\n        self._FlowFileUpBtn = Button(self._Frame1,state='disabled',text='UP')\n        self._FlowFileUpBtn.pack(side='right')\n        self._FlowFileUpBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_FlowFileUpBtn_ButRel_1)\n        self._FlowFrame = Frame(self._OpFrame)\n        self._FlowFrame.pack(expand='yes',fill='both',side='top')\n        self._FlowList = Listbox(self._FlowFrame)\n        self._FlowList.pack(expand='yes',fill='both',side='left')\n        self._FlowList.bind('<<ListboxSelect>>',self._on_FlowList_select)\n        self._FlowList.bind('<Double-Button-1>',self._on_FlowList_DblBtn)\n        self._FlowScroll = Scrollbar(self._FlowFrame)\n        self._FlowScroll.pack(anchor='e',fill='y',side='left')\n        self._Frame3 = Frame(self._OpFrame)\n        self._Frame3.pack(fill='x',side='top')\n        self._AddOpBtn = Button(self._Frame3,height='3',text='ADD OP')\n        self._AddOpBtn.pack(expand='yes',fill='both',side='left')\n        self._AddOpBtn.bind('<ButtonRelease-1>',self._on_AddOpBtn_Button_1)\n        self._DelOpBtn = Button(self._Frame3,text='DELETE OP')\n        self._DelOpBtn.pack(expand='yes',fill='both',side='left')\n        self._DelOpBtn.bind('<ButtonRelease-1>',self._on_DelOpBtn_Button_1)\n        self._TabHost = ttk.Notebook(self._ContentFrame)\n        self._TabHost.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self._Frame9 = Frame(self._ContentFrame)\n        self._Frame9.pack(fill='x',side='top')\n        self._WorkLabelFrame = Frame(self._ContentFrame)\n        self._WorkLabelFrame.pack(anchor='nw',fill='x',side='top')\n        self._WorkFrameLabel = Label(self._WorkLabelFrame,text='Parameters List')\n        self._WorkFrameLabel.pack(padx='35',side='left')\n        self._CurActionLabel = Label(self._WorkLabelFrame\n            ,textvariable=self._CurAction)\n        self._CurActionLabel.pack(side='left')\n        self._ParFrame = Frame(self._ContentFrame)\n        self._ParFrame.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self._StringFrame = Frame(self._TabHost)\n        self._StringFrame.pack(side='left')\n        self._MiscFrame = Frame(self._TabHost)\n        self._MiscFrame.pack(side='left')\n        self._MiscList = Listbox(self._MiscFrame)\n        self._MiscList.pack(side='top')\n        self._CanvasFrame = Frame(self._TabHost)\n        self._CanvasFrame.pack(side='left')\n        self._ScreenView = Canvas(self._CanvasFrame,background='#000000'\n            ,height=SCREEN_H,width=SCREEN_W)\n        self._ScreenView.pack(expand='yes',side='left')\n        self._Frame10 = Frame(self._Frame9)\n        self._Frame10.pack(side='left')\n        self._EditString1 = Entry(self._Frame10\n            ,textvariable=self._CurrentEditString1,width='50')\n        self._EditString1.pack(anchor='s',side='top')\n        self._EditString3 = Entry(self._Frame10\n            ,textvariable=self._CurrentEditString3,width='50')\n        self._EditString3.pack(side='bottom')\n        self._EditString2 = Entry(self._Frame10\n            ,textvariable=self._CurrentEditString2,width='50')\n        self._EditString2.pack(side='bottom')\n        self._Frame12 = Frame(self._Frame9)\n        self._Frame12.pack(side='left')\n        self._String1Len = Label(self._Frame12,textvariable=self._EditString1Len)\n        self._String1Len.pack(side='top')\n        self._String2Len = Label(self._Frame12,textvariable=self._EditString2Len)\n        self._String2Len.pack(side='top')\n        self._String3Len = Label(self._Frame12,textvariable=self._EditString3Len)\n        self._String3Len.pack(side='bottom')\n        self._Frame11 = Frame(self._Frame9)\n        self._Frame11.pack(anchor='nw',fill='x',side='left')\n        self._SetStringBtn = Button(self._Frame11,text='SET STRING')\n        self._SetStringBtn.pack(side='left')\n        self._SetStringBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_SetStringBtn_Button_1)\n        self._Frame4 = Frame(self._ParFrame)\n        self._Frame4.pack(expand='yes',fill='both',side='left')\n        self._ParList = Listbox(self._Frame4)\n        self._ParList.pack(expand='yes',fill='both',side='left')\n        self._Frame5 = Frame(self._ParFrame)\n        self._Frame5.pack(expand='yes',fill='x',side='left')\n        self._Frame6 = Frame(self._StringFrame)\n        self._Frame6.pack(expand='yes',fill='both',side='top')\n        self._StringListLabel = Label(self._Frame6,text='String list')\n        self._StringListLabel.pack(anchor='n',fill='x',side='top')\n        self._StringList = Listbox(self._Frame6)\n        self._StringList.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self._StringList.bind('<<ListboxSelect>>',self._on_StringList_select)\n        self._Frame7 = Frame(self._StringFrame)\n        self._Frame7.pack(fill='both',side='top')\n        self._StringIdxTextLbl = Label(self._Frame7,text='Current string:')\n        self._StringIdxTextLbl.pack(side='left')\n        self._StringIdxLbl = Label(self._Frame7,textvariable=self._StringIdx)\n        self._StringIdxLbl.pack(side='left')\n        self._AddStringBtn = Button(self._Frame7,text='Add string')\n        self._AddStringBtn.pack(anchor='e',side='left')\n        self._AddStringBtn.bind('<ButtonPress-1>' \\\n            ,self._on_AddStringBtn_Button_1)\n        self._ParListFrame = Frame(self._Frame5)\n        self._ParListFrame.pack(expand='yes',fill='x',side='top')\n        self._OpCodeLabel = Label(self._ParListFrame,text='Op Code',width='10')\n        self._OpCodeLabel.pack(anchor='nw',side='left')\n        self._OpCodeEdit = Entry(self._ParListFrame\n            ,textvariable=self._OpCodeEditText)\n        self._OpCodeEdit.pack(anchor='nw',side='left')\n        self._ParEditFrame = Frame(self._Frame5)\n        self._ParEditFrame.pack(expand='yes',fill='x',side='top')\n        self._ParLabel = Label(self._ParEditFrame\n            ,textvariable=self._ParLabelText,width='10')\n        self._ParLabel.pack(anchor='nw',side='left')\n        self._ParEdit = Entry(self._ParEditFrame,textvariable=self._ParEditText)\n        self._ParEdit.pack(anchor='nw',side='left')\n        self._Button1 = Button(self._ParEditFrame)\n        self._Button1.pack(anchor='nw',side='left')\n"
p576
aS'        #\n        #Your code here\n        #\n        self._FileNameText.set(\'Select the file\')\n        self._ParLabelText.set(\'Par name\')\n        self._CurrentEditString1.trace(\'w\', self._on_EditString1_modified)\n        self._CurrentEditString2.trace(\'w\', self._on_EditString2_modified)\n        self._CurrentEditString3.trace(\'w\', self._on_EditString3_modified)\n        # Tabs\n        self._TabHost.add(self._CanvasFrame, text="Canvas")\n        self._TabHost.add(self._StringFrame, text="Strings")\n        self._TabHost.add(self._MiscFrame, text="Misc")\n        # Filter\n        self._FilterFlowList.deselect()\n        # Set menu\n        self._RootMenu = Menu(Master)\n        # File menu\n        FileMenu = Menu(self._RootMenu, tearoff=0)\n        FileMenu.add_command(label="Open", command=self.openFile)\n        FileMenu.add_command(label="Save", command=self.saveFile)\n        FileMenu.add_command(label="Extract Pak", command=self.extractPak)\n        FileMenu.add_command(label="Exit", command=exit)\n        self._RootMenu.add_cascade(label="File", menu=FileMenu)\n        # Options menu\n        OptionsMenu = Menu(self._RootMenu, tearoff=0)\n        OptionsMenu.add_command(label="Game Data", command=self.openGameDataOpts)\n        self._RootMenu.add_cascade(label="Options", menu=OptionsMenu)\n        Master.config(menu=self._RootMenu)\n        # Scrollbar\n        self._FlowScroll.config( command = self._FlowList.yview )\n        self._FlowList[\'yscrollcommand\'] = self._FlowScroll.set\n'
p577
aS'    #\n    #Start of event handler methods\n    #\n'
p578
aS"    def _on_EditString1_modified(self,*args):\n        # We don't need to count the <CLT>s\n        string = self._CurrentEditString1.get()\n        string = re.sub(r'<CLT.*?>', '', string)\n        self._EditString1Len.set('Chars left: %d' % (96 - len(string)))\n        pass\n\n    def _on_EditString2_modified(self,*args):\n        # We don't need to count the <CLT>s\n        string = self._CurrentEditString2.get()\n        string = re.sub(r'<CLT.*?>', '', string)\n        self._EditString2Len.set('Chars left: %d' % (96 - len(string)))\n        pass\n\n    def _on_EditString3_modified(self,*args):\n        # We don't need to count the <CLT>s\n        string = self._CurrentEditString3.get()\n        string = re.sub(r'<CLT.*?>', '', string)\n        self._EditString3Len.set('Chars left: %d' % (96 - len(string)))\n        pass\n"
p579
aS'\n    def _on_AddOpBtn_Button_1(self'
p580
aS',Event=None):\n        question = "This action will ADD a new Operation into the script. Continue?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            # Here we should open another window to add op\n            w = OpCodeCreator(self)\n            # Wait for the window to close\n            w.wait_window(w)\n            pass\n        pass\n'
p581
aS'\n    def _on_AddStringBtn_Button_1(self'
p582
aS',Event=None):\n        # Show warning\n        question = "This action will ADD a string into the script. Continue?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            s = tkSimpleDialog.askstring("Add string", "")\n            if s:\n                # Append the string into the list and add it to the listbox\n                try:\n                    # Find opcode in which we declare the number of strings\n                    ns_idx = self.lin_stack[-1].opcode_list.index(0)\n                    # Add one more string\n                    self.lin_stack[-1].pars_list[ns_idx] = (self.lin_stack[-1].pars_list[ns_idx][0], self.lin_stack[-1].pars_list[ns_idx][0][1] + 1)\n                    # Add the string to the string_list \n                    self.lin_stack[-1].string_list.append(s.encode(\'utf16\'))\n                    # Add it to the listbox\n                    self._StringList.insert(END, s)\n                    # Show the index of the new string\n                    tkMessageBox.showinfo(\'String added\', \'Inserted string index: %s\' % str(len(self.lin_stack[-1].string_list) - 1))\n                except:\n                    # Something went wrong\n                    tkMessageBox.showerror(\'Error\', \'Error adding string\')\n        pass\n'
p583
aS'\n    def _on_DelOpBtn_Button_1(self'
p584
aS',Event=None):\n        question = "This action will DELETE the Operation from the script. Continue?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            i = int(self._FlowList.curselection()[0])\n            # Delete from lists\n            self._FlowList.delete(i)\n            # Change strings section offset\n            offset = 0x02 + len(self.lin_stack[-1].pars_list[i])\n            self.Lin.baseoffset -= offset\n            # Delete opcode, action and parameters\n            del self.lin_stack[-1].opcode_list[i]\n            del self.lin_stack[-1].action_list[i]\n            del self.lin_stack[-1].pars_list[i]\n        pass\n'
p585
aS'\n    def _on_FilterFlowList_check(self'
p586
aS",Event=None):\n        if self._Filtered.get() == '1':\n            # Create a filter window\n            flt = Filter(self)\n            # Populate the window\n            flt.initLists(self.hidden_opcodes, self.visible_opcodes)\n            # Wait for the window to close\n            flt.wait_window(flt)\n            pass\n        else:\n            pass\n        pass\n"
p587
aS'\n    def _on_FlowFileUpBtn_ButRel_1(self'
p588
aS',Event=None):\n        # For lin - just pop the last one and populate with the old\n        if self.mode == \'.lin\':\n            st = self.lin_stack\n            question = "Save changes?"\n            proceed = tkMessageBox.askyesno("WARNING", question)\n            if proceed:\n                self.saveFile()\n            st.pop()\n            self.populateLinLists()\n            # Check stack size, if last element - disable UP btn\n            if len(st) < 2:\n                self._FlowFileUpBtn.config(state=\'disabled\')\n            # Fix header\n            self._FileNameText.set(os.path.split(st[-1].fn)[1])\n            pass\n        # For pak - we have internal writer\n        if self.mode == \'.pak\':\n            st = self.pak_stack\n            # Save changes\n            question = "Save changes?"\n            proceed = tkMessageBox.askyesno("WARNING", question)\n            if proceed:\n                # Create a data tuple\n                filename = st[-2].files[self.pak_filenum][0]\n                data = st[-1].to_string()\n                st[-2].files[self.pak_filenum] = (filename, data)\n            # Clear flowlist and pop the last element of the pak stack\n            self._FlowList.delete(0,END)\n            st.pop()\n            # Populate flowlist with original pak\'s files\n            for f in st[-1].files:\n                self._FlowList.insert(END, "%s" % f[0])                \n            # Check stack size, if last element - disable UP btn\n            if len(st) < 2:\n                self._FlowFileUpBtn.config(state=\'disabled\')\n        pass\n'
p589
aS'\n    def _on_FlowList_DblBtn(self'
p590
aS',Event=None):\n        if self.mode == \'.pak\':\n            self._on_FlowList_DblBtn_Pak()\n        pass\n    \n    def _on_FlowList_DblBtn_Pak(self):\n        if self._FlowList.size() > 0:\n            # Now working not with actions, but with files\n            i = int(self._FlowList.curselection()[0])\n            file = self.pak_stack[-1].files[i]\n            if \'.dat\' in file[0] or \'.p3d\' in file[0]:\n                question = "Try unpacking binary file?"\n                proceed = tkMessageBox.askyesno("WARNING", question)\n                if proceed:\n                    self.pak_filenum = i\n                    # We\'ll use it as a directory\n                    self._FlowList.delete(0,END)\n                    # Now unpack the file\n                    pak = PakFile()\n                    pak.fromData(file[1])\n                    self.pak_stack.append(pak)\n                    for f in self.pak_stack[-1].files:\n                        self._FlowList.insert(END, "%s" % f[0])\n                    # Set UP btn working\n                    self._FlowFileUpBtn.config(state=\'normal\')\n'
p591
aS'\n    def _on_FlowList_select(self'
p592
aS',Event=None):\n        self.current_act_idx = int(self._FlowList.curselection()[0])\n        if self.mode == \'.lin\':\n            self._on_FlowList_select_Lin()\n        if self.mode == \'.pak\':\n            self._on_FlowList_select_Pak()\n        pass\n    \n    def _on_FlowList_select_Lin(self):\n        if self._FlowList.size() > 0:\n            i = int(self._FlowList.curselection()[0])\n            action = self.lin_stack[-1].action_list[i]\n            pars = self.lin_stack[-1].pars_list[i]\n            code = self.lin_stack[-1].opcode_list[i]\n            # Clear everything related to pars in GUI\n            self._OpCodeEditText.set(\'\')\n            self._ParEditText.set(\'\')\n            self._ParLabelText.set(\'Par name\')\n            self._ParList.delete(0,END)\n            # Put all parameters to the GUI\n            self._OpCodeEditText.set(code)\n            for par in pars:\n                self._ParList.insert(END, "%s:\\t %d" % (par[0],par[1]) )\n            # What to do for different opcodes\n            # Show sprite\n            if code == WRD_SPRITE:\n                GuiFuncs.showSprite(self, GameDataLoc, pars)\n            # Show flash\n            if code == WRD_FLASH:\n                GuiFuncs.showFlash(self, GameDataLoc, pars)\n            # Text highlighting\n            if code == WRD_CLT:\n                self.scene.text_clt = True\n            # Get string idx\n            if code == WRD_GET_LINE_IDX:\n                self._StringList.select_set(pars[0][1])\n                self._on_StringList_select()\n                self.scene.text = self._StringList.get(pars[0][1])\n            # Print next string from FIFO\n            if code == WRD_PRINT_LINE:\n                GuiFuncs.printLine(self)\n            # If waiting for input (go to the next line waiting)\n            if code == WRD_WAIT_INPUT:\n                self.scene.text = \'\'\n            # Set speaker\n            if code == WRD_SPEAKER:\n                self.scene.speaker = self.charNames[pars[0][1]]\n            # Call script\n            if code == WRD_CALL_SCRIPT:\n                question = \'Call script: e%02d_%03d_%03d.lin?\' % (pars[0][1], pars[1][1], pars[2][1])\n                proceed = tkMessageBox.askyesno("Call script", question)\n                if proceed:\n                    # Clear canvas\n                    self._ScreenView.delete(ALL)\n                    self.scene.flash = []\n                    # Clear lists\n                    self._FlowList.delete(0,END)\n                    self._StringList.delete(0,END)\n                    # Load next file\n                    next_fn = os.path.join(DoneDataLoc, \'jp\', \'script\', \'e%02d_%03d_%03d.lin\' % (pars[0][1], pars[1][1], pars[2][1]))\n                    if not os.path.isfile(next_fn):\n                        next_fn = os.path.join(GameDataLoc, \'jp\', \'script\', \'e%02d_%03d_%03d.lin\' % (pars[0][1], pars[1][1], pars[2][1]))                    \n                    self.decodeFile(next_fn, clear = False)\n                    # Set UP btn working\n                    self._FlowFileUpBtn.config(state=\'normal\')\n            # Go to the next script\n            if code == WRD_GOTO_SCRIPT:\n                question = \'Go to the next script: e%02d_%03d_%03d.lin?\' % (pars[0][1], pars[1][1], pars[2][1])\n                loadNext = tkMessageBox.askyesno("Go to the next script", question)\n                if loadNext:\n                    # Clear canvas\n                    self._ScreenView.delete(ALL)\n                    self.scene.flash = []\n                    # Clear lists\n                    self._FlowList.delete(0,END)\n                    self._StringList.delete(0,END)\n                    # Load next file\n                    next_fn = os.path.join(DoneDataLoc, \'jp\', \'script\', \'e%02d_%03d_%03d.lin\' % (pars[0][1], pars[1][1], pars[2][1]))\n                    if not os.path.isfile(next_fn):\n                        next_fn = os.path.join(GameDataLoc, \'jp\', \'script\', \'e%02d_%03d_%03d.lin\' % (pars[0][1], pars[1][1], pars[2][1]))                    \n                    self.decodeFile(next_fn)\n        pass\n    \n    def _on_FlowList_select_Pak(self):\n        if self._FlowList.size() > 0:\n            # Now working not with actions, but with files\n            i = int(self._FlowList.curselection()[0])    \n            # If not - looking at the current pak file and level\n            file = self.pak_stack[-1].files[i]\n            # Checking the file type\n            if \'.gim\' in file[0]:\n                GimImage = GimFile()\n                GimImage.fromData(file[1])\n                GimImage.getImage()\n                pilImage = PIL.Image.new("RGBA", (GimImage.width, GimImage.height))\n                pilImage.putdata(GimImage.image)\n                self.scene.sprite = ImageTk.PhotoImage(pilImage)\n                POS_X = (2*SCREEN_W - GimImage.width)/2\n                POS_Y = (2*SCREEN_H - GimImage.height)/2\n                imagesprite = self._ScreenView.create_image(POS_X,POS_Y,image=self.scene.sprite, tag = \'sprite\')                \n            elif \'.gmo\' in file[0]:\n                GmoImage = GmoFile()\n                GmoImage.fromData(file[1])\n                GmoImage.extractGim()\n                GmoImage.gim.getImage()\n                pilImage = PIL.Image.new("RGBA", (GmoImage.gim.width, GmoImage.gim.height))\n                pilImage.putdata(GmoImage.gim.image)\n                self.scene.sprite = ImageTk.PhotoImage(pilImage)\n                POS_X = (2*SCREEN_W - GmoImage.gim.width)/2\n                POS_Y = (2*SCREEN_H - GmoImage.gim.height)/2\n                imagesprite = self._ScreenView.create_image(POS_X,POS_Y,image=self.scene.sprite, tag = \'sprite\')                \n            elif \'.txt\' in file[0]:\n                self.scene.text = file[1].decode(\'utf16\')\n                self._CurrentEditString1.set(self.scene.text)\n        pass\n                \n    def openGameDataOpts(self):\n        gd = GameData()\n        pass\n    \n    def extractPak(self):\n        options = {}\n        options[\'filetypes\'] = [(\'pak files\', (\'*.pak\',\'*.p3d\'))]\n        fn = tkFileDialog.askopenfilename(**options)\n        ds = tkFileDialog.askdirectory()\n        if fn and ds:\n            pak = PakFile(fn)\n            pak.getFiles()\n            for f in pak.files:\n                fp = open(os.path.join(ds, f[0]), \'wb\')\n                fp.write(f[1])\n                fp.close\n        tkMessageBox.showinfo(\'Complete\', \'Pak file %s extracted successfully into %s\' % (fn, ds))\n        pass\n        \n    def openFile(self):\n        options = {}\n        options[\'filetypes\'] = [(\'script files\', \'.lin\'), (\'image files\', (\'*.gim\',\'*.gmo\')), (\'pak files\', (\'*.pak\',\'*.p3d\')), (\'all files\', \'.*\')]\n        fn = tkFileDialog.askopenfilename(**options)\n        if fn:\n            self.decodeFile(fn)\n        pass\n    \n    def saveFile(self):\n        fn = tkFileDialog.asksaveasfilename(initialfile=self._FileNameText.get())\n        if fn:\n            self.encodeFile(fn)\n        pass\n    \n    def populateLinLists(self):\n        # Clear everything\n        self._StringList.delete(0,END)\n        self._FlowList.delete(0,END)\n        # Put strings into listbox\n        for s in self.lin_stack[-1].string_list:\n            self._StringList.insert(END, s.decode(\'utf16\'))        \n        # Set action list\n        for i in xrange(len(self.lin_stack[-1].action_list)):\n            self._FlowList.insert(END, "%s%s" % (self.lin_stack[-1].action_list[i], self.lin_stack[-1].pars_list[i]))\n        pass\n    \n    def decodeFile(self, fn, clear = True):\n        # Clear stacks\n        if clear:\n            self.lin_stack = []\n            self.pak_stack = []\n        # Get file type from ext\n        file = os.path.split(fn)[1]\n        self._FileNameText.set(file)\n        print "Decoding %s" % fn\n        # Lin file\n        if \'.lin\' in file:\n            self.mode = \'.lin\'\n            # Decode another file\n            self.lin_stack.append(LinFile())\n            self.lin_stack[-1].decodeLinFile(fn)\n            self.populateLinLists()\n        \n        # Pak file\n        if \'.pak\' in file:\n            self.mode = \'.pak\'\n            # Decode .pak file\n            pak = PakFile(fn)\n            pak.getFiles()\n            # Append it into stack\n            self.pak_stack.append(pak)\n            # Clear everything\n            self._StringList.delete(0,END)\n            self._FlowList.delete(0,END)\n            # Put all filenames into the flow list\n            for f in self.pak_stack[-1].files:\n                self._FlowList.insert(END, "%s" % f[0])\n        \n        # P3d file\n        if \'.p3d\' in file:\n            self.mode = \'.pak\'\n            # Decode .pak file\n            pak = P3dFile(fn)\n            pak.getFiles()\n            # Append it into stack\n            self.pak_stack.append(pak)\n            # Clear everything\n            self._StringList.delete(0,END)\n            self._FlowList.delete(0,END)\n            # Put all filenames into the flow list\n            for f in self.pak_stack[-1].files:\n                self._FlowList.insert(END, "%s" % f[0])\n        pass\n        \n    def encodeFile(self,fn):\n        file = os.path.split(fn)[1]\n        self._FileNameText.set(file)\n        if \'.lin\' in fn:\n            self.lin_stack[-1].encodeLinFile(fn)\n        if \'.pak\' in fn:\n            self.pak_stack[-1].makePak(fn)\n        pass\n        \n    def exit():\n        Root.quit()\n\n'
p593
aS'\n    def _on_SetStringBtn_Button_1(self'
p594
aS',Event=None):\n        # For .lin file we\'re just changing the string in its string_list\n        if self.mode == \'.lin\':\n            # Construct the new string\n            str1 = self._CurrentEditString1.get()\n            str2 = self._CurrentEditString2.get()\n            str3 = self._CurrentEditString3.get()\n            final_string = \'\'\n            if str1 != \'\':\n                final_string += str1 + (\'\\x0d\\x00\\x0a\\x00\').decode(\'utf16\')\n            if str2 != \'\':\n                final_string += str2 + (\'\\x0d\\x00\\x0a\\x00\').decode(\'utf16\')\n            if str3 != \'\':\n                final_string += str3 + (\'\\x0d\\x00\\x0a\\x00\').decode(\'utf16\')\n            # Replace chars that\'re not present in the game\n            final_string = final_string.replace(\'?\', u"\\uFF1F") # Question mark\n            # Get string index\n            idx = self.current_str_idx\n            # Delete the old string from the visible list\n            self._StringList.delete(idx)\n            # Insert the new string\n            self.lin_stack[-1].string_list[idx] = final_string\n            self._StringList.insert(idx, final_string)\n            # Show the new version\n            self.scene.text = self._StringList.get(idx)\n            GuiFuncs.printLine(self)\n        # For .pak we\'re changing the Pak.files[i] content\n        elif self.mode == \'.pak\':\n            str = self._CurrentEditString1.get()\n            i = self.current_act_idx\n            l = list(self.pak_stack[-1].files[i])\n            l[1] = str.encode(\'utf16\')\n            self.pak_stack[-1].files[i] = tuple(l)\n        pass\n'
p595
aS'\n    def _on_StringList_select(self'
p596
aS",Event=None):\n        if self._StringList.size() > 0:\n            num = int(self._StringList.curselection()[0])\n            string = self._StringList.get(num)\n            string = string.split('\\r\\n')\n            self._CurrentEditString1.set(string[0])\n            if len(string) > 1:\n                self._CurrentEditString2.set(string[1])\n            else:\n                self._CurrentEditString2.set('')\n            if len(string) > 2:\n                self._CurrentEditString3.set(string[2])\n            else:\n                self._CurrentEditString3.set('')\n            self.current_str_idx = num\n            self._StringIdx.set(num)\n        pass\n"
p597
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p598
aS'\n# This one-liner splits the string without consuming delimiters\ndef splitkeepsep(s, sep):\n    return reduce(lambda acc, elem: acc[:-1] + [acc[-1] + elem] if elem == sep else acc + [elem], re.split("(%s)" % re.escape(sep), s), [])'
p599
asg7
I0
sg43
I996991
ssg29
(lp600
(dp601
g94
S'Tkinter'
p602
sg49
g553
sg96
S'Frame'
p603
sg98
(lp604
sg24
g263
sg101
g102
sg103
(lp605
sg111
(lp606
sa(dp607
g94
g431
sg49
S'_AddOpBtn'
p608
sg96
g433
sg98
(lp609
(dp610
g49
g492
sg128
g493
sa(dp611
g49
g495
sg128
g496
sasg24
Nsg101
(lp612
I794
aI9689
asg103
(lp613
(dp614
g106
S'_on_AddOpBtn_Button_1'
p615
sg108
S''
sg109
S'<ButtonRelease-1>'
p616
sasg111
(lp617
(dp618
g49
g133
sg128
S'ADD OP'
p619
sg135
Nsa(dp620
g49
S'height'
p621
sg128
S'n:3'
p622
sg135
Nsasa(dp623
g94
S'Tkinter'
p624
sg49
S'_AddStringBtn'
p625
sg96
S'Button'
p626
sg98
(lp627
(dp628
g49
g127
sg128
S'e'
sasg24
Nsg101
(lp629
I3790
aI6100
asg103
(lp630
(dp631
g106
S'_on_AddStringBtn_Button_1'
p632
sg108
S''
sg109
S'<ButtonPress-1>'
p633
sasg111
(lp634
(dp635
g49
g133
sg128
S'Add string'
p636
sg135
Nsasa(dp637
g94
g122
sg49
S'_Button1'
p638
sg96
g124
sg98
(lp639
(dp640
g49
g127
sg128
S'nw'
p641
sasg24
Nsg101
(lp642
I7871
aI9749
asg103
(lp643
sg111
(lp644
sa(dp645
g94
S'Tkinter'
p646
sg49
S'_CanvasFrame'
p647
sg96
S'Frame'
p648
sg98
(lp649
sg24
(I0
I1
I1
I0
I2
tp650
sg101
g102
sg103
(lp651
sg111
(lp652
sa(dp653
g94
S'Tkinter'
p654
sg49
S'_ContentFrame'
p655
sg96
S'Frame'
p656
sg98
(lp657
(dp658
g49
g127
sg128
S'nw'
p659
sa(dp660
g49
g492
sg128
S'yes'
p661
sa(dp662
g49
g495
sg128
S'both'
p663
sasg24
(I0
I1
I1
tp664
sg101
g102
sg103
(lp665
sg111
(lp666
sa(dp667
g94
S'Tkinter'
p668
sg49
S'_CurActionLabel'
p669
sg96
S'Label'
p670
sg98
(lp671
sg24
Nsg101
(lp672
I6367
aI7835
asg103
(lp673
sg111
(lp674
(dp675
g49
g533
sg128
S'_CurAction'
p676
sg135
S's.as'
p677
sasa(dp678
g94
g431
sg49
S'_DelOpBtn'
p679
sg96
g433
sg98
(lp680
(dp681
g49
g492
sg128
g493
sa(dp682
g49
g495
sg128
g496
sasg24
Nsg101
(lp683
I1516
aI9689
asg103
(lp684
(dp685
g106
S'_on_DelOpBtn_Button_1'
p686
sg108
S''
sg109
S'<ButtonRelease-1>'
p687
sasg111
(lp688
(dp689
g49
g133
sg128
S'DELETE OP'
p690
sg135
Nsasa(dp691
g94
S'Tkinter'
p692
sg49
S'_EditString1'
p693
sg96
S'Entry'
p694
sg98
(lp695
(dp696
g49
g127
sg128
S's'
sasg24
Nsg101
(lp697
I3269
aI6639
asg103
(lp698
sg111
(lp699
(dp700
g49
S'width'
p701
sg128
S'n:50'
p702
sg135
Nsa(dp703
g49
g312
sg128
S'_CurrentEditString1'
p704
sg135
S's.as'
p705
sasa(dp706
g94
g668
sg49
S'_EditString2'
p707
sg96
S'Entry'
p708
sg98
(lp709
sg24
Nsg101
(lp710
I3281
aI6998
asg103
(lp711
sg111
(lp712
(dp713
g49
g701
sg128
S'n:50'
p714
sg135
Nsa(dp715
g49
g312
sg128
S'_CurrentEditString2'
p716
sg135
S's.as'
p717
sasa(dp718
g94
S'Tkinter'
p719
sg49
S'_EditString3'
p720
sg96
S'Entry'
p721
sg98
(lp722
sg24
Nsg101
(lp723
I3299
aI7297
asg103
(lp724
sg111
(lp725
(dp726
g49
g701
sg128
S'n:50'
p727
sg135
Nsa(dp728
g49
g312
sg128
S'_CurrentEditString3'
p729
sg135
S's.as'
p730
sasa(dp731
g94
S'Tkinter'
p732
sg49
S'_FileName'
p733
sg96
S'Label'
p734
sg98
(lp735
sg24
Nsg101
(lp736
I4615
aI239
asg103
(lp737
sg111
(lp738
(dp739
g49
g533
sg128
S'_FileNameText'
p740
sg135
S's.as'
p741
sasa(dp742
g94
g654
sg49
S'_FileNameFrame'
p743
sg96
g656
sg98
(lp744
(dp745
g49
g495
sg128
S'x'
sasg24
(I0
I0
tp746
sg101
g102
sg103
(lp747
sg111
(lp748
sa(dp749
g94
g122
sg49
S'_FilterFlowList'
p750
sg96
S'Checkbutton'
p751
sg98
(lp752
(dp753
g49
g127
sg128
S'ne'
p754
sasg24
Nsg101
(lp755
I1983
aI1459
asg103
(lp756
sg111
(lp757
(dp758
g49
S'text'
p759
sg128
S'Filtered'
p760
sg135
Nsa(dp761
g49
S'variable'
p762
sg128
S'_Filtered'
p763
sg135
S'sif.as'
p764
sa(dp765
g49
S'command'
p766
sg128
S'_on_FilterFlowList_check'
p767
sg135
I1
sasa(dp768
g94
g267
sg49
g554
sg96
g269
sg98
(lp769
sg24
Nsg101
(lp770
I1195
aI1447
asg103
(lp771
(dp772
g106
S'_on_FlowFileUpBtn_ButRel_1'
p773
sg108
S''
sg109
S'<ButtonRelease-1>'
p774
sasg111
(lp775
(dp776
g49
g133
sg128
S'UP'
p777
sg135
Nsa(dp778
g49
g174
sg128
S'disabled'
p779
sg135
Nsasa(dp780
g94
g456
sg49
S'_FlowFrame'
p781
sg96
g458
sg98
(lp782
(dp783
g49
g492
sg128
g493
sa(dp784
g49
g495
sg128
g496
sasg24
(I0
I1
I0
I1
tp785
sg101
g102
sg103
(lp786
sg111
(lp787
sa(dp788
g94
g732
sg49
S'_FlowFrameLabel'
p789
sg96
g734
sg98
(lp790
(dp791
g49
g127
sg128
S'nw'
p792
sasg24
Nsg101
(lp793
I285
aI1447
asg103
(lp794
sg111
(lp795
(dp796
g49
g144
sg128
S'Actions List'
p797
sg135
Nsasa(dp798
g94
g267
sg49
S'_FlowList'
p799
sg96
S'Listbox'
p800
sg98
(lp801
(dp802
g49
g492
sg128
S'yes'
p803
sa(dp804
g49
g495
sg128
S'both'
p805
sasg24
Nsg101
(lp806
I988
aI4653
asg103
(lp807
(dp808
g106
S'_on_FlowList_select'
p809
sg108
S''
sg109
S'<<ListboxSelect>>'
p810
sa(dp811
g106
S'_on_FlowList_DblBtn'
p812
sg108
S''
sg109
S'<Double-Button-1>'
p813
sasg111
(lp814
sa(dp815
g94
g267
sg49
S'_FlowScroll'
p816
sg96
S'Scrollbar'
p817
sg98
(lp818
(dp819
g49
g127
sg128
S'e'
sa(dp820
g49
g495
sg128
S'y'
sasg24
Nsg101
(lp821
I1340
aI4641
asg103
(lp822
sg111
(lp823
sa(dp824
g94
g114
sg49
S'_Frame1'
p825
sg96
g116
sg98
(lp826
(dp827
g49
g495
sg128
S'both'
p828
sasg24
(I0
I1
I0
I0
tp829
sg101
g102
sg103
(lp830
sg111
(lp831
sa(dp832
g94
S'Tkinter'
p833
sg49
S'_Frame10'
p834
sg96
S'Frame'
p835
sg98
(lp836
sg24
(I0
I1
I1
I1
I0
tp837
sg101
g102
sg103
(lp838
sg111
(lp839
sa(dp840
g94
g833
sg49
S'_Frame11'
p841
sg96
g835
sg98
(lp842
(dp843
g49
g127
sg128
S'nw'
p844
sa(dp845
g49
g495
sg128
S'x'
sasg24
(I0
I1
I1
I1
I2
tp846
sg101
g102
sg103
(lp847
sg111
(lp848
sa(dp849
g94
g833
sg49
S'_Frame12'
p850
sg96
g835
sg98
(lp851
sg24
(I0
I1
I1
I1
I1
tp852
sg101
g102
sg103
(lp853
sg111
(lp854
sa(dp855
g94
g654
sg49
S'_Frame2'
p856
sg96
g656
sg98
(lp857
(dp858
g49
g127
sg128
g659
sa(dp859
g49
g492
sg128
S'yes'
p860
sa(dp861
g49
g495
sg128
S'both'
p862
sasg24
(I0
I1
tp863
sg101
g102
sg103
(lp864
sg111
(lp865
sa(dp866
g94
g456
sg49
S'_Frame3'
p867
sg96
g458
sg98
(lp868
(dp869
g49
g495
sg128
S'x'
sasg24
(I0
I1
I0
I2
tp870
sg101
g102
sg103
(lp871
sg111
(lp872
sa(dp873
g94
S'Tkinter'
p874
sg49
S'_Frame4'
p875
sg96
S'Frame'
p876
sg98
(lp877
(dp878
g49
g492
sg128
S'yes'
p879
sa(dp880
g49
g495
sg128
g828
sasg24
(I0
I1
I1
I3
I0
tp881
sg101
g102
sg103
(lp882
sg111
(lp883
sa(dp884
g94
g874
sg49
S'_Frame5'
p885
sg96
g876
sg98
(lp886
(dp887
g49
g492
sg128
S'yes'
p888
sa(dp889
g49
g495
sg128
S'x'
sasg24
(I0
I1
I1
I3
I1
tp890
sg101
g102
sg103
(lp891
sg111
(lp892
sa(dp893
g94
S'Tkinter'
p894
sg49
S'_Frame6'
p895
sg96
S'Frame'
p896
sg98
(lp897
(dp898
g49
g492
sg128
S'yes'
p899
sa(dp900
g49
g495
sg128
S'both'
p901
sasg24
(I0
I1
I1
I0
I0
I0
tp902
sg101
g102
sg103
(lp903
sg111
(lp904
sa(dp905
g94
g894
sg49
S'_Frame7'
p906
sg96
g896
sg98
(lp907
(dp908
g49
g495
sg128
g901
sasg24
(I0
I1
I1
I0
I0
I1
tp909
sg101
g102
sg103
(lp910
sg111
(lp911
sa(dp912
g94
g874
sg49
S'_Frame9'
p913
sg96
g876
sg98
(lp914
(dp915
g49
g495
sg128
S'x'
sasg24
(I0
I1
I1
I1
tp916
sg101
g102
sg103
(lp917
sg111
(lp918
sa(dp919
g94
g114
sg49
S'_MiscFrame'
p920
sg96
g116
sg98
(lp921
sg24
(I0
I1
I1
I0
I1
tp922
sg101
g102
sg103
(lp923
sg111
(lp924
sa(dp925
g94
g122
sg49
S'_MiscList'
p926
sg96
g148
sg98
(lp927
sg24
Nsg101
(lp928
I6246
aI2584
asg103
(lp929
sg111
(lp930
sa(dp931
g94
S'Tkinter'
p932
sg49
S'_OpCodeEdit'
p933
sg96
S'Entry'
p934
sg98
(lp935
(dp936
g49
g127
sg128
S'nw'
p937
sasg24
Nsg101
(lp938
I7095
aI8708
asg103
(lp939
sg111
(lp940
(dp941
g49
g312
sg128
S'_OpCodeEditText'
p942
sg135
S's.as'
p943
sasa(dp944
g94
g668
sg49
S'_OpCodeLabel'
p945
sg96
g670
sg98
(lp946
(dp947
g49
g127
sg128
g937
sasg24
Nsg101
(lp948
I6380
aI8720
asg103
(lp949
sg111
(lp950
(dp951
g49
g144
sg128
S'Op Code'
p952
sg135
Nsa(dp953
g49
S'width'
p954
sg128
S'n:10'
p955
sg135
Nsasa(dp956
g94
g654
sg49
S'_OpFrame'
p957
sg96
g656
sg98
(lp958
(dp959
g49
S'ipadx'
p960
sg128
S'n:25'
p961
sa(dp962
g49
g127
sg128
g659
sa(dp963
g49
g495
sg128
S'y'
sasg24
(I0
I1
I0
tp964
sg101
g102
sg103
(lp965
sg111
(lp966
sa(dp967
g94
g668
sg49
S'_ParEdit'
p968
sg96
g708
sg98
(lp969
(dp970
g49
g127
sg128
g641
sasg24
Nsg101
(lp971
I7101
aI9689
asg103
(lp972
sg111
(lp973
(dp974
g49
g312
sg128
S'_ParEditText'
p975
sg135
S's.as'
p976
sasa(dp977
g94
g874
sg49
S'_ParEditFrame'
p978
sg96
g876
sg98
(lp979
(dp980
g49
g492
sg128
g879
sa(dp981
g49
g495
sg128
S'x'
sasg24
(I0
I1
I1
I3
I1
I1
tp982
sg101
g102
sg103
(lp983
sg111
(lp984
sa(dp985
g94
g874
sg49
S'_ParFrame'
p986
sg96
g876
sg98
(lp987
(dp988
g49
g127
sg128
g937
sa(dp989
g49
g492
sg128
g888
sa(dp990
g49
g495
sg128
g828
sasg24
(I0
I1
I1
I3
tp991
sg101
g102
sg103
(lp992
sg111
(lp993
sa(dp994
g94
g668
sg49
S'_ParLabel'
p995
sg96
g670
sg98
(lp996
(dp997
g49
g127
sg128
g641
sasg24
Nsg101
(lp998
I6422
aI9701
asg103
(lp999
sg111
(lp1000
(dp1001
g49
g954
sg128
S'n:10'
p1002
sg135
Nsa(dp1003
g49
g533
sg128
S'_ParLabelText'
p1004
sg135
S's.as'
p1005
sasa(dp1006
g94
g122
sg49
S'_ParList'
p1007
sg96
g148
sg98
(lp1008
(dp1009
g49
g492
sg128
g879
sa(dp1010
g49
g495
sg128
g828
sasg24
Nsg101
(lp1011
I3511
aI8888
asg103
(lp1012
sg111
(lp1013
sa(dp1014
g94
g874
sg49
S'_ParListFrame'
p1015
sg96
g876
sg98
(lp1016
(dp1017
g49
g492
sg128
g879
sa(dp1018
g49
g495
sg128
S'x'
sasg24
(I0
I1
I1
I3
I1
I0
tp1019
sg101
g102
sg103
(lp1020
sg111
(lp1021
sa(dp1022
g94
S'Tkinter'
p1023
sg49
S'_ScreenView'
p1024
sg96
S'Canvas'
p1025
sg98
(lp1026
(dp1027
g49
g492
sg128
S'yes'
p1028
sasg24
Nsg101
(lp1029
I8599
aI2943
asg103
(lp1030
sg111
(lp1031
(dp1032
g49
S'height'
p1033
sg128
S'u:SCREEN_H'
p1034
sg135
Nsa(dp1035
g49
S'width'
p1036
sg128
S'u:SCREEN_W'
p1037
sg135
Nsa(dp1038
g49
S'background'
p1039
sg128
S'c:#000000'
p1040
sg135
Nsasa(dp1041
g94
S'Tkinter'
p1042
sg49
S'_SetStringBtn'
p1043
sg96
S'Button'
p1044
sg98
(lp1045
sg24
Nsg101
(lp1046
I6198
aI6938
asg103
(lp1047
(dp1048
g106
S'_on_SetStringBtn_Button_1'
p1049
sg108
S''
sg109
S'<ButtonRelease-1>'
p1050
sasg111
(lp1051
(dp1052
g49
g133
sg128
S'SET STRING'
p1053
sg135
Nsasa(dp1054
g94
g1042
sg49
S'_String1Len'
p1055
sg96
S'Label'
p1056
sg98
(lp1057
sg24
Nsg101
(lp1058
I4609
aI6687
asg103
(lp1059
sg111
(lp1060
(dp1061
g49
g533
sg128
S'_EditString1Len'
p1062
sg135
S's.as'
p1063
sasa(dp1064
g94
g1042
sg49
S'_String2Len'
p1065
sg96
g1056
sg98
(lp1066
sg24
Nsg101
(lp1067
I4597
aI6986
asg103
(lp1068
sg111
(lp1069
(dp1070
g49
g533
sg128
S'_EditString2Len'
p1071
sg135
S's.as'
p1072
sasa(dp1073
g94
g1042
sg49
S'_String3Len'
p1074
sg96
g1056
sg98
(lp1075
sg24
Nsg101
(lp1076
I4609
aI7321
asg103
(lp1077
sg111
(lp1078
(dp1079
g49
g533
sg128
S'_EditString3Len'
p1080
sg135
S's.as'
p1081
sasa(dp1082
g94
g646
sg49
S'_StringFrame'
p1083
sg96
g648
sg98
(lp1084
sg24
(I0
I1
I1
I0
I0
tp1085
sg101
g102
sg103
(lp1086
sg111
(lp1087
sa(dp1088
g94
g624
sg49
S'_StringIdxLbl'
p1089
sg96
S'Label'
p1090
sg98
(lp1091
sg24
Nsg101
(lp1092
I3390
aI6077
asg103
(lp1093
sg111
(lp1094
(dp1095
g49
g533
sg128
S'_StringIdx'
p1096
sg135
S's.as'
p1097
sasa(dp1098
g94
g624
sg49
S'_StringIdxTextLbl'
p1099
sg96
g1090
sg98
(lp1100
sg24
Nsg101
(lp1101
I3038
aI6077
asg103
(lp1102
sg111
(lp1103
(dp1104
g49
g144
sg128
S'Current string:'
p1105
sg135
Nsasa(dp1106
g94
g732
sg49
S'_StringList'
p1107
sg96
S'Listbox'
p1108
sg98
(lp1109
(dp1110
g49
g127
sg128
S'nw'
p1111
sa(dp1112
g49
g492
sg128
S'yes'
p1113
sa(dp1114
g49
g495
sg128
S'both'
p1115
sasg24
Nsg101
(lp1116
I3038
aI2584
asg103
(lp1117
(dp1118
g106
S'_on_StringList_select'
p1119
sg108
S''
sg109
S'<<ListboxSelect>>'
p1120
sasg111
(lp1121
sa(dp1122
g94
g692
sg49
S'_StringListLabel'
p1123
sg96
S'Label'
p1124
sg98
(lp1125
(dp1126
g49
g127
sg128
S'n'
sa(dp1127
g49
g495
sg128
S'x'
sasg24
Nsg101
(lp1128
I3184
aI1519
asg103
(lp1129
sg111
(lp1130
(dp1131
g49
g144
sg128
S'String list'
p1132
sg135
Nsasa(dp1133
g94
S'Tkinter'
p1134
sg49
S'_TabHost'
p1135
sg96
S'Frame'
p1136
sg98
(lp1137
(dp1138
g49
g127
sg128
S'nw'
p1139
sa(dp1140
g49
g492
sg128
g661
sa(dp1141
g49
g495
sg128
g1115
sasg24
(I0
I1
I1
I0
tp1142
sg101
g102
sg103
(lp1143
sg111
(lp1144
(dp1145
g49
S'pyclass'
p1146
sg128
S'ttk.Notebook'
p1147
sg135
Nsasa(dp1148
g94
g932
sg49
S'_WorkFrameLabel'
p1149
sg96
S'Label'
p1150
sg98
(lp1151
(dp1152
g49
S'padx'
p1153
sg128
S'n:35'
p1154
sasg24
Nsg101
(lp1155
I5191
aI7859
asg103
(lp1156
sg111
(lp1157
(dp1158
g49
g144
sg128
S'Parameters List'
p1159
sg135
Nsasa(dp1160
g94
g1134
sg49
S'_WorkLabelFrame'
p1161
sg96
g1136
sg98
(lp1162
(dp1163
g49
g127
sg128
g1139
sa(dp1164
g49
g495
sg128
S'x'
sasg24
(I0
I1
I1
I2
tp1165
sg101
g102
sg103
(lp1166
sg111
(lp1167
sasg232
g555
sg33
I1
sasg46
g553
sg48
g553
sg49
g6
sa(dp1168
g32
Nsg33
I1
sg34
(dp1169
g36
S'11.0'
p1170
sg38
(lp1171
S''
aS'#coding=utf8\n\n'
p1172
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p1173
aS'\nfrom enum import Enum\n\nSCREEN_W = 480\nSCREEN_H = 272\n\nTEXT_H = 90\n\nSCENE_MODES   = Enum("normal", "normal_flat", "trial", "rules", "ammo", "ammoname", "ammosummary", "present", "presentname", "debate", "mtb", "climax", "anagram", "dive", "hanron", "menu", "map", "report", "report2", "skill", "skill2", "music", "eventname", "artworkname", "moviename", "theatre", "novel", "help", "other")\nSCENE_SPECIAL = Enum("option", "showopt", "react", "debate", "chatter", "hanron", "checkobj", "checkchar")\nBOX_COLORS    = Enum("yellow", "green", "blue")\nBOX_TYPES     = Enum("normal", "flat", "novel")\n\nCHAPTER_MONOKUMA = 100\nCHAPTER_FREETIME = 101\nCHAPTER_ISLAND   = 102\nCHAPTER_NOVEL    = 103'
p1174
asg7
I0
sg43
I14492031
ssg44
(lp1175
sg46
S'-Main-'
p1176
sg48
g1176
sg49
g4
sa(dp1177
g32
S'-Main-'
p1178
sg33
I1
sg34
(dp1179
g36
S'7.0'
p1180
sg38
(lp1181
S''
aS'#coding=utf8\n\n'
p1182
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p1183
aS'import ttk, PIL, tkMessageBox\n\ngui = ResViewer()'
p1184
asg7
I0
sg43
I2407807
ssg44
(lp1185
(dp1186
S'Requested'
p1187
S'Gui'
p1188
sS'Name'
p1189
S'ResViewer'
p1190
sS'SelectedWidreq'
p1191
S'_TopMenu'
p1192
sS'Text'
p1193
(dp1194
g36
S'68.0'
p1195
sg38
(lp1196
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                  ResViewer                                   #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass ResViewer(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p1197
aS'        #\n        #Your code here\n        #\n'
p1198
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self._Frame5 = Frame(self)\n        self._Frame5.pack(side='top')\n        self._TopMenu = Menu(self._Frame5)\n        self._TopMenu.pack(side='left')\n        self._TopMenu.bind('<Map>',self._on_TopMenu_Map)\n        self._Frame3 = Frame(self)\n        self._Frame3.pack(side='top')\n        self._FileListFrame = Frame(self._Frame3)\n        self._FileListFrame.pack(side='left')\n        self._FileList = Listbox(self._FileListFrame)\n        self._FileList.pack(side='top')\n        self._Frame4 = Frame(self._Frame3)\n        self._Frame4.pack(side='left')\n        self._TabHost = ttk.Notebook(self._Frame4)\n        self._TabHost.pack(side='top')\n        self._Frame1 = Frame(self._Frame4)\n        self._Frame1.pack(side='top')\n        self._TextFrame = Frame(self._TabHost)\n        self._TextFrame.pack(side='left')\n        self._TextEdit = Entry(self._TextFrame)\n        self._TextEdit.pack(side='top')\n        self._CanvasFrame = Frame(self._TabHost)\n        self._CanvasFrame.pack(side='left')\n        self._Canvas = Canvas(self._CanvasFrame)\n        self._Canvas.pack(side='top')\n        self._MiscFrame = Frame(self._TabHost)\n        self._MiscFrame.pack(side='left')\n"
p1199
aS'        #\n        #Your code here\n        #\n        self._TabHost.add(self._TextFrame, text="Text")\n        self._TabHost.add(self._CanvasFrame, text="Graphics")\n        self._TabHost.add(self._MiscFrame, text="Misc")\n'
p1200
aS'    #\n    #Start of event handler methods\n    #\n'
p1201
aS'\n'
aS'\n    def _on_TopMenu_Map(self'
p1202
aS',Event=None):\n        # File menu\n        FileMenu = Menu(self._RootMenu, tearoff=0)\n        FileMenu.add_command(label="Open", command=self.openFile)\n        FileMenu.add_command(label="Save", command=self.saveFile)\n        FileMenu.add_command(label="Exit", command=exit)\n        self._RootMenu.add_cascade(label="File", menu=FileMenu)\n        pass\n    \n    def openFile(self):\n        pass\n    \n    def saveFile(self):\n        pass\n    \n    def exit(self):\n        self.destroy()\n        pass\n'
p1203
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p1204
aS''
asg7
I0
sg43
I12886399
ssS'Lines'
p1205
(lp1206
(lp1207
I4996
aI939
aI0
aa(lp1208
I1531
aI5463
aI1
aa(lp1209
I5762
aI9061
aI0
aa(lp1210
I4082
aI4994
aI1
aa(lp1211
I7215
aI4994
aI1
aasS'BaseClass'
p1212
S'Tkinter.Toplevel'
p1213
sS'Widreqs'
p1214
(lp1215
(dp1216
S'ModuleName'
p1217
S'Tkinter'
p1218
sg1189
g1190
sS'WidgetName'
p1219
S'Toplevel'
p1220
sS'PackOptions'
p1221
(lp1222
sS'Options'
p1223
(lp1224
sS'XY'
p1225
(I0
I0
tp1226
sS'Bindings'
p1227
(lp1228
sS'ID'
p1229
(I0
tp1230
sa(dp1231
g1217
g122
sg1189
S'_Canvas'
p1232
sg1219
S'Canvas'
p1233
sg1221
(lp1234
sg1223
(lp1235
sg1225
(lp1236
I5585
aI3129
asg1227
(lp1237
sg1229
Nsa(dp1238
g1217
g114
sg1189
S'_CanvasFrame'
p1239
sg1219
g116
sg1221
(lp1240
sg1223
(lp1241
sg1225
g1226
sg1227
(lp1242
sg1229
(I0
I1
I1
I0
I1
tp1243
sa(dp1244
g1217
g122
sg1189
S'_FileList'
p1245
sg1219
g148
sg1221
(lp1246
sg1223
(lp1247
sg1225
(lp1248
I687
aI3682
asg1227
(lp1249
sg1229
Nsa(dp1250
g1217
g114
sg1189
S'_FileListFrame'
p1251
sg1219
g116
sg1221
(lp1252
sg1223
(lp1253
sg1225
g1226
sg1227
(lp1254
sg1229
(I0
I1
I0
tp1255
sa(dp1256
g1217
g114
sg1189
S'_Frame1'
p1257
sg1219
g116
sg1221
(lp1258
sg1223
(lp1259
sg1225
g1226
sg1227
(lp1260
sg1229
(I0
I1
I1
I1
tp1261
sa(dp1262
g1217
g114
sg1189
S'_Frame3'
p1263
sg1219
g116
sg1221
(lp1264
sg1223
(lp1265
sg1225
g1226
sg1227
(lp1266
sg1229
(I0
I1
tp1267
sa(dp1268
g1217
g114
sg1189
S'_Frame4'
p1269
sg1219
g116
sg1221
(lp1270
sg1223
(lp1271
sg1225
g1226
sg1227
(lp1272
sg1229
(I0
I1
I1
tp1273
sa(dp1274
g1217
g114
sg1189
S'_Frame5'
p1275
sg1219
g116
sg1221
(lp1276
sg1223
(lp1277
sg1225
g1226
sg1227
(lp1278
sg1229
(I0
I0
tp1279
sa(dp1280
g1217
g114
sg1189
S'_MiscFrame'
p1281
sg1219
g116
sg1221
(lp1282
sg1223
(lp1283
sg1225
g1226
sg1227
(lp1284
sg1229
(I0
I1
I1
I0
I2
tp1285
sa(dp1286
g1217
g114
sg1189
S'_TabHost'
p1287
sg1219
g116
sg1221
(lp1288
sg1223
(lp1289
(dp1290
g1189
S'pyclass'
p1291
sS'Value'
p1292
S'ttk.Notebook'
p1293
sS'Extra'
p1294
Nsasg1225
g1226
sg1227
(lp1295
sg1229
(I0
I1
I1
I0
tp1296
sa(dp1297
g1217
g122
sg1189
S'_TextEdit'
p1298
sg1219
S'Entry'
p1299
sg1221
(lp1300
sg1223
(lp1301
sg1225
(lp1302
I2629
aI3321
asg1227
(lp1303
sg1229
Nsa(dp1304
g1217
g114
sg1189
S'_TextFrame'
p1305
sg1219
g116
sg1221
(lp1306
sg1223
(lp1307
sg1225
g1226
sg1227
(lp1308
sg1229
(I0
I1
I1
I0
I0
tp1309
sa(dp1310
g1217
g122
sg1189
g1192
sg1219
S'Menu'
p1311
sg1221
(lp1312
sg1223
(lp1313
sg1225
(lp1314
I241
aI373
asg1227
(lp1315
(dp1316
S'Handler'
p1317
S'_on_TopMenu_Map'
p1318
sS'Component'
p1319
S''
sS'Event'
p1320
S'<Map>'
p1321
sasg1229
NsasS'Type'
p1322
g1213
sS'OnTab'
p1323
I1
sasg46
g1190
sg48
g1190
sg49
S'ResViewer'
p1324
sa.