(lp1
(dp2
S'ModulePrevious'
p3
S'Common'
p4
sS'ModuleCurrent'
p5
S'SDR2_Translate'
p6
sS'Version'
p7
I1
sS'Geometry'
p8
S'1680x1006+0+620'
p9
sS'ProjectName'
p10
g6
sS'ImportTypes'
p11
(lp12
(S'Pmw'
p13
S'import'
p14
tp15
a(S'Tkinter'
p16
S'from'
p17
tp18
asS'EditorWidths'
p19
((lp20
I131
aI131
a(lp21
I131
aI131
a(lp22
I130
aI130
atp23
sS'ID'
p24
S'Rapyd Project'
p25
sS'ParkingLot'
p26
(dp27
S'SelectedWidreq'
p28
NsS'Widreqs'
p29
(lp30
ssa(dp31
S'PreviousForm'
p32
NsS'OnTab'
p33
I1
sS'-Main-'
p34
(dp35
S'Cursor'
p36
S'50.0'
p37
sS'Text'
p38
(lp39
S''
aV#coding=utf8\u000a\u000a################################################################################\u000a### Copyright © 2012-2013 BlackDragonHunt\u000a### \u000a### This file is part of the Super Duper Script Editor.\u000a### \u000a### The Super Duper Script Editor is free software: you can redistribute it\u000a### and/or modify it under the terms of the GNU General Public License as\u000a### published by the Free Software Foundation, either version 3 of the License,\u000a### or (at your option) any later version.\u000a### \u000a### The Super Duper Script Editor is distributed in the hope that it will be\u000a### useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\u000a### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\u000a### GNU General Public License for more details.\u000a### \u000a### You should have received a copy of the GNU General Public License\u000a### along with the Super Duper Script Editor.\u000a### If not, see <http://www.gnu.org/licenses/>.\u000a################################################################################\u000a\u000a
p40
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p41
aS'\nimport os\nfrom enum import Enum\n\nSPRITE_TYPE = Enum("bustup", "stand")\n\nclass SpriteId():\n  def __init__(\n    self,\n    sprite_type = SPRITE_TYPE.bustup,\n    char_id = -1,\n    sprite_id = -1\n  ):\n    self.sprite_type = sprite_type\n    self.char_id = char_id\n    self.sprite_id = sprite_id\n\ndef get_sprite_file(sprite_id):\n  \n  if sprite_id.char_id == -1 or sprite_id.sprite_id == -1:\n    return None\n  \n  filename = "%s_%02d_%02d.png" % (str(sprite_id.sprite_type), sprite_id.char_id, sprite_id.sprite_id)\n  return filename\n\n### EOF ###'
p42
asg7
I0
sS'Sha'
p43
I14672383
ssS'Forms'
p44
(lp45
sS'VisibleForm'
p46
S'-Main-'
p47
sS'SelectedForm'
p48
g34
sS'Name'
p49
S'Sprite'
p50
sa(dp51
g32
g6
sg33
I1
sg34
(dp52
g36
S'45.34'
p53
sg38
(lp54
S''
aS'#!/usr/bin/python\n#coding=utf8\n\n'
p55
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p56
aS'import ttk, PIL, tkMessageBox\nfrom gim2png import GimFile, GmoFile\nfrom pak_extract import PakFile\nfrom OpCodes import *\nfrom Common import *\nfrom Scene import Scene\nfrom PIL import Image, ImageTk, ImageDraw, ImageFont\nfrom clt import *\nimport re\nfrom Character import *\nfrom LinFile import *\nfrom enum import *\n\ntry:\n    #--------------------------------------------------------------------------#\n    # User code should go after this comment so it is inside the "try".        #\n    #     This allows rpErrorHandler to gain control on an error so it         #\n    #     can properly display a Rapyd-aware error message.                    #\n    #--------------------------------------------------------------------------#\n\n    #Adjust sys.path so we can find other modules of this project\n    import sys\n    if \'.\' not in sys.path:\n        sys.path.append(\'.\')\n    #Put lines to import other modules of this project here\n    import os, re, struct\n    import tkFileDialog\n    \n    # Global options (should migrate those into a file or smth)\n    GameDataLoc = \'./game/\'\n    \n    if __name__ == \'__main__\':\n'
p57
aS"        Root = Tk()\n        import Tkinter\n        Tkinter.CallWrapper = rpErrorHandler.CallWrapper\n        del Tkinter\n        App = SDR2_Translate(Root)\n        App.pack(expand='yes',fill='both')\n"
p58
aS"        Root.geometry('640x480+10+10')\n        Root.title('SDR2 Translate')\n        Root.mainloop()\n        \n    #--------------------------------------------------------------------------#\n    # User code should go above this comment.                                  #\n    #--------------------------------------------------------------------------#\nexcept:\n    rpErrorHandler.RunError()"
p59
asg7
I0
sg43
I16089983
ssg44
(lp60
(dp61
S'Requested'
p62
S'Gui'
p63
sg49
S'Filter'
p64
sg28
S'Filter'
p65
sS'Type'
p66
S'Tkinter.Toplevel'
p67
sS'Lines'
p68
(lp69
(lp70
I4996
aI8761
aI0
aa(lp71
I3381
aI4380
aI1
aa(lp72
I4975
aI4380
aI1
aasg38
(dp73
g36
S'102.0'
p74
sg38
(lp75
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                    Filter                                    #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass Filter(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p76
aS'        #\n        #Your code here\n        #\n'
p77
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self.bind('<Map>',self.on_Filter_Map)\n        self._OpCodesFrame = Frame(self)\n        self._OpCodesFrame.pack(side='top')\n        self._OkFrame = Frame(self)\n        self._OkFrame.pack(side='top')\n        self._CancelBtn = Button(self._OkFrame,text='Cancel')\n        self._CancelBtn.pack(anchor='e',side='right')\n        self._OkBtn = Button(self._OkFrame,text='OK')\n        self._OkBtn.pack(anchor='e',side='right')\n        self._VisibleFrame = Frame(self._OpCodesFrame)\n        self._VisibleFrame.pack(side='left')\n        self._VisibleCodesLbl = Label(self._VisibleFrame,text='Visible OpCodes')\n        self._VisibleCodesLbl.pack(side='top')\n        self._VisibleCodeList = Listbox(self._VisibleFrame)\n        self._VisibleCodeList.pack(side='top')\n        self._VisibleCodeList.bind('<<ListboxSelect>>' \\\n            ,self._on_VisibleCodeList_select)\n        self._BtnFrame = Frame(self._OpCodesFrame)\n        self._BtnFrame.pack(side='left')\n        self._HideBtn = Button(self._BtnFrame,state='disabled',text='=>')\n        self._HideBtn.pack(side='top')\n        self._HideBtn.bind('<ButtonPress-1>',self._on_HideBtn_Button_1)\n        self._ShowBtn = Button(self._BtnFrame,state='disabled',text='<=')\n        self._ShowBtn.pack(side='top')\n        self._ShowBtn.bind('<ButtonPress-1>',self._on_ShowBtn_Button_1)\n        self._HiddenFrame = Frame(self._OpCodesFrame)\n        self._HiddenFrame.pack(side='left')\n        self._HiddenCodeLbl = Label(self._HiddenFrame,text='Hidden OpCodes')\n        self._HiddenCodeLbl.pack(side='top')\n        self._HiddenCodeList = Listbox(self._HiddenFrame)\n        self._HiddenCodeList.pack(side='top')\n        self._HiddenCodeList.bind('<<ListboxSelect>>' \\\n            ,self._on_HiddenCodeList_select)\n"
p78
aS'        #\n        #Your code here\n        #\n        self.Master = Master\n        self.visible_list = {}\n        self.hidden_list = {}\n'
p79
aS'    #\n    #Start of event handler methods\n    #\n'
p80
aS"    def initLists(self, hidden, visible):\n        self.hidden_list = hidden\n        self.visible_list = visible\n        self.populate()\n        pass\n\n    def populate(self):\n        self._VisibleCodeList.delete(0,END)\n        self._HiddenCodeList.delete(0,END)\n        for code,value in self.hidden_list.items():\n            if value != '':\n                self._HiddenCodeList.insert(END, value)\n            else:\n                self._HiddenCodeList.insert(END, 'op_'+code)\n        for code,value in self.visible_list.items():\n            if value != '':\n                self._VisibleCodeList.insert(END, value)\n            else:\n                self._VisibleCodeList.insert(END, 'op_'+code)\n        pass\n"
p81
aS'\n    def _on_HiddenCodeList_select(self'
p82
aS",Event=None):\n        self._ShowBtn['state'] = 'normal'\n        self._HideBtn['state'] = 'disabled'\n        pass\n"
p83
aS'\n    def _on_HideBtn_Button_1(self'
p84
aS',Event=None):\n        # Delete from the Visible list\n        i = int(self._FlowList.curselection()[0])        \n        \n        self._VisibleCodeList.delete(i)\n        # Insert into the Hidden list\n        self._HiddenCodeList.insert\n        pass\n'
p85
aS'\n    def _on_ShowBtn_Button_1(self'
p86
aS',Event=None):\n        pass\n'
p87
aS'\n    def _on_VisibleCodeList_select(self'
p88
aS",Event=None):\n        self._ShowBtn['state'] = 'disabled'\n        self._HideBtn['state'] = 'normal'\n        pass\n"
p89
aS'\n    def on_Filter_Map(self'
p90
aS',Event=None):\n        # Grab the focus\n        self.focus_set()\n        self.grab_set()\n        self.transient(self.Master)\n        pass\n'
p91
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p92
aS''
asg7
I0
sg43
I8776831
ssg29
(lp93
(dp94
S'ModuleName'
p95
S'Tkinter'
p96
sg49
g64
sS'WidgetName'
p97
S'Toplevel'
p98
sS'PackOptions'
p99
(lp100
sg24
(I0
tp101
sS'XY'
p102
(I0
I0
tp103
sS'Bindings'
p104
(lp105
(dp106
S'Handler'
p107
S'on_Filter_Map'
p108
sS'Component'
p109
S''
sS'Event'
p110
S'<Map>'
p111
sasS'Options'
p112
(lp113
sa(dp114
g95
S'Tkinter'
p115
sg49
S'_BtnFrame'
p116
sg97
S'Frame'
p117
sg99
(lp118
sg24
(I0
I0
I1
tp119
sg102
g103
sg104
(lp120
sg112
(lp121
sa(dp122
g95
S'Tkinter'
p123
sg49
S'_CancelBtn'
p124
sg97
S'Button'
p125
sg99
(lp126
(dp127
g49
S'anchor'
p128
sS'Value'
p129
S'e'
sasg24
Nsg102
(lp130
I8136
aI9302
asg104
(lp131
sg112
(lp132
(dp133
g49
S'text'
p134
sg129
S'Cancel'
p135
sS'Extra'
p136
Nsasa(dp137
g95
g123
sg49
S'_HiddenCodeLbl'
p138
sg97
S'Label'
p139
sg99
(lp140
sg24
Nsg102
(lp141
I6960
aI217
asg104
(lp142
sg112
(lp143
(dp144
g49
S'text'
p145
sg129
S'Hidden OpCodes'
p146
sg136
Nsasa(dp147
g95
g123
sg49
S'_HiddenCodeList'
p148
sg97
S'Listbox'
p149
sg99
(lp150
sg24
Nsg102
(lp151
I6846
aI4549
asg104
(lp152
(dp153
g107
S'_on_HiddenCodeList_select'
p154
sg109
S''
sg110
S'<<ListboxSelect>>'
p155
sasg112
(lp156
sa(dp157
g95
g115
sg49
S'_HiddenFrame'
p158
sg97
g117
sg99
(lp159
sg24
(I0
I0
I2
tp160
sg102
g103
sg104
(lp161
sg112
(lp162
sa(dp163
g95
g123
sg49
S'_HideBtn'
p164
sg97
g125
sg99
(lp165
sg24
Nsg102
(lp166
I4004
aI3803
asg104
(lp167
(dp168
g107
S'_on_HideBtn_Button_1'
p169
sg109
S''
sg110
S'<ButtonPress-1>'
p170
sasg112
(lp171
(dp172
g49
g134
sg129
S'=>'
p173
sg136
Nsa(dp174
g49
S'state'
p175
sg129
S'disabled'
p176
sg136
Nsasa(dp177
g95
g123
sg49
S'_OkBtn'
p178
sg97
g125
sg99
(lp179
(dp180
g49
g128
sg129
S'e'
sasg24
Nsg102
(lp181
I7016
aI9302
asg104
(lp182
sg112
(lp183
(dp184
g49
g134
sg129
S'OK'
p185
sg136
Nsasa(dp186
g95
g115
sg49
S'_OkFrame'
p187
sg97
g117
sg99
(lp188
sg24
(I0
I1
tp189
sg102
g103
sg104
(lp190
sg112
(lp191
sa(dp192
g95
g115
sg49
S'_OpCodesFrame'
p193
sg97
g117
sg99
(lp194
sg24
(I0
I0
tp195
sg102
g103
sg104
(lp196
sg112
(lp197
sa(dp198
g95
g123
sg49
S'_ShowBtn'
p199
sg97
g125
sg99
(lp200
sg24
Nsg102
(lp201
I3997
aI5102
asg104
(lp202
(dp203
g107
S'_on_ShowBtn_Button_1'
p204
sg109
S''
sg110
S'<ButtonPress-1>'
p205
sasg112
(lp206
(dp207
g49
g134
sg129
S'<='
p208
sg136
Nsa(dp209
g49
g175
sg129
g176
sg136
Nsasa(dp210
g95
g123
sg49
S'_VisibleCodeList'
p211
sg97
g149
sg99
(lp212
sg24
Nsg102
(lp213
I2112
aI4356
asg104
(lp214
(dp215
g107
S'_on_VisibleCodeList_select'
p216
sg109
S''
sg110
S'<<ListboxSelect>>'
p217
sasg112
(lp218
sa(dp219
g95
g123
sg49
S'_VisibleCodesLbl'
p220
sg97
g139
sg99
(lp221
sg24
Nsg102
(lp222
I1836
aI409
asg104
(lp223
sg112
(lp224
(dp225
g49
g145
sg129
S'Visible OpCodes'
p226
sg136
Nsasa(dp227
g95
g115
sg49
S'_VisibleFrame'
p228
sg97
g117
sg99
(lp229
sg24
(I0
I0
I0
tp230
sg102
g103
sg104
(lp231
sg112
(lp232
sasS'BaseClass'
p233
g67
sg33
I1
sa(dp234
S'Requested'
p235
S'Gui'
p236
sS'Type'
p237
S'Tkinter.Toplevel'
p238
sS'Name'
p239
S'GameData'
p240
sS'SelectedWidreq'
p241
NsS'Text'
p242
(dp243
g36
S'37.0'
p244
sg38
(lp245
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                   GameData                                   #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass GameData(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p246
aS'        #\n        #Your code here\n        #\n'
p247
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self.GameDataLoc = StringVar()\n        self._Frame3 = Frame(self)\n        self._Frame3.pack(side='top')\n        self._GameDataLbl = Label(self._Frame3,text='Game Data Options')\n        self._GameDataLbl.pack(side='top')\n        self._Frame2 = Frame(self)\n        self._Frame2.pack(side='top')\n        self._PathLbl = Label(self._Frame2,text='Path to Game Data')\n        self._PathLbl.pack(side='left')\n        self._DataLoc = Entry(self._Frame2,textvariable=self.GameDataLoc)\n        self._DataLoc.pack(side='left')\n        self._BrowseLocBtn = Button(self._Frame2,text='Browse')\n        self._BrowseLocBtn.pack(side='left')\n        self._BrowseLocBtn.bind('<ButtonPress-1>' \\\n            ,self._on_BrowseLocBtn_Button_1)\n        self._Frame1 = Frame(self)\n        self._Frame1.pack(side='top')\n        self._Label1 = Label(self._Frame1)\n        self._Label1.pack(side='left')\n        self._Entry2 = Entry(self._Frame1)\n        self._Entry2.pack(side='left')\n"
p248
aS'        #\n        #Your code here\n        #\n        self.GameDataLoc.set(GameDataLoc)\n'
p249
aS'    #\n    #Start of event handler methods\n    #\n'
p250
aS'\n'
aS'\n    def _on_BrowseLocBtn_Button_1(self'
p251
aS",Event=None):\n        fn = tkFileDialog.askdirectory('.',False,'Choose Game Data directory',Trues)\n        pass\n"
p252
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p253
aS''
asg7
I0
sg43
I15619967
ssS'Lines'
p254
(lp255
(lp256
I4996
aI1528
aI0
aa(lp257
I4996
aI421
aI0
aasS'Widreqs'
p258
(lp259
(dp260
S'ModuleName'
p261
S'Tkinter'
p262
sg239
g240
sS'WidgetName'
p263
S'Toplevel'
p264
sS'PackOptions'
p265
(lp266
sS'ID'
p267
(I0
tp268
sS'XY'
p269
(I0
I0
tp270
sS'Bindings'
p271
(lp272
sS'Options'
p273
(lp274
sa(dp275
g261
S'Tkinter'
p276
sg239
S'_BrowseLocBtn'
p277
sg263
S'Button'
p278
sg265
(lp279
sg267
Nsg269
(lp280
I2544
aI818
asg271
(lp281
(dp282
S'Handler'
p283
S'_on_BrowseLocBtn_Button_1'
p284
sS'Component'
p285
S''
sS'Event'
p286
S'<ButtonPress-1>'
p287
sasg273
(lp288
(dp289
g239
S'text'
p290
sS'Value'
p291
S'Browse'
p292
sS'Extra'
p293
Nsasa(dp294
g261
g276
sg239
S'_DataLoc'
p295
sg263
S'Entry'
p296
sg265
(lp297
sg267
Nsg269
(lp298
I1963
aI782
asg271
(lp299
sg273
(lp300
(dp301
g239
S'textvariable'
p302
sg291
S'GameDataLoc'
p303
sg293
S's.as'
p304
sasa(dp305
g261
g276
sg239
S'_Entry2'
p306
sg263
g296
sg265
(lp307
sg267
Nsg269
(lp308
I1963
aI2142
asg271
(lp309
sg273
(lp310
sa(dp311
g261
S'Tkinter'
p312
sg239
S'_Frame1'
p313
sg263
S'Frame'
p314
sg265
(lp315
sg267
(I0
I2
tp316
sg269
g270
sg271
(lp317
sg273
(lp318
sa(dp319
g261
g312
sg239
S'_Frame2'
p320
sg263
g314
sg265
(lp321
sg267
(I0
I1
tp322
sg269
g270
sg271
(lp323
sg273
(lp324
sa(dp325
g261
g312
sg239
S'_Frame3'
p326
sg263
g314
sg265
(lp327
sg267
(I0
I0
tp328
sg269
g270
sg271
(lp329
sg273
(lp330
sa(dp331
g261
g276
sg239
S'_GameDataLbl'
p332
sg263
S'Label'
p333
sg265
(lp334
sg267
Nsg269
(lp335
I4380
aI181
asg271
(lp336
sg273
(lp337
(dp338
g239
S'text'
p339
sg291
S'Game Data Options'
p340
sg293
Nsasa(dp341
g261
g276
sg239
S'_Label1'
p342
sg263
g333
sg265
(lp343
sg267
Nsg269
(lp344
I1233
aI2142
asg271
(lp345
sg273
(lp346
sa(dp347
g261
g276
sg239
S'_PathLbl'
p348
sg263
g333
sg265
(lp349
sg267
Nsg269
(lp350
I1226
aI782
asg271
(lp351
sg273
(lp352
(dp353
g239
g339
sg291
S'Path to Game Data'
p354
sg293
NsasasS'BaseClass'
p355
g238
sS'OnTab'
p356
I1
sa(dp357
g235
g242
sg237
S'Tkinter.Toplevel'
p358
sg239
S'OpCodeCreator'
p359
sg241
S'_CancelBtn'
p360
sg242
(dp361
g36
S'69.0'
p362
sg38
(lp363
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                OpCodeCreator                                 #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass OpCodeCreator(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p364
aS'        #\n        #Your code here\n        #\n        self.selected_opcode = 0\n        self.selected_par = 0\n        self.opcode_list = []\n        self.par_list = []\n        self.Master = Master\n'
p365
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self.bind('<Map>',self.on_OpCodeCreator_Map)\n        self._ParValue = StringVar()\n        self._ParName = StringVar()\n        self._HeaderFrame = Frame(self)\n        self._HeaderFrame.pack(side='top')\n        self._TopLabel = Label(self._HeaderFrame\n            ,text='Define the opcode and press OK')\n        self._TopLabel.pack(side='top')\n        self._ListFrame = Frame(self)\n        self._ListFrame.pack(side='top')\n        self._OpCodeList = Listbox(self._ListFrame)\n        self._OpCodeList.pack(expand='yes',fill='both',side='left')\n        self._OpCodeList.bind('<<ListboxSelect>>',self._on_OpCodeList_select)\n        self._OpCodeList.bind('<Map>',self._on_OpCodeList_Map)\n        self._ParBox = Listbox(self._ListFrame)\n        self._ParBox.pack(side='left')\n        self._ParBox.bind('<<ListboxSelect>>',self._on_ParBox_select)\n        self._EntryFrame = Frame(self)\n        self._EntryFrame.pack(side='top')\n        self._ParNameLbl = Label(self._EntryFrame,textvariable=self._ParName)\n        self._ParNameLbl.pack(side='left')\n        self._ParEntry = Entry(self._EntryFrame,textvariable=self._ParValue)\n        self._ParEntry.pack(side='left')\n        self._AddParBtn = Button(self._EntryFrame,text='Set')\n        self._AddParBtn.pack(side='left')\n        self._AddParBtn.bind('<ButtonPress-1>',self._on_AddParBtn_Button_1)\n        self._SubmitFrame = Frame(self)\n        self._SubmitFrame.pack(expand='yes',fill='x',side='top')\n        self._CancelBtn = Button(self._SubmitFrame,text='Cancel')\n        self._CancelBtn.pack(anchor='e',side='right')\n        self._CancelBtn.bind('<ButtonPress-1>',self._on_CancelBtn_Button_1)\n        self._OkBtn = Button(self._SubmitFrame,text='OK')\n        self._OkBtn.pack(anchor='e',side='right')\n        self._OkBtn.bind('<ButtonPress-1>',self._on_OkBtn_Button_1)\n"
p366
aS'        #\n        #Your code here\n        #\n'
p367
aS'    #\n    #Start of event handler methods\n    #\n'
p368
aS'\n'
aS'\n    def _on_AddParBtn_Button_1(self'
p369
aS',Event=None):\n        # Save current parameter to the list\n        i = self.selected_par  \n        self.par_list[i] = (self.par_list[i][0], int(self._ParValue.get()))\n        # Re-populate parameters listbox\n        self._ParBox_populate()\n        pass\n'
p370
aS'\n    def _on_CancelBtn_Button_1(self'
p371
aS',Event=None):\n        self.destroy()\n        pass\n'
p372
aS'\n    def _on_OkBtn_Button_1(self'
p373
aS',Event=None):\n        question = "You really sure you want to add the new op?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            # Insert new value into the master\'s lists\n            i = self.Master.current_act_idx+1\n            self.Master.Lin.opcode_list.insert(i, self.selected_opcode)\n            self.Master.Lin.action_list.insert(i, OP_FUNCTIONS[self.selected_opcode])\n            self.Master.Lin.pars_list.insert(i, self.par_list)\n            # Refresh master\'s listboxes\n            self.Master.populateLinLists()\n            # Exit\n            self.destroy()\n        pass\n'
p374
aS'\n    def _on_OpCodeList_Map(self'
p375
aS',Event=None):\n        for code,name in OP_FUNCTIONS.iteritems():\n            if not name:\n                self._OpCodeList.insert(END, "op_%d" % code)\n            else:\n                self._OpCodeList.insert(END, name)\n            # We need to store the opcodes, otherwise we won\'t have 2-sided relation\n            self.opcode_list.append(code)\n        pass\n    \n'
p376
aS'\n    def _on_OpCodeList_select(self'
p377
aS',Event=None):\n        i = int(self._OpCodeList.curselection()[0])\n        self.selected_opcode = self.opcode_list[i]\n        # Add the parameters to the list\n        self.par_list = []\n        for par in OP_PARAMS[self.selected_opcode]:\n            self.par_list.append((par[0], -1))\n        # Display pars in the listbox\n        self._ParBox_populate()\n        pass\n        \n    def _ParBox_populate(self):\n        self._ParBox.delete(0,END)\n        for par in self.par_list:\n            self._ParBox.insert(END, par)\n        pass\n    \n'
p378
aS'\n    def _on_ParBox_select(self'
p379
aS',Event=None):\n        self.selected_par = int(self._ParBox.curselection()[0])  \n        i = self.selected_par      \n        # Put the current name and value to the label and editbox\n        self._ParName.set(self.par_list[i][0])\n        self._ParValue.set(self.par_list[i][1])\n        pass\n'
p380
aS'\n    def on_OpCodeCreator_Map(self'
p381
aS',Event=None):\n        # Grab the focus\n        self.focus_set()\n        self.grab_set()\n        self.transient(self.Master)\n        pass\n'
p382
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p383
aS''
asg7
I0
sg43
I14834047
ssg254
(lp384
(lp385
I4996
aI626
aI0
aa(lp386
I4996
aI6919
aI0
aa(lp387
I4996
aI8941
aI0
aasg258
(lp388
(dp389
g261
S'Tkinter'
p390
sg239
g359
sg263
S'Toplevel'
p391
sg265
(lp392
sg267
(I0
tp393
sg269
g270
sg271
(lp394
(dp395
g283
S'on_OpCodeCreator_Map'
p396
sg285
S''
sg286
S'<Map>'
p397
sasg273
(lp398
sa(dp399
g261
S'Tkinter'
p400
sg239
S'_AddParBtn'
p401
sg263
S'Button'
p402
sg265
(lp403
sg267
Nsg269
(lp404
I4465
aI7858
asg271
(lp405
(dp406
g283
S'_on_AddParBtn_Button_1'
p407
sg285
S''
sg286
S'<ButtonPress-1>'
p408
sasg273
(lp409
(dp410
g239
g290
sg291
S'Set'
p411
sg293
Nsasa(dp412
g261
g400
sg239
g360
sg263
g402
sg265
(lp413
(dp414
g239
S'anchor'
p415
sg291
S'e'
sasg267
Nsg269
(lp416
I8094
aI9615
asg271
(lp417
(dp418
g283
S'_on_CancelBtn_Button_1'
p419
sg285
S''
sg286
S'<ButtonPress-1>'
p420
sasg273
(lp421
(dp422
g239
g290
sg291
S'Cancel'
p423
sg293
Nsasa(dp424
g261
S'Tkinter'
p425
sg239
S'_EntryFrame'
p426
sg263
S'Frame'
p427
sg265
(lp428
sg267
(I0
I2
tp429
sg269
g270
sg271
(lp430
sg273
(lp431
sa(dp432
g261
g425
sg239
S'_HeaderFrame'
p433
sg263
g427
sg265
(lp434
sg267
(I0
I0
tp435
sg269
g270
sg271
(lp436
sg273
(lp437
sa(dp438
g261
g425
sg239
S'_ListFrame'
p439
sg263
g427
sg265
(lp440
sg267
(I0
I1
tp441
sg269
g270
sg271
(lp442
sg273
(lp443
sa(dp444
g261
g400
sg239
S'_OkBtn'
p445
sg263
g402
sg265
(lp446
(dp447
g239
g415
sg291
S'e'
sasg267
Nsg269
(lp448
I7328
aI9531
asg271
(lp449
(dp450
g283
S'_on_OkBtn_Button_1'
p451
sg285
S''
sg286
S'<ButtonPress-1>'
p452
sasg273
(lp453
(dp454
g239
g290
sg291
S'OK'
p455
sg293
Nsasa(dp456
g261
g400
sg239
S'_OpCodeList'
p457
sg263
S'Listbox'
p458
sg265
(lp459
(dp460
g239
S'expand'
p461
sg291
S'yes'
p462
sa(dp463
g239
S'fill'
p464
sg291
S'both'
p465
sasg267
Nsg269
(lp466
I1665
aI3105
asg271
(lp467
(dp468
g283
S'_on_OpCodeList_select'
p469
sg285
S''
sg286
S'<<ListboxSelect>>'
p470
sa(dp471
g283
S'_on_OpCodeList_Map'
p472
sg285
S''
sg286
S'<Map>'
p473
sasg273
(lp474
sa(dp475
g261
g400
sg239
S'_ParBox'
p476
sg263
g458
sg265
(lp477
sg267
Nsg269
(lp478
I5400
aI3105
asg271
(lp479
(dp480
g283
S'_on_ParBox_select'
p481
sg285
S''
sg286
S'<<ListboxSelect>>'
p482
sasg273
(lp483
sa(dp484
g261
g400
sg239
S'_ParEntry'
p485
sg263
S'Entry'
p486
sg265
(lp487
sg267
Nsg269
(lp488
I3863
aI7846
asg271
(lp489
sg273
(lp490
(dp491
g239
g302
sg291
S'_ParValue'
p492
sg293
S's.as'
p493
sasa(dp494
g261
g400
sg239
S'_ParNameLbl'
p495
sg263
S'Label'
p496
sg265
(lp497
sg267
Nsg269
(lp498
I3345
aI7774
asg271
(lp499
sg273
(lp500
(dp501
g239
S'textvariable'
p502
sg291
S'_ParName'
p503
sg293
S's.as'
p504
sasa(dp505
g261
g425
sg239
S'_SubmitFrame'
p506
sg263
g427
sg265
(lp507
(dp508
g239
g461
sg291
g462
sa(dp509
g239
g464
sg291
S'x'
sasg267
(I0
I3
tp510
sg269
g270
sg271
(lp511
sg273
(lp512
sa(dp513
g261
g400
sg239
S'_TopLabel'
p514
sg263
g496
sg265
(lp515
sg267
Nsg269
(lp516
I4607
aI205
asg271
(lp517
sg273
(lp518
(dp519
g239
g339
sg291
S'Define the opcode and press OK'
p520
sg293
Nsasasg355
g358
sg356
I1
sa(dp521
g62
g38
sg49
g6
sg28
g6
sg66
S'Tkinter.Frame'
p522
sg68
(lp523
(lp524
I4996
aI529
aI0
aa(lp525
I4996
aI1179
aI0
aa(lp526
I2558
aI5584
aI1
aa(lp527
I1276
aI9350
aI0
aa(lp528
I1276
aI1685
aI0
aa(lp529
I6279
aI7497
aI0
aa(lp530
I6279
aI8267
aI0
aa(lp531
I6279
aI6438
aI0
aa(lp532
I5294
aI3803
aI1
aa(lp533
I7746
aI3803
aI1
aa(lp534
I4352
aI6968
aI1
aa(lp535
I5719
aI6968
aI1
aa(lp536
I5946
aI9134
aI1
aa(lp537
I7973
aI9458
aI0
aasg38
(dp538
g36
S'596.0'
p539
sg38
(lp540
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                SDR2_Translate                                #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass SDR2_Translate(Frame):\n    def __init__(self,Master=None,*pos,**kw):\n'
p541
aS"        #\n        #Your code here\n        #\n        self.curPath = '.'\n        self.current_str_idx = 0\n        self.current_act_idx = 0\n        self.actionFlow = []\n        self.strange_byte = ''\n        self.currentImage = ''\n        self.scene = Scene()\n        self.charNames = getCharNames(GameDataLoc)\n        self.Lin = LinFile()\n        self.mode = ''\n        self.pak_level = 0\n        self.visible_opcodes = OP_FUNCTIONS\n        self.hidden_opcodes = {}\n"
p542
aS"\n        apply(Frame.__init__,(self,Master),kw)\n        self._CurAction = StringVar()\n        self._CurrentEditString1 = StringVar()\n        self._CurrentEditString2 = StringVar()\n        self._CurrentEditString3 = StringVar()\n        self._FileNameText = StringVar()\n        self._Filtered = StringVar()\n        self._OpCodeEditText = StringVar()\n        self._ParEditText = StringVar()\n        self._ParLabelText = StringVar()\n        self._EditString1Len = StringVar()\n        self._EditString2Len = StringVar()\n        self._EditString3Len = StringVar()\n        self._MenuFrame = Frame(self)\n        self._MenuFrame.pack(anchor='nw',fill='both',side='top')\n        self._RootMenu = Menu(self._MenuFrame,type='menubar')\n        self._RootMenu.pack(anchor='nw',expand='yes',fill='both',side='left')\n        self._RootMenu.bind('<Map>',self._on_RootMenu_Map)\n        self._FileNameFrame = Frame(self)\n        self._FileNameFrame.pack(fill='x',side='top')\n        self._FileName = Label(self._FileNameFrame\n            ,textvariable=self._FileNameText)\n        self._FileName.pack(side='top')\n        self._Frame2 = Frame(self)\n        self._Frame2.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self._OpFrame = Frame(self._Frame2)\n        self._OpFrame.pack(anchor='nw',fill='y',ipadx='25',side='left')\n        self._ContentFrame = Frame(self._Frame2)\n        self._ContentFrame.pack(anchor='nw',expand='yes',fill='both',side='left')\n        self._Frame1 = Frame(self._OpFrame)\n        self._Frame1.pack(fill='both',side='top')\n        self._FlowFrameLabel = Label(self._Frame1,text='Actions List')\n        self._FlowFrameLabel.pack(anchor='nw',fill='x',side='left')\n        self._FilterFlowList = Checkbutton(self._Frame1\n            ,command=self._on_FilterFlowList_check,text='Filtered'\n            ,variable=self._Filtered)\n        self._FilterFlowList.pack(anchor='ne',side='right')\n        self._FlowFrame = Frame(self._OpFrame)\n        self._FlowFrame.pack(expand='yes',fill='both',side='top')\n        self._FlowList = Listbox(self._FlowFrame)\n        self._FlowList.pack(expand='yes',fill='both',side='top')\n        self._FlowList.bind('<<ListboxSelect>>',self._on_FlowList_select)\n        self._Frame3 = Frame(self._OpFrame)\n        self._Frame3.pack(fill='x',side='top')\n        self._AddOpBtn = Button(self._Frame3,height='3',text='ADD OP')\n        self._AddOpBtn.pack(expand='yes',fill='both',side='left')\n        self._AddOpBtn.bind('<ButtonPress-1>',self._on_AddOpBtn_Button_1)\n        self._DelOpBtn = Button(self._Frame3,text='DELETE OP')\n        self._DelOpBtn.pack(expand='yes',fill='both',side='left')\n        self._DelOpBtn.bind('<ButtonPress-1>',self._on_DelOpBtn_Button_1)\n        self._TabHost = ttk.Notebook(self._ContentFrame)\n        self._TabHost.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self._Frame9 = Frame(self._ContentFrame)\n        self._Frame9.pack(fill='x',side='top')\n        self._WorkLabelFrame = Frame(self._ContentFrame)\n        self._WorkLabelFrame.pack(anchor='nw',fill='x',side='top')\n        self._WorkFrameLabel = Label(self._WorkLabelFrame,text='Parameters List')\n        self._WorkFrameLabel.pack(padx='35',side='left')\n        self._CurActionLabel = Label(self._WorkLabelFrame\n            ,textvariable=self._CurAction)\n        self._CurActionLabel.pack(side='left')\n        self._ParFrame = Frame(self._ContentFrame)\n        self._ParFrame.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self._StringFrame = Frame(self._TabHost)\n        self._StringFrame.pack(side='left')\n        self._StringListLabel = Label(self._StringFrame,text='String list')\n        self._StringListLabel.pack(anchor='n',fill='x',side='top')\n        self._StringList = Listbox(self._StringFrame)\n        self._StringList.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self._StringList.bind('<<ListboxSelect>>',self._on_StringList_select)\n        self._MiscFrame = Frame(self._TabHost)\n        self._MiscFrame.pack(side='left')\n        self._MiscList = Listbox(self._MiscFrame)\n        self._MiscList.pack(side='top')\n        self._CanvasFrame = Frame(self._TabHost)\n        self._CanvasFrame.pack(side='left')\n        self._ScreenView = Canvas(self._CanvasFrame,background='#000000'\n            ,height=SCREEN_H,width=SCREEN_W)\n        self._ScreenView.pack(expand='yes',side='top')\n        self._Frame10 = Frame(self._Frame9)\n        self._Frame10.pack(side='left')\n        self._EditString1 = Entry(self._Frame10\n            ,textvariable=self._CurrentEditString1,width='50')\n        self._EditString1.pack(anchor='s',side='top')\n        self._EditString3 = Entry(self._Frame10\n            ,textvariable=self._CurrentEditString3,width='50')\n        self._EditString3.pack(side='bottom')\n        self._EditString2 = Entry(self._Frame10\n            ,textvariable=self._CurrentEditString2,width='50')\n        self._EditString2.pack(side='bottom')\n        self._Frame12 = Frame(self._Frame9)\n        self._Frame12.pack(side='left')\n        self._String1Len = Label(self._Frame12,textvariable=self._EditString1Len)\n        self._String1Len.pack(side='top')\n        self._String2Len = Label(self._Frame12,textvariable=self._EditString2Len)\n        self._String2Len.pack(side='top')\n        self._String3Len = Label(self._Frame12,textvariable=self._EditString3Len)\n        self._String3Len.pack(side='bottom')\n        self._Frame11 = Frame(self._Frame9)\n        self._Frame11.pack(anchor='nw',fill='x',side='left')\n        self._SetStringBtn = Button(self._Frame11,text='SET STRING')\n        self._SetStringBtn.pack(side='left')\n        self._SetStringBtn.bind('<ButtonPress-1>' \\\n            ,self._on_SetStringBtn_Button_1)\n        self._Frame4 = Frame(self._ParFrame)\n        self._Frame4.pack(expand='yes',fill='both',side='left')\n        self._ParList = Listbox(self._Frame4)\n        self._ParList.pack(expand='yes',fill='both',side='left')\n        self._Frame5 = Frame(self._ParFrame)\n        self._Frame5.pack(expand='yes',fill='x',side='left')\n        self._ParListFrame = Frame(self._Frame5)\n        self._ParListFrame.pack(expand='yes',fill='x',side='top')\n        self._OpCodeLabel = Label(self._ParListFrame,text='Op Code',width='10')\n        self._OpCodeLabel.pack(anchor='nw',side='left')\n        self._OpCodeEdit = Entry(self._ParListFrame\n            ,textvariable=self._OpCodeEditText)\n        self._OpCodeEdit.pack(anchor='nw',side='left')\n        self._ParEditFrame = Frame(self._Frame5)\n        self._ParEditFrame.pack(expand='yes',fill='x',side='top')\n        self._ParLabel = Label(self._ParEditFrame\n            ,textvariable=self._ParLabelText,width='10')\n        self._ParLabel.pack(anchor='nw',side='left')\n        self._ParEdit = Entry(self._ParEditFrame,textvariable=self._ParEditText)\n        self._ParEdit.pack(anchor='nw',side='left')\n        self._Button1 = Button(self._ParEditFrame)\n        self._Button1.pack(anchor='nw',side='left')\n"
p543
aS'        #\n        #Your code here\n        #\n        self._FileNameText.set(\'Select the file\')\n        self._ParLabelText.set(\'Par name\')\n        self._CurrentEditString1.trace(\'w\', self._on_EditString1_modified)\n        self._CurrentEditString2.trace(\'w\', self._on_EditString2_modified)\n        self._CurrentEditString3.trace(\'w\', self._on_EditString3_modified)\n        # Tabs\n        self._TabHost.add(self._CanvasFrame, text="Canvas")\n        self._TabHost.add(self._StringFrame, text="Strings")\n        self._TabHost.add(self._MiscFrame, text="Misc")\n        # Filter\n        self._FilterFlowList.deselect()\n'
p544
aS'    #\n    #Start of event handler methods\n    #\n'
p545
aS"    def _on_EditString1_modified(self,*args):\n        # We don't need to count the <CLT>s\n        string = self._CurrentEditString1.get()\n        string = re.sub(r'<CLT.*?>', '', string)\n        self._EditString1Len.set('Chars left: %d' % (30 - len(string)))\n        pass\n\n    def _on_EditString2_modified(self,*args):\n        # We don't need to count the <CLT>s\n        string = self._CurrentEditString2.get()\n        string = re.sub(r'<CLT.*?>', '', string)\n        self._EditString2Len.set('Chars left: %d' % (30 - len(string)))\n        pass\n\n    def _on_EditString3_modified(self,*args):\n        # We don't need to count the <CLT>s\n        string = self._CurrentEditString3.get()\n        string = re.sub(r'<CLT.*?>', '', string)\n        self._EditString3Len.set('Chars left: %d' % (30 - len(string)))\n        pass\n"
p546
aS'\n    def _on_AddOpBtn_Button_1(self'
p547
aS',Event=None):\n        question = "This action will ADD a new Operation into the script. Continue?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            # Here we should open another window to add op\n            w = OpCodeCreator(self)\n            # Wait for the window to close\n            w.wait_window(w)\n            pass\n        pass\n'
p548
aS'\n    def _on_DelOpBtn_Button_1(self'
p549
aS',Event=None):\n        question = "This action will DELETE the Operation from the script. Continue?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            i = int(self._FlowList.curselection()[0])\n            self._FlowList.delete(i)\n            del self.Lin.action_list[i]\n        pass\n'
p550
aS'\n    def _on_FilterFlowList_check(self'
p551
aS",Event=None):\n        if self._Filtered.get() == '1':\n            # Create a filter window\n            flt = Filter(self)\n            # Populate the window\n            flt.initLists(self.hidden_opcodes, self.visible_opcodes)\n            # Wait for the window to close\n            flt.wait_window(flt)\n            pass\n        else:\n            pass\n        pass\n"
p552
aS'\n    def _on_FlowList_select(self'
p553
aS',Event=None):\n        self.current_act_idx = int(self._FlowList.curselection()[0])\n        if self.mode == \'.lin\':\n            self._on_FlowList_select_Lin()\n        if self.mode == \'.pak\':\n            self._on_FlowList_select_Pak()\n        pass\n    \n    def _on_FlowList_select_Lin(self):\n        if self._FlowList.size() > 0:\n            i = int(self._FlowList.curselection()[0])\n            action = self.Lin.action_list[i]\n            pars = self.Lin.pars_list[i]\n            code = self.Lin.opcode_list[i]\n            # Clear everything related to pars in GUI\n            self._OpCodeEditText.set(\'\')\n            self._ParEditText.set(\'\')\n            self._ParLabelText.set(\'Par name\')\n            self._ParList.delete(0,END)\n            # Put all parameters to the GUI\n            self._OpCodeEditText.set(code)\n            for par in pars:\n                self._ParList.insert(END, "%s:\\t %d" % (par[0],par[1]) )\n            # What to do for different opcodes\n            # Show sprite\n            if code == WRD_SPRITE:\n                self.showSprite(pars)\n            # Show flash\n            if code == WRD_FLASH:\n                self.showFlash(pars)\n            # Text highlighting\n            if code == WRD_CLT:\n                self.scene.text_clt = True\n            # Get string idx\n            if code == WRD_GET_LINE_IDX:\n                self._StringList.select_set(pars[0][1])\n                self._on_StringList_select()\n                self.scene.text = self._StringList.get(pars[0][1])\n            # Print next string from FIFO\n            if code == WRD_PRINT_LINE:\n                self.printLine()\n            # If waiting for input (go to the next line waiting)\n            if code == WRD_WAIT_INPUT:\n                self.scene.text = \'\'\n            # Set speaker\n            if code == WRD_SPEAKER:\n                self.scene.speaker = self.charNames[pars[0][1]]\n            # Go to the next script\n            if code == WRD_GOTO_SCRIPT:\n                question = \'Go to the next script: e%02d_%03d_%03d.lin?\' % (pars[0][1], pars[1][1], pars[2][1])\n                loadNext = tkMessageBox.askyesno("Go to the next script", question)\n                if loadNext:\n                    # Clear canvas\n                    self._ScreenView.delete(ALL)\n                    self.scene.flash = []\n                    # Clear lists\n                    self._FlowList.delete(0,END)\n                    self._StringList.delete(0,END)\n                    # Load next file\n                    next_fn = os.path.join(GameDataLoc, \'jp\', \'script\', \'e%02d_%03d_%03d.lin\' % (pars[0][1], pars[1][1], pars[2][1]))\n                    self.decodeFile(next_fn)\n        pass\n    \n    def _on_FlowList_select_Pak(self):\n        if self._FlowList.size() > 0:\n            # Now working not with actions, but with files\n            i = int(self._FlowList.curselection()[0])\n            # If we\'re returning from sub-pak\n            if self._FlowList.get(i)[0] == \'..\':    \n                self._FlowList.delete(0,END)\n                for f in self.Pak.files:\n                    self._FlowList.insert(END, "%s" % f[0])                \n                self.pak_level -= 1\n                pass\n            # If not - looking at the current pak file and level\n            if self.pak_level == 0:\n                file = self.Pak.files[i]\n            else:\n                file = self.internalPak.files[i]\n            # Checking the file type\n            if \'.gim\' in file[0]:\n                GimImage = GimFile()\n                GimImage.fromData(file[1])\n                GimImage.getImage()\n                pilImage = PIL.Image.new("RGBA", (GimImage.width, GimImage.height))\n                pilImage.putdata(GimImage.image)\n                self.scene.sprite = ImageTk.PhotoImage(pilImage)\n                POS_X = (2*SCREEN_W - GimImage.width)/2\n                POS_Y = (2*SCREEN_H - GimImage.height)/2\n                imagesprite = self._ScreenView.create_image(POS_X,POS_Y,image=self.scene.sprite, tag = \'sprite\')                \n            elif \'.gmo\' in file[0]:\n                GmoImage = GmoFile()\n                GmoImage.fromData(file[1])\n                GmoImage.extractGim()\n                GmoImage.gim.getImage()\n                pilImage = PIL.Image.new("RGBA", (GmiImage.gim.width, GmoImage.gim.height))\n                pilImage.putdata(GmoImage.gim.image)\n                self.scene.sprite = ImageTk.PhotoImage(pilImage)\n                POS_X = (2*SCREEN_W - GmoImage.gim.width)/2\n                POS_Y = (2*SCREEN_H - GmoImage.gim.height)/2\n                imagesprite = self._ScreenView.create_image(POS_X,POS_Y,image=self.scene.sprite, tag = \'sprite\')                \n            elif \'.txt\' in file[0]:\n                self.scene.text = file[1].decode(\'utf16\')\n                self._CurrentEditString1.set(self.scene.text)\n            elif \'.dat\' in file[0]:\n                self.pak_level += 1\n                # We\'ll use it as a directory\n                self._FlowList.delete(0,END)\n                # Inserting the \'go back\' value\n                self._FlowList.insert(END, \'..\')\n                # Now unpack the file\n                self.internalPak = PakFile()\n                self.internalPak.fromData(file[1])\n                for f in self.internalPak.files:\n                    self._FlowList.insert(END, "%s" % f[0])\n        pass\n        \n    def showSprite(self, pars):\n        fn = os.path.join(GameDataLoc,\'all\',\'cg\', \'bustup_%02d_%02d.gim\' % (pars[1][1], pars[2][1]))\n        GimImage = GimFile()\n        GimImage.openGim(fn)\n        GimImage.getImage()\n        pilImage = PIL.Image.new("RGBA", (GimImage.width, GimImage.height))\n        pilImage.putdata(GimImage.image)\n        self.scene.sprite = ImageTk.PhotoImage(pilImage)\n        POS_X = (2*SCREEN_W - GimImage.width)/2\n        POS_Y = (2*SCREEN_H - GimImage.height)/2\n        imagesprite = self._ScreenView.create_image(POS_X,POS_Y,image=self.scene.sprite, tag = \'sprite\')\n        pass\n    \n    def showFlash(self, pars):\n        root = GameDataLoc + \'all/flash/\'\n        if not os.path.isfile(root + \'fla_%03d.pak\' % pars[0][1]):\n            root = GameDataLoc + \'jp/flash/\'\n        try:\n            Pak = PakFile(root + \'fla_%03d.pak\' % pars[0][1])\n            Pak.getFiles()\n        except:\n            # If there\'s no such file\n            Pak = PakFile(root + \'fla_%03d.pak\' % 999)\n            Pak.getFiles()\n        # FIXME: need to check its number\n        idx = pars[-1][1]\n        if idx == 255:\n            # Erase everything from the screen\n            self._ScreenView.delete(ALL)\n            self.scene.flash = []\n            return 0\n        # Else - check for image, numeration starts with 1\n        imageFile = Pak.files[idx - 1]\n        if \'.gmo\' in imageFile[0]:\n            GmoImage = GmoFile()\n            GmoImage.fromData(imageFile[1])\n            GmoImage.extractGim()\n            GmoImage.gim.getImage()\n            image = GmoImage.gim.image\n            pilImage = PIL.Image.new("RGBA", (GmoImage.gim.width, GmoImage.gim.height))\n            pilImage.putdata(GmoImage.gim.image)\n            self.scene.flash.append(ImageTk.PhotoImage(pilImage))\n            POS_X = (2*SCREEN_W - GmoImage.gim.width)/2\n            POS_Y = (2*SCREEN_H - GmoImage.gim.height)/2\n            imagesprite = self._ScreenView.create_image(POS_X,POS_Y,image=self.scene.flash[-1])\n            return 0\n        if \'.gim\' in imageFile[0]:\n            GimImage = GimFile()\n            GimImage.fromData(imageFile[1])\n            GimImage.getImage()\n            pilImage = PIL.Image.new("RGBA", (GimImage.width, GimImage.height))\n            pilImage.putdata(GimImage.image)\n            self.scene.flash.append(ImageTk.PhotoImage(pilImage))\n            POS_X = (2*SCREEN_W - GimImage.width)/2\n            POS_Y = (2*SCREEN_H - GimImage.height)/2\n            imagesprite = self._ScreenView.create_image(POS_X,POS_Y,image=self.scene.flash[-1])\n            # Text should be kept on the top\n            self._ScreenView.tag_raise(\'text\')\n            return 0\n        # If neither gim nor gmo - i don\'t know how to use sfl files yet\n        imagesprite = self._ScreenView.create_text(SCREEN_W/2, SCREEN_H/2, text="FLASH ANIMATION STUB")\n        return -1\n        pass\n    \n    def printLine(self):\n        # First delete the old line\n        try:\n            self._ScreenView.delete(self.scene.text_idx)\n        except:\n            print "No old line present on the screen"\n        # I\'m using images here because of the following things: positioning, alpha and font\n        pilImage = PIL.Image.new("RGBA", (SCREEN_W, TEXT_H), (32,32,32,192))\n        draw = PIL.ImageDraw.Draw(pilImage)\n        font = PIL.ImageFont.truetype("rounded-mgenplus-2pp-regular.ttf", 20)\n        # First  - draw the speaker name at (20,0)\n        draw.text((20,0), self.scene.speaker, (255,255,255), font=font)\n        # Default highlighting\n        clt = 0\n        color = CLT_STYLES[clt].top_color\n        # Regex for finding highlighted regions\n        clt_marker = re.compile(r"\\<CLT (\\d+)\\>(.*?)\\<CLT\\>", re.DOTALL)\n        clt_counter = 0\n        # The text is split into a list like [CLT0_TEXT, CLT_NUM, CLT_TEXT, CLT0_TEXT]\n        text = re.split(clt_marker, self.scene.text)\n        # Draw lines with the fixed line spacing\n        attSpacing = 20\n        x = 20 # Margin\n        y = 20  # Initial y\n        partNum = 0\n        for part in text:\n            # Reset text color\n            if partNum % 3 == 0:\n                clt = 0\n                color = CLT_STYLES[clt].top_color\n            # Every first out of 3 - CLT number (look at the list form once again)\n            if partNum % 3 == 1:\n                clt = int(part)\n                color = CLT_STYLES[clt].top_color\n            # Dealing with a string\n            else:\n                # Draw text with the color we need\n                for line in part.splitlines():\n                    draw.text( (x,y), line, color, font=font)\n                    y = y + attSpacing\n            # Next part\n            partNum += 1\n        # Draw the text on canvas\n        self.scene.text_img = ImageTk.PhotoImage(pilImage)\n        self.scene.text_idx = self._ScreenView.create_image(SCREEN_W/2, SCREEN_H - TEXT_H/2,image=self.scene.text_img, tag = \'text\')\n        pass    \n'
p554
aS'\n    def _on_RootMenu_Map(self'
p555
aS',Event=None):\n        # File menu\n        FileMenu = Menu(self._RootMenu, tearoff=0)\n        FileMenu.add_command(label="Open", command=self.openFile)\n        FileMenu.add_command(label="Save", command=self.saveFile)\n        FileMenu.add_command(label="Exit", command=exit)\n        self._RootMenu.add_cascade(label="File", menu=FileMenu)\n        # Options menu\n        OptionsMenu = Menu(self._RootMenu, tearoff=0)\n        OptionsMenu.add_command(label="Game Data", command=self.openGameDataOpts)\n        self._RootMenu.add_cascade(label="Options", menu=OptionsMenu)\n        pass\n    \n    def openGameDataOpts(self):\n        gd = GameData()\n        pass\n        \n    def openFile(self):\n        options = {}\n        options[\'filetypes\'] = [(\'script files\', \'.lin\'), (\'image files\', (\'*.gim\',\'*.gmo\')), (\'pak files\', (\'*.pak\',\'*.p3d\')), (\'all files\', \'.*\')]\n        fn = tkFileDialog.askopenfilename(**options)\n        self.decodeFile(fn)\n        pass\n    \n    def saveFile(self):\n        fn = tkFileDialog.asksaveasfilename()\n        self.encodeFile(fn)\n        pass\n    \n    def populateLinLists(self):\n        # Clear everything\n        self._StringList.delete(0,END)\n        self._FlowList.delete(0,END)\n        # Put strings into listbox\n        for s in self.Lin.string_list:\n            self._StringList.insert(END, s.decode(\'utf16\'))        \n        # Set action list\n        for i in xrange(len(self.Lin.action_list)):\n            self._FlowList.insert(END, "%s%s" % (self.Lin.action_list[i], self.Lin.pars_list[i]))\n        pass\n    \n    def decodeFile(self, fn):\n        file = os.path.split(fn)[1]\n        self._FileNameText.set(file)\n        print "Decoding %s" % fn\n        # Lin file\n        if \'.lin\' in file:\n            self.mode = \'.lin\'\n            # Decode another file\n            self.Lin.decodeLinFile(fn)\n            self.populateLinLists()\n        \n        # Pak file\n        if \'.pak\' in file:\n            self.mode = \'.pak\'\n            # Decode .pak file\n            self.Pak = PakFile(fn)\n            self.Pak.getFiles()\n            # Clear everything\n            self._StringList.delete(0,END)\n            self._FlowList.delete(0,END)\n            # Put all filenames into the flow list\n            for f in self.Pak.files:\n                self._FlowList.insert(END, "%s" % f[0])\n        \n        # P3d file\n        if \'.p3d\' in file:\n            # That\'s the same pak\n            self.mode = \'.pak\'\n            # Decode .pak file\n            self.Pak = P3dFile(fn)\n            self.Pak.getFiles()\n            # Put all filenames into the flow list\n            for f in self.Pak.files:\n                self._FlowList.insert(END, "%s" % f[0])\n        pass\n        \n    def encodeFile(self,fn):\n        file = os.path.split(fn)[1]\n        self._FileNameText.set(file)\n        if \'.lin\' in fn:\n            self.Lin.encodeLinFile(fn)\n        if \'.pak\' in fn:\n            self.Pak.makePak(fn)\n        pass\n        \n    def exit():\n        Root.quit()\n'
p556
aS'\n    def _on_SetStringBtn_Button_1(self'
p557
aS',Event=None):\n        # For .lin file we\'re just changing the string in its string_list\n        if self.mode == \'.lin\':\n            # Construct the new string\n            str1 = self._CurrentEditString1.get()\n            str2 = self._CurrentEditString2.get()\n            str3 = self._CurrentEditString3.get()\n            final_string = \'\'\n            if str1 != \'\':\n                final_string += str1 + (\'\\x0d\\x00\\x0a\\x00\').decode(\'utf16\')\n            if str2 != \'\':\n                final_string += str2 + (\'\\x0d\\x00\\x0a\\x00\').decode(\'utf16\')\n            if str3 != \'\':\n                final_string += str3 + (\'\\x0d\\x00\\x0a\\x00\').decode(\'utf16\')\n            # Replace chars that\'re not present in the game\n            final_string = final_string.replace(\'?\', u"\\uFF1F") # Question mark\n            # Get string index\n            idx = self.current_str_idx\n            # Delete the old string from the visible list\n            self._StringList.delete(idx)\n            # Insert the new string\n            self.Lin.string_list[idx] = final_string\n            self._StringList.insert(idx, final_string)\n            # Show the new version\n            self.scene.text = self._StringList.get(idx)\n            self.printLine()\n        # For .pak we\'re changing the Pak.files[i] content\n        elif self.mode == \'.pak\':\n            str = self._CurrentEditString1.get()\n            i = self.current_act_idx\n            l = list(self.Pak.files[i])\n            l[1] = str.encode(\'utf16\')\n            self.Pak.files[i] = tuple(l)\n        pass\n'
p558
aS'\n    def _on_StringList_select(self'
p559
aS",Event=None):\n        if self._StringList.size() > 0:\n            num = int(self._StringList.curselection()[0])\n            string = self._StringList.get(num)\n            string = string.split('\\r\\n')\n            self._CurrentEditString1.set(string[0])\n            if len(string) > 1:\n                self._CurrentEditString2.set(string[1])\n            else:\n                self._CurrentEditString2.set('')\n            if len(string) > 2:\n                self._CurrentEditString3.set(string[2])\n            else:\n                self._CurrentEditString3.set('')\n            self.current_str_idx = num\n        pass\n"
p560
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p561
aS'\n# This one-liner splits the string without consuming delimiters\ndef splitkeepsep(s, sep):\n    return reduce(lambda acc, elem: acc[:-1] + [acc[-1] + elem] if elem == sep else acc + [elem], re.split("(%s)" % re.escape(sep), s), [])'
p562
asg7
I0
sg43
I8549759
ssg29
(lp563
(dp564
g95
S'Tkinter'
p565
sg49
g6
sg97
S'Frame'
p566
sg99
(lp567
sg24
g101
sg102
g103
sg104
(lp568
sg112
(lp569
sa(dp570
g95
g400
sg49
S'_AddOpBtn'
p571
sg97
g402
sg99
(lp572
(dp573
g49
S'expand'
p574
sg129
g462
sa(dp575
g49
S'fill'
p576
sg129
g465
sasg24
Nsg102
(lp577
I794
aI9687
asg104
(lp578
(dp579
g107
S'_on_AddOpBtn_Button_1'
p580
sg109
S''
sg110
S'<ButtonPress-1>'
p581
sasg112
(lp582
(dp583
g49
g134
sg129
S'ADD OP'
p584
sg136
Nsa(dp585
g49
S'height'
p586
sg129
S'n:3'
p587
sg136
Nsasa(dp588
g95
g123
sg49
S'_Button1'
p589
sg97
g125
sg99
(lp590
(dp591
g49
g128
sg129
S'nw'
p592
sasg24
Nsg102
(lp593
I7867
aI9747
asg104
(lp594
sg112
(lp595
sa(dp596
g95
S'Tkinter'
p597
sg49
S'_CanvasFrame'
p598
sg97
S'Frame'
p599
sg99
(lp600
sg24
(I0
I2
I1
I0
I2
tp601
sg102
g103
sg104
(lp602
sg112
(lp603
sa(dp604
g95
S'Tkinter'
p605
sg49
S'_ContentFrame'
p606
sg97
S'Frame'
p607
sg99
(lp608
(dp609
g49
g128
sg129
S'nw'
p610
sa(dp611
g49
g574
sg129
S'yes'
p612
sa(dp613
g49
g576
sg129
S'both'
p614
sasg24
(I0
I2
I1
tp615
sg102
g103
sg104
(lp616
sg112
(lp617
sa(dp618
g95
S'Tkinter'
p619
sg49
S'_CurActionLabel'
p620
sg97
S'Label'
p621
sg99
(lp622
sg24
Nsg102
(lp623
I6364
aI7834
asg104
(lp624
sg112
(lp625
(dp626
g49
S'textvariable'
p627
sg129
S'_CurAction'
p628
sg136
S's.as'
p629
sasa(dp630
g95
g400
sg49
S'_DelOpBtn'
p631
sg97
g402
sg99
(lp632
(dp633
g49
g574
sg129
g462
sa(dp634
g49
g576
sg129
g465
sasg24
Nsg102
(lp635
I1517
aI9687
asg104
(lp636
(dp637
g107
S'_on_DelOpBtn_Button_1'
p638
sg109
S''
sg110
S'<ButtonPress-1>'
p639
sasg112
(lp640
(dp641
g49
g134
sg129
S'DELETE OP'
p642
sg136
Nsasa(dp643
g95
S'Tkinter'
p644
sg49
S'_EditString1'
p645
sg97
S'Entry'
p646
sg99
(lp647
(dp648
g49
g128
sg129
S's'
sasg24
Nsg102
(lp649
I3267
aI6643
asg104
(lp650
sg112
(lp651
(dp652
g49
S'width'
p653
sg129
S'n:50'
p654
sg136
Nsa(dp655
g49
S'textvariable'
p656
sg129
S'_CurrentEditString1'
p657
sg136
S's.as'
p658
sasa(dp659
g95
g619
sg49
S'_EditString2'
p660
sg97
S'Entry'
p661
sg99
(lp662
sg24
Nsg102
(lp663
I3281
aI6992
asg104
(lp664
sg112
(lp665
(dp666
g49
g653
sg129
S'n:50'
p667
sg136
Nsa(dp668
g49
g656
sg129
S'_CurrentEditString2'
p669
sg136
S's.as'
p670
sasa(dp671
g95
S'Tkinter'
p672
sg49
S'_EditString3'
p673
sg97
S'Entry'
p674
sg99
(lp675
sg24
Nsg102
(lp676
I3288
aI7292
asg104
(lp677
sg112
(lp678
(dp679
g49
g653
sg129
S'n:50'
p680
sg136
Nsa(dp681
g49
g656
sg129
S'_CurrentEditString3'
p682
sg136
S's.as'
p683
sasa(dp684
g95
S'Tkinter'
p685
sg49
S'_FileName'
p686
sg97
S'Label'
p687
sg99
(lp688
sg24
Nsg102
(lp689
I4600
aI722
asg104
(lp690
sg112
(lp691
(dp692
g49
g627
sg129
S'_FileNameText'
p693
sg136
S's.as'
p694
sasa(dp695
g95
g605
sg49
S'_FileNameFrame'
p696
sg97
g607
sg99
(lp697
(dp698
g49
g576
sg129
S'x'
sasg24
(I0
I1
tp699
sg102
g103
sg104
(lp700
sg112
(lp701
sa(dp702
g95
g123
sg49
S'_FilterFlowList'
p703
sg97
S'Checkbutton'
p704
sg99
(lp705
(dp706
g49
g128
sg129
S'ne'
p707
sasg24
Nsg102
(lp708
I1984
aI1456
asg104
(lp709
sg112
(lp710
(dp711
g49
S'text'
p712
sg129
S'Filtered'
p713
sg136
Nsa(dp714
g49
S'variable'
p715
sg129
S'_Filtered'
p716
sg136
S'sif.as'
p717
sa(dp718
g49
S'command'
p719
sg129
S'_on_FilterFlowList_check'
p720
sg136
I1
sasa(dp721
g95
g425
sg49
S'_FlowFrame'
p722
sg97
g427
sg99
(lp723
(dp724
g49
g574
sg129
g462
sa(dp725
g49
g576
sg129
g465
sasg24
(I0
I2
I0
I1
tp726
sg102
g103
sg104
(lp727
sg112
(lp728
sa(dp729
g95
g685
sg49
S'_FlowFrameLabel'
p730
sg97
g687
sg99
(lp731
(dp732
g49
g128
sg129
g592
sa(dp733
g49
g576
sg129
S'x'
sasg24
Nsg102
(lp734
I283
aI1444
asg104
(lp735
sg112
(lp736
(dp737
g49
g145
sg129
S'Actions List'
p738
sg136
Nsasa(dp739
g95
g685
sg49
S'_FlowList'
p740
sg97
S'Listbox'
p741
sg99
(lp742
(dp743
g49
g574
sg129
S'yes'
p744
sa(dp745
g49
g576
sg129
S'both'
p746
sasg24
Nsg102
(lp747
I652
aI2635
asg104
(lp748
(dp749
g107
S'_on_FlowList_select'
p750
sg109
S''
sg110
S'<<ListboxSelect>>'
p751
sasg112
(lp752
sa(dp753
g95
g115
sg49
S'_Frame1'
p754
sg97
g117
sg99
(lp755
(dp756
g49
g576
sg129
S'both'
p757
sasg24
(I0
I2
I0
I0
tp758
sg102
g103
sg104
(lp759
sg112
(lp760
sa(dp761
g95
S'Tkinter'
p762
sg49
S'_Frame10'
p763
sg97
S'Frame'
p764
sg99
(lp765
sg24
(I0
I2
I1
I1
I0
tp766
sg102
g103
sg104
(lp767
sg112
(lp768
sa(dp769
g95
g762
sg49
S'_Frame11'
p770
sg97
g764
sg99
(lp771
(dp772
g49
g128
sg129
S'nw'
p773
sa(dp774
g49
g576
sg129
S'x'
sasg24
(I0
I2
I1
I1
I2
tp775
sg102
g103
sg104
(lp776
sg112
(lp777
sa(dp778
g95
g762
sg49
S'_Frame12'
p779
sg97
g764
sg99
(lp780
sg24
(I0
I2
I1
I1
I1
tp781
sg102
g103
sg104
(lp782
sg112
(lp783
sa(dp784
g95
g605
sg49
S'_Frame2'
p785
sg97
g607
sg99
(lp786
(dp787
g49
g128
sg129
g610
sa(dp788
g49
g574
sg129
g744
sa(dp789
g49
g576
sg129
S'both'
p790
sasg24
(I0
I2
tp791
sg102
g103
sg104
(lp792
sg112
(lp793
sa(dp794
g95
g425
sg49
S'_Frame3'
p795
sg97
g427
sg99
(lp796
(dp797
g49
g576
sg129
S'x'
sasg24
(I0
I2
I0
I2
tp798
sg102
g103
sg104
(lp799
sg112
(lp800
sa(dp801
g95
S'Tkinter'
p802
sg49
S'_Frame4'
p803
sg97
S'Frame'
p804
sg99
(lp805
(dp806
g49
g574
sg129
S'yes'
p807
sa(dp808
g49
g576
sg129
g757
sasg24
(I0
I2
I1
I3
I0
tp809
sg102
g103
sg104
(lp810
sg112
(lp811
sa(dp812
g95
g802
sg49
S'_Frame5'
p813
sg97
g804
sg99
(lp814
(dp815
g49
g574
sg129
S'yes'
p816
sa(dp817
g49
g576
sg129
S'x'
sasg24
(I0
I2
I1
I3
I1
tp818
sg102
g103
sg104
(lp819
sg112
(lp820
sa(dp821
g95
g802
sg49
S'_Frame9'
p822
sg97
g804
sg99
(lp823
(dp824
g49
g576
sg129
S'x'
sasg24
(I0
I2
I1
I1
tp825
sg102
g103
sg104
(lp826
sg112
(lp827
sa(dp828
g95
g605
sg49
S'_MenuFrame'
p829
sg97
g607
sg99
(lp830
(dp831
g49
g128
sg129
g610
sa(dp832
g49
g576
sg129
g790
sasg24
(I0
I0
tp833
sg102
g103
sg104
(lp834
sg112
(lp835
sa(dp836
g95
g115
sg49
S'_MiscFrame'
p837
sg97
g117
sg99
(lp838
sg24
(I0
I2
I1
I0
I1
tp839
sg102
g103
sg104
(lp840
sg112
(lp841
sa(dp842
g95
g123
sg49
S'_MiscList'
p843
sg97
g149
sg99
(lp844
sg24
Nsg102
(lp845
I6251
aI2527
asg104
(lp846
sg112
(lp847
sa(dp848
g95
S'Tkinter'
p849
sg49
S'_OpCodeEdit'
p850
sg97
S'Entry'
p851
sg99
(lp852
(dp853
g49
g128
sg129
S'nw'
p854
sasg24
Nsg102
(lp855
I7094
aI8712
asg104
(lp856
sg112
(lp857
(dp858
g49
g656
sg129
S'_OpCodeEditText'
p859
sg136
S's.as'
p860
sasa(dp861
g95
g619
sg49
S'_OpCodeLabel'
p862
sg97
g621
sg99
(lp863
(dp864
g49
g128
sg129
g854
sasg24
Nsg102
(lp865
I6378
aI8724
asg104
(lp866
sg112
(lp867
(dp868
g49
g145
sg129
S'Op Code'
p869
sg136
Nsa(dp870
g49
S'width'
p871
sg129
S'n:10'
p872
sg136
Nsasa(dp873
g95
g605
sg49
S'_OpFrame'
p874
sg97
g607
sg99
(lp875
(dp876
g49
S'ipadx'
p877
sg129
S'n:25'
p878
sa(dp879
g49
g128
sg129
g610
sa(dp880
g49
g576
sg129
S'y'
sasg24
(I0
I2
I0
tp881
sg102
g103
sg104
(lp882
sg112
(lp883
sa(dp884
g95
g619
sg49
S'_ParEdit'
p885
sg97
g661
sg99
(lp886
(dp887
g49
g128
sg129
g592
sasg24
Nsg102
(lp888
I7101
aI9687
asg104
(lp889
sg112
(lp890
(dp891
g49
g656
sg129
S'_ParEditText'
p892
sg136
S's.as'
p893
sasa(dp894
g95
g802
sg49
S'_ParEditFrame'
p895
sg97
g804
sg99
(lp896
(dp897
g49
g574
sg129
g807
sa(dp898
g49
g576
sg129
S'x'
sasg24
(I0
I2
I1
I3
I1
I1
tp899
sg102
g103
sg104
(lp900
sg112
(lp901
sa(dp902
g95
g802
sg49
S'_ParFrame'
p903
sg97
g804
sg99
(lp904
(dp905
g49
g128
sg129
g854
sa(dp906
g49
g574
sg129
g816
sa(dp907
g49
g576
sg129
g757
sasg24
(I0
I2
I1
I3
tp908
sg102
g103
sg104
(lp909
sg112
(lp910
sa(dp911
g95
g619
sg49
S'_ParLabel'
p912
sg97
g621
sg99
(lp913
(dp914
g49
g128
sg129
g592
sasg24
Nsg102
(lp915
I6421
aI9699
asg104
(lp916
sg112
(lp917
(dp918
g49
g871
sg129
S'n:10'
p919
sg136
Nsa(dp920
g49
g627
sg129
S'_ParLabelText'
p921
sg136
S's.as'
p922
sasa(dp923
g95
g123
sg49
S'_ParList'
p924
sg97
g149
sg99
(lp925
(dp926
g49
g574
sg129
g807
sa(dp927
g49
g576
sg129
g757
sasg24
Nsg102
(lp928
I3508
aI8893
asg104
(lp929
sg112
(lp930
sa(dp931
g95
g802
sg49
S'_ParListFrame'
p932
sg97
g804
sg99
(lp933
(dp934
g49
g574
sg129
g807
sa(dp935
g49
g576
sg129
S'x'
sasg24
(I0
I2
I1
I3
I1
I0
tp936
sg102
g103
sg104
(lp937
sg112
(lp938
sa(dp939
g95
g685
sg49
S'_RootMenu'
p940
sg97
S'Menu'
p941
sg99
(lp942
(dp943
g49
g128
sg129
g610
sa(dp944
g49
g574
sg129
g744
sa(dp945
g49
g576
sg129
g790
sasg24
Nsg102
(lp946
I184
aI156
asg104
(lp947
(dp948
g107
S'_on_RootMenu_Map'
p949
sg109
S''
sg110
S'<Map>'
p950
sasg112
(lp951
(dp952
g49
S'type'
p953
sg129
S'menubar'
p954
sg136
Nsasa(dp955
g95
S'Tkinter'
p956
sg49
S'_ScreenView'
p957
sg97
S'Canvas'
p958
sg99
(lp959
(dp960
g49
g574
sg129
S'yes'
p961
sasg24
Nsg102
(lp962
I8597
aI2948
asg104
(lp963
sg112
(lp964
(dp965
g49
S'height'
p966
sg129
S'u:SCREEN_H'
p967
sg136
Nsa(dp968
g49
S'width'
p969
sg129
S'u:SCREEN_W'
p970
sg136
Nsa(dp971
g49
S'background'
p972
sg129
S'c:#000000'
p973
sg136
Nsasa(dp974
g95
S'Tkinter'
p975
sg49
S'_SetStringBtn'
p976
sg97
S'Button'
p977
sg99
(lp978
sg24
Nsg102
(lp979
I6194
aI6943
asg104
(lp980
(dp981
g107
S'_on_SetStringBtn_Button_1'
p982
sg109
S''
sg110
S'<ButtonPress-1>'
p983
sasg112
(lp984
(dp985
g49
g134
sg129
S'SET STRING'
p986
sg136
Nsasa(dp987
g95
g975
sg49
S'_String1Len'
p988
sg97
S'Label'
p989
sg99
(lp990
sg24
Nsg102
(lp991
I4607
aI6691
asg104
(lp992
sg112
(lp993
(dp994
g49
g627
sg129
S'_EditString1Len'
p995
sg136
S's.as'
p996
sasa(dp997
g95
g975
sg49
S'_String2Len'
p998
sg97
g989
sg99
(lp999
sg24
Nsg102
(lp1000
I4600
aI6980
asg104
(lp1001
sg112
(lp1002
(dp1003
g49
g627
sg129
S'_EditString2Len'
p1004
sg136
S's.as'
p1005
sasa(dp1006
g95
g975
sg49
S'_String3Len'
p1007
sg97
g989
sg99
(lp1008
sg24
Nsg102
(lp1009
I4607
aI7316
asg104
(lp1010
sg112
(lp1011
(dp1012
g49
g627
sg129
S'_EditString3Len'
p1013
sg136
S's.as'
p1014
sasa(dp1015
g95
g597
sg49
S'_StringFrame'
p1016
sg97
g599
sg99
(lp1017
sg24
(I0
I2
I1
I0
I0
tp1018
sg102
g103
sg104
(lp1019
sg112
(lp1020
sa(dp1021
g95
g685
sg49
S'_StringList'
p1022
sg97
g741
sg99
(lp1023
(dp1024
g49
g128
sg129
S'nw'
p1025
sa(dp1026
g49
g574
sg129
S'yes'
p1027
sa(dp1028
g49
g576
sg129
g746
sasg24
Nsg102
(lp1029
I3062
aI2503
asg104
(lp1030
(dp1031
g107
S'_on_StringList_select'
p1032
sg109
S''
sg110
S'<<ListboxSelect>>'
p1033
sasg112
(lp1034
sa(dp1035
g95
g644
sg49
S'_StringListLabel'
p1036
sg97
S'Label'
p1037
sg99
(lp1038
(dp1039
g49
g128
sg129
S'n'
sa(dp1040
g49
g576
sg129
S'x'
sasg24
Nsg102
(lp1041
I3182
aI1516
asg104
(lp1042
sg112
(lp1043
(dp1044
g49
g145
sg129
S'String list'
p1045
sg136
Nsasa(dp1046
g95
S'Tkinter'
p1047
sg49
S'_TabHost'
p1048
sg97
S'Frame'
p1049
sg99
(lp1050
(dp1051
g49
g128
sg129
S'nw'
p1052
sa(dp1053
g49
g574
sg129
g612
sa(dp1054
g49
g576
sg129
g746
sasg24
(I0
I2
I1
I0
tp1055
sg102
g103
sg104
(lp1056
sg112
(lp1057
(dp1058
g49
S'pyclass'
p1059
sg129
S'ttk.Notebook'
p1060
sg136
Nsasa(dp1061
g95
g849
sg49
S'_WorkFrameLabel'
p1062
sg97
S'Label'
p1063
sg99
(lp1064
(dp1065
g49
S'padx'
p1066
sg129
S'n:35'
p1067
sasg24
Nsg102
(lp1068
I5188
aI7858
asg104
(lp1069
sg112
(lp1070
(dp1071
g49
g145
sg129
S'Parameters List'
p1072
sg136
Nsasa(dp1073
g95
g1047
sg49
S'_WorkLabelFrame'
p1074
sg97
g1049
sg99
(lp1075
(dp1076
g49
g128
sg129
g1052
sa(dp1077
g49
g576
sg129
S'x'
sasg24
(I0
I2
I1
I2
tp1078
sg102
g103
sg104
(lp1079
sg112
(lp1080
sasg233
g522
sg33
I1
sasg46
g34
sg48
g34
sg49
g6
sa(dp1081
g32
Nsg33
I1
sg34
(dp1082
g36
S'11.0'
p1083
sg38
(lp1084
S''
aS'#coding=utf8\n\n'
p1085
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p1086
aS'\nfrom enum import Enum\n\nSCREEN_W = 480\nSCREEN_H = 272\n\nTEXT_H = 90\n\nSCENE_MODES   = Enum("normal", "normal_flat", "trial", "rules", "ammo", "ammoname", "ammosummary", "present", "presentname", "debate", "mtb", "climax", "anagram", "dive", "hanron", "menu", "map", "report", "report2", "skill", "skill2", "music", "eventname", "artworkname", "moviename", "theatre", "novel", "help", "other")\nSCENE_SPECIAL = Enum("option", "showopt", "react", "debate", "chatter", "hanron", "checkobj", "checkchar")\nBOX_COLORS    = Enum("yellow", "green", "blue")\nBOX_TYPES     = Enum("normal", "flat", "novel")\n\nCHAPTER_MONOKUMA = 100\nCHAPTER_FREETIME = 101\nCHAPTER_ISLAND   = 102\nCHAPTER_NOVEL    = 103'
p1087
asg7
I0
sg43
I14492031
ssg44
(lp1088
sg46
S'-Main-'
p1089
sg48
g34
sg49
g4
sa(dp1090
g32
S'-Main-'
p1091
sg33
I1
sg34
(dp1092
g36
S'7.0'
p1093
sg38
(lp1094
S''
aS'#coding=utf8\n\n'
p1095
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p1096
aS'import ttk, PIL, tkMessageBox\n\ngui = ResViewer()'
p1097
asg7
I0
sg43
I2407807
ssg44
(lp1098
(dp1099
g235
g236
sg237
S'Tkinter.Toplevel'
p1100
sg239
S'ResViewer'
p1101
sg241
S'_TopMenu'
p1102
sg242
(dp1103
g36
S'68.0'
p1104
sg38
(lp1105
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                  ResViewer                                   #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass ResViewer(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p1106
aS'        #\n        #Your code here\n        #\n'
p1107
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self._Frame5 = Frame(self)\n        self._Frame5.pack(side='top')\n        self._TopMenu = Menu(self._Frame5)\n        self._TopMenu.pack(side='left')\n        self._TopMenu.bind('<Map>',self._on_TopMenu_Map)\n        self._Frame3 = Frame(self)\n        self._Frame3.pack(side='top')\n        self._FileListFrame = Frame(self._Frame3)\n        self._FileListFrame.pack(side='left')\n        self._FileList = Listbox(self._FileListFrame)\n        self._FileList.pack(side='top')\n        self._Frame4 = Frame(self._Frame3)\n        self._Frame4.pack(side='left')\n        self._TabHost = ttk.Notebook(self._Frame4)\n        self._TabHost.pack(side='top')\n        self._Frame1 = Frame(self._Frame4)\n        self._Frame1.pack(side='top')\n        self._TextFrame = Frame(self._TabHost)\n        self._TextFrame.pack(side='left')\n        self._TextEdit = Entry(self._TextFrame)\n        self._TextEdit.pack(side='top')\n        self._CanvasFrame = Frame(self._TabHost)\n        self._CanvasFrame.pack(side='left')\n        self._Canvas = Canvas(self._CanvasFrame)\n        self._Canvas.pack(side='top')\n        self._MiscFrame = Frame(self._TabHost)\n        self._MiscFrame.pack(side='left')\n"
p1108
aS'        #\n        #Your code here\n        #\n        self._TabHost.add(self._TextFrame, text="Text")\n        self._TabHost.add(self._CanvasFrame, text="Graphics")\n        self._TabHost.add(self._MiscFrame, text="Misc")\n'
p1109
aS'    #\n    #Start of event handler methods\n    #\n'
p1110
aS'\n'
aS'\n    def _on_TopMenu_Map(self'
p1111
aS',Event=None):\n        # File menu\n        FileMenu = Menu(self._RootMenu, tearoff=0)\n        FileMenu.add_command(label="Open", command=self.openFile)\n        FileMenu.add_command(label="Save", command=self.saveFile)\n        FileMenu.add_command(label="Exit", command=exit)\n        self._RootMenu.add_cascade(label="File", menu=FileMenu)\n        pass\n    \n    def openFile(self):\n        pass\n    \n    def saveFile(self):\n        pass\n    \n    def exit(self):\n        self.destroy()\n        pass\n'
p1112
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p1113
aS''
asg7
I0
sg43
I12886399
ssg254
(lp1114
(lp1115
I4996
aI939
aI0
aa(lp1116
I1531
aI5463
aI1
aa(lp1117
I5762
aI9061
aI0
aa(lp1118
I4082
aI4994
aI1
aa(lp1119
I7215
aI4994
aI1
aasg258
(lp1120
(dp1121
g261
S'Tkinter'
p1122
sg239
g1101
sg263
S'Toplevel'
p1123
sg265
(lp1124
sg267
g393
sg269
g270
sg271
(lp1125
sg273
(lp1126
sa(dp1127
g261
g123
sg239
S'_Canvas'
p1128
sg263
S'Canvas'
p1129
sg265
(lp1130
sg267
Nsg269
(lp1131
I5585
aI3129
asg271
(lp1132
sg273
(lp1133
sa(dp1134
g261
g115
sg239
S'_CanvasFrame'
p1135
sg263
g117
sg265
(lp1136
sg267
(I0
I1
I1
I0
I1
tp1137
sg269
g270
sg271
(lp1138
sg273
(lp1139
sa(dp1140
g261
g123
sg239
S'_FileList'
p1141
sg263
g149
sg265
(lp1142
sg267
Nsg269
(lp1143
I687
aI3682
asg271
(lp1144
sg273
(lp1145
sa(dp1146
g261
g115
sg239
S'_FileListFrame'
p1147
sg263
g117
sg265
(lp1148
sg267
(I0
I1
I0
tp1149
sg269
g270
sg271
(lp1150
sg273
(lp1151
sa(dp1152
g261
g115
sg239
S'_Frame1'
p1153
sg263
g117
sg265
(lp1154
sg267
(I0
I1
I1
I1
tp1155
sg269
g270
sg271
(lp1156
sg273
(lp1157
sa(dp1158
g261
g115
sg239
S'_Frame3'
p1159
sg263
g117
sg265
(lp1160
sg267
(I0
I1
tp1161
sg269
g270
sg271
(lp1162
sg273
(lp1163
sa(dp1164
g261
g115
sg239
S'_Frame4'
p1165
sg263
g117
sg265
(lp1166
sg267
(I0
I1
I1
tp1167
sg269
g270
sg271
(lp1168
sg273
(lp1169
sa(dp1170
g261
g115
sg239
S'_Frame5'
p1171
sg263
g117
sg265
(lp1172
sg267
(I0
I0
tp1173
sg269
g270
sg271
(lp1174
sg273
(lp1175
sa(dp1176
g261
g115
sg239
S'_MiscFrame'
p1177
sg263
g117
sg265
(lp1178
sg267
(I0
I1
I1
I0
I2
tp1179
sg269
g270
sg271
(lp1180
sg273
(lp1181
sa(dp1182
g261
g115
sg239
S'_TabHost'
p1183
sg263
g117
sg265
(lp1184
sg267
(I0
I1
I1
I0
tp1185
sg269
g270
sg271
(lp1186
sg273
(lp1187
(dp1188
g239
S'pyclass'
p1189
sg291
S'ttk.Notebook'
p1190
sg293
Nsasa(dp1191
g261
g123
sg239
S'_TextEdit'
p1192
sg263
S'Entry'
p1193
sg265
(lp1194
sg267
Nsg269
(lp1195
I2629
aI3321
asg271
(lp1196
sg273
(lp1197
sa(dp1198
g261
g115
sg239
S'_TextFrame'
p1199
sg263
g117
sg265
(lp1200
sg267
(I0
I1
I1
I0
I0
tp1201
sg269
g270
sg271
(lp1202
sg273
(lp1203
sa(dp1204
g261
g123
sg239
g1102
sg263
S'Menu'
p1205
sg265
(lp1206
sg267
Nsg269
(lp1207
I241
aI373
asg271
(lp1208
(dp1209
g283
S'_on_TopMenu_Map'
p1210
sg285
S''
sg286
S'<Map>'
p1211
sasg273
(lp1212
sasg355
g1100
sg356
I1
sasg46
g1101
sg48
g1101
sg49
S'ResViewer'
p1213
sa.