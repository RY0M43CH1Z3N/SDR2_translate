(lp1
(dp2
S'ModulePrevious'
p3
S'ResViewer'
p4
sS'ModuleCurrent'
p5
S'SDR2_Translate'
p6
sS'Version'
p7
I1
sS'Geometry'
p8
S'1024x556+0+20'
p9
sS'ProjectName'
p10
g6
sS'ImportTypes'
p11
(lp12
(S'Pmw'
p13
S'import'
p14
tp15
a(S'Tkinter'
p16
S'from'
p17
tp18
asS'EditorWidths'
p19
((lp20
L132L
aL132L
a(lp21
L132L
aL132L
a(lp22
L130L
aL130L
atp23
sS'ID'
p24
S'Rapyd Project'
p25
sS'ParkingLot'
p26
(dp27
S'SelectedWidreq'
p28
NsS'Widreqs'
p29
(lp30
ssa(dp31
S'PreviousForm'
p32
S'checkProgressForm'
p33
sS'OnTab'
p34
L1L
sS'-Main-'
p35
(dp36
S'Cursor'
p37
S'1.12'
p38
sS'Text'
p39
(lp40
S''
aS'#coding=utf8\n\n'
p41
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p42
aS"import re, ttk, tkMessageBox\nimport os\nfrom os import listdir, walk\nfrom os.path import isfile, join\n\n# Data path is a dictionary with 3 paths - 'orig', 'proc' and 'done'\ndef checkProgress(DataPath):\n    Root = Tk()\n    Root.title('Progress')\n    GetFn = checkProgressForm(Root)\n    GetFn.pack(expand='yes',fill='both')\n    GetFn.populateTree(DataPath)\n    Root.mainloop()\n    try:\n        Root.destroy()\n    except:\n        pass\n    return GetFn.returning"
p43
asg7
I0
sS'Sha'
p44
I10916991
ssS'Forms'
p45
(lp46
(dp47
S'Requested'
p48
S'Gui'
p49
sS'Name'
p50
g33
sg28
NsS'Type'
p51
S'Tkinter.Frame'
p52
sS'Lines'
p53
(lp54
(lp55
I4993
aI7585
aI0
aasg39
(dp56
g37
S'99.0'
p57
sg39
(lp58
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                              checkProgressForm                               #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass checkProgressForm(Frame):\n    def __init__(self,Master=None,*pos,**kw):\n'
p59
aS"        #\n        #Your code here\n        #\n        self.returning = ''\n        self.DataPath = {}\n        self.root = Master\n"
p60
aS"\n        apply(Frame.__init__,(self,Master),kw)\n        self._Frame2 = Frame(self)\n        self._Frame2.pack(side='top')\n        self._TreeView = ttk.Treeview(self._Frame2)\n        self._TreeView.pack(side='left')\n        self._TreeView.bind('<Double-1>',self._onTreeViewDblClick)\n        self._TreeScroll = Scrollbar(self._Frame2)\n        self._TreeScroll.pack(expand='yes',fill='y',side='left')\n        self._Frame1 = Frame(self)\n        self._Frame1.pack(expand='yes',fill='x',side='top')\n        self._Button1 = Button(self._Frame1)\n        self._Button1.pack(anchor='w',expand='yes',fill='x',side='left')\n        self._Button2 = Button(self._Frame1)\n        self._Button2.pack(anchor='e',expand='yes',fill='x',side='left')\n"
p61
aS"        #\n        #Your code here\n        #\n        self._TreeView.insert('', 'end', 'ep_0', text='Prologue')\n        self._TreeView.insert('', 'end', 'ep_1', text='Episode 1')\n        self._TreeView.insert('', 'end', 'ep_2', text='Episode 2')\n        self._TreeView.insert('', 'end', 'ep_3', text='Episode 3')\n        self._TreeView.insert('', 'end', 'ep_4', text='Episode 4')\n        self._TreeView.insert('', 'end', 'ep_5', text='Episode 5')\n        self._TreeView.insert('', 'end', 'ep_M', text='Monokuma Theater')\n        self._TreeView.insert('', 'end', 'ep_F', text='Free Time')\n        self._TreeView.insert('', 'end', 'ep_O', text='Other')\n        # Scrollbar\n        self._TreeScroll.config( command = self._TreeView.yview )\n        self._TreeView['yscrollcommand'] = self._TreeScroll.set\n"
p62
aS'    #\n    #Start of event handler methods\n    #\n'
p63
aS"    def populateTree(self, DataPath):\n        self.DataPath = DataPath\n        # Populate lists\n        orig = []\n        for (dirpath, dirnames, filenames) in walk(DataPath['orig']):\n            orig.extend(filenames)\n        proc = []\n        for (dirpath, dirnames, filenames) in walk(DataPath['proc']):\n            proc.extend(filenames)\n        done = []\n        for (dirpath, dirnames, filenames) in walk(DataPath['done']):\n            done.extend(filenames)\n        print proc\n        # Episodes\n        regexDict = {'ep_0': 'e00', \n                              'ep_1': 'e01', \n                              'ep_2': 'e02', \n                              'ep_3': 'e03', \n                              'ep_4': 'e04', \n                              'ep_5': 'e05'}\n        for key, regex in regexDict.iteritems():\n            epList = filter(lambda fn: re.match(r'%s' % regex, fn) != None, orig)\n            for ep in epList:\n                if ep in proc:\n                    self._TreeView.insert(key, 'end', ep, text='%s' % ep, tags='proc')\n                elif ep in done:\n                    self._TreeView.insert(key, 'end', ep, text='%s' % ep, tags='done')\n                else:\n                    self._TreeView.insert(key, 'end', ep, text='%s' % ep, tags='orig')\n        self._TreeView.tag_configure('proc', background='orange')\n        self._TreeView.tag_configure('done', background='green')\n        pass\n"
p64
aS'\n    def _onTreeViewDblClick(self'
p65
aS',Event=None):\n        item = self._TreeView.selection()[0]\n        fn = None\n        # Create filename using tags\n        if \'proc\' in self._TreeView.item(item, \'tags\'):\n            fn = join(self.DataPath[\'proc\'], \'jp\', \'script\', self._TreeView.item(item,"text"))\n        elif \'done\' in self._TreeView.item(item, \'tags\'):\n            fn = join(self.DataPath[\'done\'], \'jp\', \'script\', self._TreeView.item(item,"text"))\n        elif \'orig\' in self._TreeView.item(item, \'tags\'):\n            fn = join(self.DataPath[\'orig\'], \'jp\', \'script\', self._TreeView.item(item,"text"))\n        else:\n            # Exit if there\'s no tag (e.g. category)\n            pass\n        # Confirm\n        question = \'Open file: %s?\' % self._TreeView.item(item,"text")\n        confirm = tkMessageBox.askyesno("Confirm action", question)\n        if confirm:\n            # Return filename and close popup\n            self.returning = fn\n            self.root.quit()\n        pass\n'
p66
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p67
aS''
asg7
I0
sg44
I15885439
ssg29
(lp68
(dp69
S'ModuleName'
p70
S'Tkinter'
p71
sg50
S'_Button1'
p72
sS'WidgetName'
p73
S'Button'
p74
sS'PackOptions'
p75
(lp76
(dp77
g50
S'anchor'
p78
sS'Value'
p79
S'w'
sa(dp80
g50
S'expand'
p81
sg79
S'yes'
p82
sa(dp83
g50
S'fill'
p84
sg79
S'x'
sasg24
NsS'XY'
p85
(lp86
I3272
aI8793
asS'Bindings'
p87
(lp88
sS'Options'
p89
(lp90
sa(dp91
g70
g71
sg50
S'_Button2'
p92
sg73
g74
sg75
(lp93
(dp94
g50
g78
sg79
S'e'
sa(dp95
g50
g81
sg79
g82
sa(dp96
g50
g84
sg79
S'x'
sasg24
Nsg85
(lp97
I5854
aI8845
asg87
(lp98
sg89
(lp99
sa(dp100
g70
S'Tkinter'
p101
sg50
S'_Frame1'
p102
sg73
S'Frame'
p103
sg75
(lp104
(dp105
g50
g81
sg79
g82
sa(dp106
g50
g84
sg79
S'x'
sasg24
(L0L
L1L
tp107
sg85
(I0
I0
tp108
sg87
(lp109
sg89
(lp110
sa(dp111
g70
g101
sg50
S'_Frame2'
p112
sg73
g103
sg75
(lp113
sg24
(L0L
L0L
tp114
sg85
g108
sg87
(lp115
sg89
(lp116
sa(dp117
g70
S'Tkinter'
p118
sg50
S'_TreeScroll'
p119
sg73
S'Scrollbar'
p120
sg75
(lp121
(dp122
g50
g81
sg79
S'yes'
p123
sa(dp124
g50
g84
sg79
S'y'
sasg24
Nsg85
(lp125
I5111
aI4199
asg87
(lp126
sg89
(lp127
sa(dp128
g70
g71
sg50
S'_TreeView'
p129
sg73
S'Listbox'
p130
sg75
(lp131
sg24
Nsg85
(lp132
I4329
aI4147
asg87
(lp133
(dp134
S'Handler'
p135
S'_onTreeViewDblClick'
p136
sS'Component'
p137
S''
sS'Event'
p138
S'<Double-1>'
p139
sasg89
(lp140
(dp141
g50
S'pyclass'
p142
sg79
S'ttk.Treeview'
p143
sS'Extra'
p144
Nsasa(dp145
g70
S'Tkinter'
p146
sg50
g33
sg73
S'Frame'
p147
sg75
(lp148
sg24
(I0
tp149
sg85
g108
sg87
(lp150
sg89
(lp151
sasS'BaseClass'
p152
g52
sg34
L1L
sasS'VisibleForm'
p153
g35
sS'SelectedForm'
p154
g35
sg50
S'checkProgress'
p155
sa(dp156
g32
S'SDR2_Translate'
p157
sg34
L1L
sg35
(dp158
g37
S'43.0'
p159
sg39
(lp160
S''
aS'#!/usr/bin/python\n#coding=utf8\nimport __future__\n'
p161
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p162
aS'\n\ntry:\n    #--------------------------------------------------------------------------#\n    # User code should go after this comment so it is inside the "try".        #\n    #     This allows rpErrorHandler to gain control on an error so it         #\n    #     can properly display a Rapyd-aware error message.                    #\n    #--------------------------------------------------------------------------#\n\n    #Adjust sys.path so we can find other modules of this project\n    import sys\n    if \'.\' not in sys.path:\n        sys.path.append(\'.\')\n    #Put lines to import other modules of this project here\n    import ttk, PIL, tkMessageBox, os, re, struct, tkFileDialog, tkSimpleDialog\n    import GuiFuncs, ConfigParser\n    from PIL import Image, ImageTk, ImageDraw, ImageFont\n    from GimFile import GimFile, GmoFile\n    from PakFile import PakFile\n    from OpCodes import *\n    from Common import *\n    from Scene import Scene\n    from clt import *\n    from Character import *\n    from LinFile import *\n    from enum import *\n    from GUI_Additional import IntegerEntry\n    from checkProgress import *\n \n    if __name__ == \'__main__\':\n        # Read config\n        config_ok = False\n        while not config_ok:\n            config = ConfigParser.ConfigParser()\n            config.read(\'config.cfg\')\n            try:\n                GameDataLoc = os.path.normpath(config.get(\'Game Data\', \'Game_Data_Location\'))\n                InProcDataLoc = os.path.normpath(config.get(\'Game Data\', \'InProc_Data_Location\'))\n                DoneDataLoc = os.path.normpath(config.get(\'Game Data\', \'Done_Data_Location\'))\n                if not os.path.exists(GameDataLoc):\n                    raise Exception(\'Bad path\')\n                if not os.path.exists(DoneDataLoc):\n                    raise Exception(\'Bad path\')\n                config_ok = True\n            except:\n                w = GameData()\n                # Wait for the window to close\n                w.wait_window(w)\n                \n        # Load GUI\n'
p163
aS"        Root = Tk()\n        import Tkinter\n        Tkinter.CallWrapper = rpErrorHandler.CallWrapper\n        del Tkinter\n        App = SDR2_Translate(Root)\n        App.pack(expand='yes',fill='both')\n"
p164
aS"        Root.geometry('640x480+10+10')\n        Root.title('SDR2 Translate')\n        Root.mainloop()\n        \n    #--------------------------------------------------------------------------#\n    # User code should go above this comment.                                  #\n    #--------------------------------------------------------------------------#\nexcept:\n    rpErrorHandler.RunError()"
p165
asg7
I0
sg44
I15555455
ssg45
(lp166
(dp167
S'Requested'
p168
S'Text'
p169
sS'Type'
p170
S'Tkinter.Toplevel'
p171
sS'Name'
p172
S'Filter'
p173
sS'SelectedWidreq'
p174
Nsg169
(dp175
g37
S'32.0'
p176
sg39
(lp177
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                    Filter                                    #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass Filter(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p178
aS'        #\n        #Your code here\n        #\n'
p179
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self.bind('<Map>',self.on_Filter_Map)\n        self._OpCodesFrame = Frame(self)\n        self._OpCodesFrame.pack(side='top')\n        self._OkFrame = Frame(self)\n        self._OkFrame.pack(side='top')\n        self._CancelBtn = Button(self._OkFrame,text='Cancel')\n        self._CancelBtn.pack(anchor='e',side='right')\n        self._OkBtn = Button(self._OkFrame,text='OK')\n        self._OkBtn.pack(anchor='e',side='right')\n        self._VisibleFrame = Frame(self._OpCodesFrame)\n        self._VisibleFrame.pack(side='left')\n        self._VisibleCodesLbl = Label(self._VisibleFrame,text='Visible OpCodes')\n        self._VisibleCodesLbl.pack(side='top')\n        self._VisibleCodeList = Listbox(self._VisibleFrame)\n        self._VisibleCodeList.pack(side='top')\n        self._VisibleCodeList.bind('<<ListboxSelect>>' \\\n            ,self._on_VisibleCodeList_select)\n        self._BtnFrame = Frame(self._OpCodesFrame)\n        self._BtnFrame.pack(side='left')\n        self._HideBtn = Button(self._BtnFrame,state='disabled',text='=>')\n        self._HideBtn.pack(side='top')\n        self._HideBtn.bind('<ButtonPress-1>',self._on_HideBtn_Button_1)\n        self._ShowBtn = Button(self._BtnFrame,state='disabled',text='<=')\n        self._ShowBtn.pack(side='top')\n        self._ShowBtn.bind('<ButtonPress-1>',self._on_ShowBtn_Button_1)\n        self._HiddenFrame = Frame(self._OpCodesFrame)\n        self._HiddenFrame.pack(side='left')\n        self._HiddenCodeLbl = Label(self._HiddenFrame,text='Hidden OpCodes')\n        self._HiddenCodeLbl.pack(side='top')\n        self._HiddenCodeList = Listbox(self._HiddenFrame)\n        self._HiddenCodeList.pack(side='top')\n        self._HiddenCodeList.bind('<<ListboxSelect>>' \\\n            ,self._on_HiddenCodeList_select)\n"
p180
aS'        #\n        #Your code here\n        #\n        self.Master = Master\n        self.visible_list = {}\n        self.hidden_list = {}\n'
p181
aS'    #\n    #Start of event handler methods\n    #\n'
p182
aS"    def initLists(self, hidden, visible):\n        self.hidden_list = hidden\n        self.visible_list = visible\n        self.populate()\n        pass\n\n    def populate(self):\n        self._VisibleCodeList.delete(0,END)\n        self._HiddenCodeList.delete(0,END)\n        for code,value in self.hidden_list.items():\n            if value != '':\n                self._HiddenCodeList.insert(END, value)\n            else:\n                self._HiddenCodeList.insert(END, 'op_'+code)\n        for code,value in self.visible_list.items():\n            if value != '':\n                self._VisibleCodeList.insert(END, value)\n            else:\n                self._VisibleCodeList.insert(END, 'op_'+code)\n        pass\n"
p183
aS'\n    def _on_HiddenCodeList_select(self'
p184
aS",Event=None):\n        self._ShowBtn['state'] = 'normal'\n        self._HideBtn['state'] = 'disabled'\n        pass\n"
p185
aS'\n    def _on_HideBtn_Button_1(self'
p186
aS',Event=None):\n        # Delete from the Visible list\n        i = int(self._FlowList.curselection()[0])        \n        \n        self._VisibleCodeList.delete(i)\n        # Insert into the Hidden list\n        self._HiddenCodeList.insert\n        pass\n'
p187
aS'\n    def _on_ShowBtn_Button_1(self'
p188
aS',Event=None):\n        pass\n'
p189
aS'\n    def _on_VisibleCodeList_select(self'
p190
aS",Event=None):\n        self._ShowBtn['state'] = 'disabled'\n        self._HideBtn['state'] = 'normal'\n        pass\n"
p191
aS'\n    def on_Filter_Map(self'
p192
aS',Event=None):\n        # Grab the focus\n        self.focus_set()\n        self.grab_set()\n        self.transient(self.Master)\n        pass\n'
p193
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p194
aS''
asg7
I0
sg44
I8776831
ssS'Lines'
p195
(lp196
(lp197
L4997L
aL8768L
aL0L
aa(lp198
L3384L
aL4378L
aL1L
aa(lp199
L4973L
aL4378L
aL1L
aasS'Widreqs'
p200
(lp201
(dp202
S'ModuleName'
p203
S'Tkinter'
p204
sg172
g173
sS'WidgetName'
p205
S'Toplevel'
p206
sS'PackOptions'
p207
(lp208
sS'ID'
p209
(L0L
tp210
sS'XY'
p211
(L0L
L0L
tp212
sS'Bindings'
p213
(lp214
(dp215
S'Handler'
p216
S'on_Filter_Map'
p217
sS'Component'
p218
S''
sS'Event'
p219
S'<Map>'
p220
sasS'Options'
p221
(lp222
sa(dp223
g203
S'Tkinter'
p224
sg172
S'_BtnFrame'
p225
sg205
S'Frame'
p226
sg207
(lp227
sg209
(L0L
L0L
L1L
tp228
sg211
g212
sg213
(lp229
sg221
(lp230
sa(dp231
g203
S'Tkinter'
p232
sg172
S'_CancelBtn'
p233
sg205
S'Button'
p234
sg207
(lp235
(dp236
g172
S'anchor'
p237
sS'Value'
p238
S'e'
sasg209
Nsg211
(lp239
L8138L
aL9306L
asg213
(lp240
sg221
(lp241
(dp242
g172
S'text'
p243
sg238
S'Cancel'
p244
sS'Extra'
p245
Nsasa(dp246
g203
g232
sg172
S'_HiddenCodeLbl'
p247
sg205
S'Label'
p248
sg207
(lp249
sg209
Nsg211
(lp250
L6962L
aL203L
asg213
(lp251
sg221
(lp252
(dp253
g172
S'text'
p254
sg238
S'Hidden OpCodes'
p255
sg245
Nsasa(dp256
g203
g232
sg172
S'_HiddenCodeList'
p257
sg205
S'Listbox'
p258
sg207
(lp259
sg209
Nsg211
(lp260
L6847L
aL4545L
asg213
(lp261
(dp262
g216
S'_on_HiddenCodeList_select'
p263
sg218
S''
sg219
S'<<ListboxSelect>>'
p264
sasg221
(lp265
sa(dp266
g203
g224
sg172
S'_HiddenFrame'
p267
sg205
g226
sg207
(lp268
sg209
(L0L
L0L
L2L
tp269
sg211
g212
sg213
(lp270
sg221
(lp271
sa(dp272
g203
g232
sg172
S'_HideBtn'
p273
sg205
g234
sg207
(lp274
sg209
Nsg211
(lp275
L4002L
aL3816L
asg213
(lp276
(dp277
g216
S'_on_HideBtn_Button_1'
p278
sg218
S''
sg219
S'<ButtonPress-1>'
p279
sasg221
(lp280
(dp281
g172
g243
sg238
S'=>'
p282
sg245
Nsa(dp283
g172
S'state'
p284
sg238
S'disabled'
p285
sg245
Nsasa(dp286
g203
g232
sg172
S'_OkBtn'
p287
sg205
g234
sg207
(lp288
(dp289
g172
g237
sg238
S'e'
sasg209
Nsg211
(lp290
L7016L
aL9306L
asg213
(lp291
sg221
(lp292
(dp293
g172
g243
sg238
S'OK'
p294
sg245
Nsasa(dp295
g203
g224
sg172
S'_OkFrame'
p296
sg205
g226
sg207
(lp297
sg209
(L0L
L1L
tp298
sg211
g212
sg213
(lp299
sg221
(lp300
sa(dp301
g203
g224
sg172
S'_OpCodesFrame'
p302
sg205
g226
sg207
(lp303
sg209
(L0L
L0L
tp304
sg211
g212
sg213
(lp305
sg221
(lp306
sa(dp307
g203
g232
sg172
S'_ShowBtn'
p308
sg205
g234
sg207
(lp309
sg209
Nsg211
(lp310
L3996L
aL5108L
asg213
(lp311
(dp312
g216
S'_on_ShowBtn_Button_1'
p313
sg218
S''
sg219
S'<ButtonPress-1>'
p314
sasg221
(lp315
(dp316
g172
g243
sg238
S'<='
p317
sg245
Nsa(dp318
g172
g284
sg238
g285
sg245
Nsasa(dp319
g203
g232
sg172
S'_VisibleCodeList'
p320
sg205
g258
sg207
(lp321
sg209
Nsg211
(lp322
L2110L
aL4342L
asg213
(lp323
(dp324
g216
S'_on_VisibleCodeList_select'
p325
sg218
S''
sg219
S'<<ListboxSelect>>'
p326
sasg221
(lp327
sa(dp328
g203
g232
sg172
S'_VisibleCodesLbl'
p329
sg205
g248
sg207
(lp330
sg209
Nsg211
(lp331
L1825L
aL419L
asg213
(lp332
sg221
(lp333
(dp334
g172
g254
sg238
S'Visible OpCodes'
p335
sg245
Nsasa(dp336
g203
g224
sg172
S'_VisibleFrame'
p337
sg205
g226
sg207
(lp338
sg209
(L0L
L0L
L0L
tp339
sg211
g212
sg213
(lp340
sg221
(lp341
sasS'BaseClass'
p342
g171
sS'OnTab'
p343
L1L
sa(dp344
g168
g169
sg170
S'Tkinter.Toplevel'
p345
sg172
S'GameData'
p346
sg174
S'_BrowseInProcBtn'
p347
sg169
(dp348
g37
S'99.0'
p349
sg39
(lp350
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                   GameData                                   #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass GameData(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p351
aS'        #\n        #Your code here\n        #\n'
p352
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self.GameDataLoc = StringVar()\n        self.DoneDataLoc = StringVar()\n        self.InProcDataLoc = StringVar()\n        self._Frame3 = Frame(self)\n        self._Frame3.pack(side='top')\n        self._GameDataLbl = Label(self._Frame3,text='Game Data Options')\n        self._GameDataLbl.pack(side='top')\n        self._Frame5 = Frame(self)\n        self._Frame5.pack(side='top')\n        self._Frame1 = Frame(self)\n        self._Frame1.pack(side='top')\n        self._OkBtn = Button(self._Frame1,text='Ok')\n        self._OkBtn.pack(side='left')\n        self._OkBtn.bind('<ButtonPress-1>',self._on_OkBtn_Button_1)\n        self._CancelBtn = Button(self._Frame1,text='Cancel')\n        self._CancelBtn.pack(side='left')\n        self._CancelBtn.bind('<ButtonRelease-1>',self._on_CancelBtn_ButRel_1)\n        self._Frame6 = Frame(self._Frame5)\n        self._Frame6.pack(side='left')\n        self._PathLbl = Label(self._Frame6,text='Path to Game Data')\n        self._PathLbl.pack(anchor='w',side='top')\n        self._DoneLbl = Label(self._Frame6,text='Path to Done Files')\n        self._DoneLbl.pack(anchor='w',side='bottom')\n        self._InProcLbl = Label(self._Frame6,text='Path to In Process Files')\n        self._InProcLbl.pack(anchor='w',side='bottom')\n        self._Frame8 = Frame(self._Frame5)\n        self._Frame8.pack(side='left')\n        self._Frame4 = Frame(self._Frame8)\n        self._Frame4.pack(side='top')\n        self._DataLoc = Entry(self._Frame4,textvariable=self.GameDataLoc)\n        self._DataLoc.pack(side='left')\n        self._BrowseLocBtn = Button(self._Frame4,text='Browse')\n        self._BrowseLocBtn.pack(side='left')\n        self._BrowseLocBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_BrowseLocBtn_Button_1)\n        self._Frame9 = Frame(self._Frame8)\n        self._Frame9.pack(side='top')\n        self._InProcLoc = Entry(self._Frame9,textvariable=self.InProcDataLoc)\n        self._InProcLoc.pack(side='left')\n        self._BrowseInProcBtn = Button(self._Frame9,text='Browse')\n        self._BrowseInProcBtn.pack(side='left')\n        self._BrowseInProcBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_BrowseInProcBtn_ButRel_1)\n        self._Frame2 = Frame(self._Frame8)\n        self._Frame2.pack(side='top')\n        self._DoneLoc = Entry(self._Frame2,textvariable=self.DoneDataLoc)\n        self._DoneLoc.pack(side='left')\n        self._BrowseDoneBtn = Button(self._Frame2,text='Browse')\n        self._BrowseDoneBtn.pack(side='left')\n        self._BrowseDoneBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_BrowseDoneBtn_ButRel_1)\n"
p353
aS"        #\n        #Your code here\n        #\n        try:\n            self.GameDataLoc.set(GameDataLoc)\n        except:\n            self.GameDataLoc.set('')\n        try:\n            self.InProcDataLoc.set(InProcDataLoc)\n        except:\n            self.InProcDataLoc.set('')\n        try:\n            self.DoneDataLoc.set(DoneDataLoc)\n        except:\n            self.DoneDataLoc.set('')\n"
p354
aS'    #\n    #Start of event handler methods\n    #\n'
p355
aS'\n'
aS'\n    def _on_BrowseDoneBtn_ButRel_1(self'
p356
aS',Event=None):\n        loc = tkFileDialog.askdirectory()\n        if loc:\n            self.DoneDataLoc.set(loc)\n        pass\n'
p357
aS'\n    def _on_BrowseInProcBtn_ButRel_1(self'
p358
aS',Event=None):\n        loc = tkFileDialog.askdirectory()\n        if loc:\n            self.InProcDataLoc.set(loc)\n        pass\n'
p359
aS'\n    def _on_BrowseLocBtn_Button_1(self'
p360
aS',Event=None):\n        loc = tkFileDialog.askdirectory()\n        if loc:\n            self.GameDataLoc.set(loc)\n        pass\n'
p361
aS'\n    def _on_CancelBtn_ButRel_1(self'
p362
aS',Event=None):\n        # Exit\n        self.destroy()\n        pass\n'
p363
aS'\n    def _on_OkBtn_Button_1(self'
p364
aS",Event=None):\n        # Write config\n        config = ConfigParser.ConfigParser()\n        config.add_section('Game Data')\n        config.set('Game Data', 'Game_Data_Location', self.GameDataLoc.get())\n        config.set('Game Data', 'InProc_Data_Location', self.InProcDataLoc.get())\n        config.set('Game Data', 'Done_Data_Location', self.DoneDataLoc.get())\n        with open('config.cfg', 'wb') as configfile:\n            config.write(configfile)\n        # Exit\n        self.destroy()\n        pass\n"
p365
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p366
aS''
asg7
I0
sg44
I4621695
ssg195
(lp367
(lp368
L4997L
aL431L
aL0L
aa(lp369
L4997L
aL3026L
aL0L
aa(lp370
L3008L
aL1722L
aL1L
aa(lp371
L6501L
aL1507L
aL0L
aa(lp372
L6501L
aL2249L
aL0L
aasg200
(lp373
(dp374
g203
S'Tkinter'
p375
sg172
g346
sg205
S'Toplevel'
p376
sg207
(lp377
sg209
(L0L
tp378
sg211
g212
sg213
(lp379
sg221
(lp380
sa(dp381
g203
S'Tkinter'
p382
sg172
S'_BrowseDoneBtn'
p383
sg205
S'Button'
p384
sg207
(lp385
sg209
Nsg211
(lp386
L5106L
aL2584L
asg213
(lp387
(dp388
g216
S'_on_BrowseDoneBtn_ButRel_1'
p389
sg218
S''
sg219
S'<ButtonRelease-1>'
p390
sasg221
(lp391
(dp392
g172
g243
sg238
S'Browse'
p393
sg245
Nsasa(dp394
g203
g71
sg172
g347
sg205
g74
sg207
(lp395
sg209
Nsg211
(lp396
L5070L
aL1818L
asg213
(lp397
(dp398
g216
S'_on_BrowseInProcBtn_ButRel_1'
p399
sg218
S''
sg219
S'<ButtonRelease-1>'
p400
sasg221
(lp401
(dp402
g172
g243
sg238
S'Browse'
p403
sg245
Nsasa(dp404
g203
S'Tkinter'
p405
sg172
S'_BrowseLocBtn'
p406
sg205
S'Button'
p407
sg207
(lp408
sg209
Nsg211
(lp409
L5015L
aL1053L
asg213
(lp410
(dp411
g216
S'_on_BrowseLocBtn_Button_1'
p412
sg218
S''
sg219
S'<ButtonRelease-1>'
p413
sasg221
(lp414
(dp415
g172
g243
sg238
S'Browse'
p416
sg245
Nsasa(dp417
g203
S'Tkinter'
p418
sg172
S'_CancelBtn'
p419
sg205
S'Button'
p420
sg207
(lp421
sg209
Nsg211
(lp422
L5045L
aL5132L
asg213
(lp423
(dp424
g216
S'_on_CancelBtn_ButRel_1'
p425
sg218
S''
sg219
S'<ButtonRelease-1>'
p426
sasg221
(lp427
(dp428
g172
g243
sg238
S'Cancel'
p429
sg245
Nsasa(dp430
g203
g405
sg172
S'_DataLoc'
p431
sg205
S'Entry'
p432
sg207
(lp433
sg209
Nsg211
(lp434
L3463L
aL1100L
asg213
(lp435
sg221
(lp436
(dp437
g172
S'textvariable'
p438
sg238
S'GameDataLoc'
p439
sg245
S's.as'
p440
sasa(dp441
g203
g382
sg172
S'_DoneLbl'
p442
sg205
S'Label'
p443
sg207
(lp444
(dp445
g172
g237
sg238
S'w'
sasg209
Nsg211
(lp446
L1801L
aL2632L
asg213
(lp447
sg221
(lp448
(dp449
g172
g254
sg238
S'Path to Done Files'
p450
sg245
Nsasa(dp451
g203
g382
sg172
S'_DoneLoc'
p452
sg205
S'Entry'
p453
sg207
(lp454
sg209
Nsg211
(lp455
L3511L
aL2560L
asg213
(lp456
sg221
(lp457
(dp458
g172
g438
sg238
S'DoneDataLoc'
p459
sg245
S's.as'
p460
sasa(dp461
g203
S'Tkinter'
p462
sg172
S'_Frame1'
p463
sg205
S'Frame'
p464
sg207
(lp465
sg209
(L0L
L2L
tp466
sg211
g212
sg213
(lp467
sg221
(lp468
sa(dp469
g203
g101
sg172
S'_Frame2'
p470
sg205
g103
sg207
(lp471
sg209
(L0L
L1L
L1L
L2L
tp472
sg211
g212
sg213
(lp473
sg221
(lp474
sa(dp475
g203
g462
sg172
S'_Frame3'
p476
sg205
g464
sg207
(lp477
sg209
(L0L
L0L
tp478
sg211
g212
sg213
(lp479
sg221
(lp480
sa(dp481
g203
g101
sg172
S'_Frame4'
p482
sg205
g103
sg207
(lp483
sg209
(L0L
L1L
L1L
L0L
tp484
sg211
g212
sg213
(lp485
sg221
(lp486
sa(dp487
g203
g101
sg172
S'_Frame5'
p488
sg205
g103
sg207
(lp489
sg209
(L0L
L1L
tp490
sg211
g212
sg213
(lp491
sg221
(lp492
sa(dp493
g203
g101
sg172
S'_Frame6'
p494
sg205
g103
sg207
(lp495
sg209
(L0L
L1L
L0L
tp496
sg211
g212
sg213
(lp497
sg221
(lp498
sa(dp499
g203
g101
sg172
S'_Frame8'
p500
sg205
g103
sg207
(lp501
sg209
(L0L
L1L
L1L
tp502
sg211
g212
sg213
(lp503
sg221
(lp504
sa(dp505
g203
g101
sg172
S'_Frame9'
p506
sg205
g103
sg207
(lp507
sg209
(L0L
L1L
L1L
L1L
tp508
sg211
g212
sg213
(lp509
sg221
(lp510
sa(dp511
g203
g405
sg172
S'_GameDataLbl'
p512
sg205
S'Label'
p513
sg207
(lp514
sg209
Nsg211
(lp515
L4378L
aL179L
asg213
(lp516
sg221
(lp517
(dp518
g172
g254
sg238
S'Game Data Options'
p519
sg245
Nsasa(dp520
g203
g71
sg172
S'_InProcLbl'
p521
sg205
S'Label'
p522
sg207
(lp523
(dp524
g172
g237
sg238
S'w'
sasg209
Nsg211
(lp525
L1759L
aL1950L
asg213
(lp526
sg221
(lp527
(dp528
g172
g254
sg238
S'Path to In Process Files'
p529
sg245
Nsasa(dp530
g203
g71
sg172
S'_InProcLoc'
p531
sg205
S'Entry'
p532
sg207
(lp533
sg209
Nsg211
(lp534
L3481L
aL1806L
asg213
(lp535
sg221
(lp536
(dp537
g172
g438
sg238
S'InProcDataLoc'
p538
sg245
S's.as'
p539
sasa(dp540
g203
g418
sg172
S'_OkBtn'
p541
sg205
g420
sg207
(lp542
sg209
Nsg211
(lp543
L4494L
aL5144L
asg213
(lp544
(dp545
g216
S'_on_OkBtn_Button_1'
p546
sg218
S''
sg219
S'<ButtonPress-1>'
p547
sasg221
(lp548
(dp549
g172
g243
sg238
S'Ok'
p550
sg245
Nsasa(dp551
g203
g405
sg172
S'_PathLbl'
p552
sg205
g513
sg207
(lp553
(dp554
g172
g237
sg238
S'w'
sasg209
Nsg211
(lp555
L1777L
aL1208L
asg213
(lp556
sg221
(lp557
(dp558
g172
g254
sg238
S'Path to Game Data'
p559
sg245
Nsasasg342
g345
sg343
L1L
sa(dp560
g168
S'Gui'
p561
sg170
S'Tkinter.Toplevel'
p562
sg172
S'OpCodeCreator'
p563
sg174
Nsg169
(dp564
g37
S'86.0'
p565
sg39
(lp566
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                OpCodeCreator                                 #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass OpCodeCreator(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p567
aS'        #\n        #Your code here\n        #\n        self.selected_opcode = 0\n        self.selected_par = 0\n        self.opcode_list = []\n        self.par_list = []\n        self.Master = Master\n'
p568
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self.bind('<Map>',self.on_OpCodeCreator_Map)\n        self._ParValue = StringVar()\n        self._ParName = StringVar()\n        self._HeaderFrame = Frame(self)\n        self._HeaderFrame.pack(side='top')\n        self._TopLabel = Label(self._HeaderFrame\n            ,text='Define the opcode and press OK')\n        self._TopLabel.pack(side='top')\n        self._ListFrame = Frame(self)\n        self._ListFrame.pack(side='top')\n        self._OpCodeList = Listbox(self._ListFrame)\n        self._OpCodeList.pack(expand='yes',fill='both',side='left')\n        self._OpCodeList.bind('<<ListboxSelect>>',self._on_OpCodeList_select)\n        self._OpCodeList.bind('<Map>',self._on_OpCodeList_Map)\n        self._ParBox = Listbox(self._ListFrame)\n        self._ParBox.pack(side='left')\n        self._ParBox.bind('<<ListboxSelect>>',self._on_ParBox_select)\n        self._EntryFrame = Frame(self)\n        self._EntryFrame.pack(side='top')\n        self._ParNameLbl = Label(self._EntryFrame,textvariable=self._ParName)\n        self._ParNameLbl.pack(side='left')\n        self._ParEntry = Entry(self._EntryFrame,textvariable=self._ParValue)\n        self._ParEntry.pack(side='left')\n        self._AddParBtn = Button(self._EntryFrame,text='Set')\n        self._AddParBtn.pack(side='left')\n        self._AddParBtn.bind('<ButtonPress-1>',self._on_AddParBtn_Button_1)\n        self._SubmitFrame = Frame(self)\n        self._SubmitFrame.pack(expand='yes',fill='x',side='top')\n        self._CancelBtn = Button(self._SubmitFrame,text='Cancel')\n        self._CancelBtn.pack(anchor='e',side='right')\n        self._CancelBtn.bind('<ButtonPress-1>',self._on_CancelBtn_Button_1)\n        self._OkBtn = Button(self._SubmitFrame,text='OK')\n        self._OkBtn.pack(anchor='e',side='right')\n        self._OkBtn.bind('<ButtonPress-1>',self._on_OkBtn_Button_1)\n"
p569
aS'        #\n        #Your code here\n        #\n'
p570
aS'    #\n    #Start of event handler methods\n    #\n'
p571
aS'\n'
aS'\n    def _on_AddParBtn_Button_1(self'
p572
aS',Event=None):\n        # Save current parameter to the list\n        i = self.selected_par  \n        self.par_list[i] = (self.par_list[i][0], int(self._ParValue.get()))\n        # Re-populate parameters listbox\n        self._ParBox_populate()\n        pass\n'
p573
aS'\n    def _on_CancelBtn_Button_1(self'
p574
aS',Event=None):\n        self.destroy()\n        pass\n'
p575
aS'\n    def _on_OkBtn_Button_1(self'
p576
aS',Event=None):\n        question = "You really sure you want to add the new op?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            # Insert new value into the master\'s lists\n            i = self.Master.current_act_idx+1\n            self.Master.lin_stack[-1].opcode_list.insert(i, self.selected_opcode)\n            self.Master.lin_stack[-1].action_list.insert(i, OP_FUNCTIONS[self.selected_opcode])\n            self.Master.lin_stack[-1].pars_list.insert(i, self.par_list)\n            # Fix the string offset, initial value for the 0x70 + opcode\n            add_offset = 0x02\n            for par in OP_PARAMS[self.selected_opcode]:\n                # Add size of each parameter\n                add_offset += struct.calcsize(par[1]) \n            # Add the new offset to the base offset\n            self.Master.lin_stack[-1].baseoffset += add_offset\n            # Add to the master\'s listbox\n            self.Master._FlowList.insert(i, "%s%s" % (self.Master.lin_stack[-1].action_list[i], self.Master.lin_stack[-1].pars_list[i]))\n            # Exit\n            self.destroy()\n        pass\n'
p577
aS'\n    def _on_OpCodeList_Map(self'
p578
aS',Event=None):\n        for code,name in OP_FUNCTIONS.iteritems():\n            if not name:\n                self._OpCodeList.insert(END, "op_%d" % code)\n            else:\n                self._OpCodeList.insert(END, name)\n            # We need to store the opcodes, otherwise we won\'t have 2-sided relation\n            self.opcode_list.append(code)\n        pass\n    \n'
p579
aS'\n    def _on_OpCodeList_select(self'
p580
aS',Event=None):\n        i = int(self._OpCodeList.curselection()[0])\n        self.selected_opcode = self.opcode_list[i]\n        # Add the parameters to the list\n        self.par_list = []\n        for par in OP_PARAMS[self.selected_opcode]:\n            self.par_list.append((par[0], -1))\n        # Display pars in the listbox\n        self._ParBox_populate()\n        pass\n        \n    def _ParBox_populate(self):\n        self._ParBox.delete(0,END)\n        for par in self.par_list:\n            self._ParBox.insert(END, par)\n        pass\n    \n'
p581
aS'\n    def _on_ParBox_select(self'
p582
aS',Event=None):\n        self.selected_par = int(self._ParBox.curselection()[0])  \n        i = self.selected_par      \n        # Put the current name and value to the label and editbox\n        self._ParName.set(self.par_list[i][0])\n        self._ParValue.set(self.par_list[i][1])\n        pass\n'
p583
aS'\n    def on_OpCodeCreator_Map(self'
p584
aS',Event=None):\n        # Grab the focus\n        self.focus_set()\n        self.grab_set()\n        # Some strange shit happend on Windoze with the next line\n        #self.transient(self.Master)\n        pass\n'
p585
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p586
aS''
asg7
I0
sg44
I9408383
ssg195
(lp587
(lp588
L4997L
aL622L
aL0L
aa(lp589
L4997L
aL6914L
aL0L
aa(lp590
L4997L
aL8947L
aL0L
aasg200
(lp591
(dp592
g203
S'Tkinter'
p593
sg172
g563
sg205
S'Toplevel'
p594
sg207
(lp595
sg209
g210
sg211
g212
sg213
(lp596
(dp597
g216
S'on_OpCodeCreator_Map'
p598
sg218
S''
sg219
S'<Map>'
p599
sasg221
(lp600
sa(dp601
g203
S'Tkinter'
p602
sg172
S'_AddParBtn'
p603
sg205
S'Button'
p604
sg207
(lp605
sg209
Nsg211
(lp606
L4469L
aL7847L
asg213
(lp607
(dp608
g216
S'_on_AddParBtn_Button_1'
p609
sg218
S''
sg219
S'<ButtonPress-1>'
p610
sasg221
(lp611
(dp612
g172
g243
sg238
S'Set'
p613
sg245
Nsasa(dp614
g203
g602
sg172
S'_CancelBtn'
p615
sg205
g604
sg207
(lp616
(dp617
g172
g237
sg238
S'e'
sasg209
Nsg211
(lp618
L8096L
aL9617L
asg213
(lp619
(dp620
g216
S'_on_CancelBtn_Button_1'
p621
sg218
S''
sg219
S'<ButtonPress-1>'
p622
sasg221
(lp623
(dp624
g172
g243
sg238
S'Cancel'
p625
sg245
Nsasa(dp626
g203
S'Tkinter'
p627
sg172
S'_EntryFrame'
p628
sg205
S'Frame'
p629
sg207
(lp630
sg209
(L0L
L2L
tp631
sg211
g212
sg213
(lp632
sg221
(lp633
sa(dp634
g203
g627
sg172
S'_HeaderFrame'
p635
sg205
g629
sg207
(lp636
sg209
(L0L
L0L
tp637
sg211
g212
sg213
(lp638
sg221
(lp639
sa(dp640
g203
g627
sg172
S'_ListFrame'
p641
sg205
g629
sg207
(lp642
sg209
(L0L
L1L
tp643
sg211
g212
sg213
(lp644
sg221
(lp645
sa(dp646
g203
g602
sg172
S'_OkBtn'
p647
sg205
g604
sg207
(lp648
(dp649
g172
g237
sg238
S'e'
sasg209
Nsg211
(lp650
L7326L
aL9522L
asg213
(lp651
(dp652
g216
S'_on_OkBtn_Button_1'
p653
sg218
S''
sg219
S'<ButtonPress-1>'
p654
sasg221
(lp655
(dp656
g172
g243
sg238
S'OK'
p657
sg245
Nsasa(dp658
g203
g602
sg172
S'_OpCodeList'
p659
sg205
S'Listbox'
p660
sg207
(lp661
(dp662
g172
S'expand'
p663
sg238
S'yes'
p664
sa(dp665
g172
S'fill'
p666
sg238
S'both'
p667
sasg209
Nsg211
(lp668
L1662L
aL3110L
asg213
(lp669
(dp670
g216
S'_on_OpCodeList_select'
p671
sg218
S''
sg219
S'<<ListboxSelect>>'
p672
sa(dp673
g216
S'_on_OpCodeList_Map'
p674
sg218
S''
sg219
S'<Map>'
p675
sasg221
(lp676
sa(dp677
g203
g602
sg172
S'_ParBox'
p678
sg205
g660
sg207
(lp679
sg209
Nsg211
(lp680
L5409L
aL3110L
asg213
(lp681
(dp682
g216
S'_on_ParBox_select'
p683
sg218
S''
sg219
S'<<ListboxSelect>>'
p684
sasg221
(lp685
sa(dp686
g203
g602
sg172
S'_ParEntry'
p687
sg205
S'Entry'
p688
sg207
(lp689
sg209
Nsg211
(lp690
L3857L
aL7835L
asg213
(lp691
sg221
(lp692
(dp693
g172
g438
sg238
S'_ParValue'
p694
sg245
S's.as'
p695
sasa(dp696
g203
g602
sg172
S'_ParNameLbl'
p697
sg205
S'Label'
p698
sg207
(lp699
sg209
Nsg211
(lp700
L3341L
aL7775L
asg213
(lp701
sg221
(lp702
(dp703
g172
S'textvariable'
p704
sg238
S'_ParName'
p705
sg245
S's.as'
p706
sasa(dp707
g203
g627
sg172
S'_SubmitFrame'
p708
sg205
g629
sg207
(lp709
(dp710
g172
g663
sg238
g664
sa(dp711
g172
g666
sg238
S'x'
sasg209
(L0L
L3L
tp712
sg211
g212
sg213
(lp713
sg221
(lp714
sa(dp715
g203
g602
sg172
S'_TopLabel'
p716
sg205
g698
sg207
(lp717
sg209
Nsg211
(lp718
L4603L
aL191L
asg213
(lp719
sg221
(lp720
(dp721
g172
g254
sg238
S'Define the opcode and press OK'
p722
sg245
Nsasasg342
g562
sg343
L1L
sa(dp723
g48
g49
sg50
g157
sg28
Nsg51
S'Tkinter.Frame'
p724
sg53
(lp725
(lp726
I4993
aI577
aI0
aa(lp727
I2542
aI5276
aI1
aa(lp728
I1265
aI1706
aI0
aa(lp729
I1265
aI9318
aI0
aa(lp730
I6271
aI7559
aI0
aa(lp731
I6271
aI8268
aI0
aa(lp732
I6271
aI6430
aI0
aa(lp733
I5280
aI3491
aI1
aa(lp734
I7744
aI3491
aI1
aa(lp735
I3911
aI5774
aI0
aa(lp736
I3911
aI2073
aI0
aa(lp737
I6506
aI5774
aI0
aa(lp738
I4342
aI6982
aI1
aa(lp739
I5750
aI6982
aI1
aa(lp740
I5945
aI9134
aI1
aa(lp741
I7966
aI9423
aI0
aasg39
(dp742
g37
S'222.0'
p743
sg39
(lp744
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                SDR2_Translate                                #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass SDR2_Translate(Frame):\n    def __init__(self,Master=None,*pos,**kw):\n'
p745
aS"        #\n        #Your code here\n        #\n        self.curPath = '.'\n        self.current_str_idx = 0\n        self.current_act_idx = 0\n        self.actionFlow = []\n        self.strange_byte = ''\n        self.currentImage = ''\n        self.scene = Scene()\n        self.charNames = getCharNames(GameDataLoc)\n        self.lin_stack = []\n        self.mode = ''\n        self.pak_filenum = 0\n        self.pak_stack = []\n        self.visible_opcodes = OP_FUNCTIONS\n        self.hidden_opcodes = {}\n"
p746
aS"\n        apply(Frame.__init__,(self,Master),kw)\n        self._CurAction = StringVar()\n        self._CurrentEditString1 = StringVar()\n        self._CurrentEditString2 = StringVar()\n        self._CurrentEditString3 = StringVar()\n        self._FileNameText = StringVar()\n        self._Filtered = StringVar()\n        self._TextWidthVal = StringVar()\n        self._MaxWidthEnabled = IntVar()\n        self._OpCodeEditText = StringVar()\n        self._ParEditText = StringVar()\n        self._ParLabelText = StringVar()\n        self._EditString1Len = StringVar()\n        self._EditString2Len = StringVar()\n        self._EditString3Len = StringVar()\n        self._StringIdx = StringVar()\n        self._FileNameFrame = Frame(self)\n        self._FileNameFrame.pack(fill='x',side='top')\n        self._FileName = Label(self._FileNameFrame\n            ,textvariable=self._FileNameText)\n        self._FileName.pack(side='top')\n        self._Frame2 = Frame(self)\n        self._Frame2.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self._OpFrame = Frame(self._Frame2)\n        self._OpFrame.pack(anchor='nw',fill='y',ipadx='25',side='left')\n        self._ContentFrame = Frame(self._Frame2)\n        self._ContentFrame.pack(anchor='nw',expand='yes',fill='both',side='left')\n        self._Frame1 = Frame(self._OpFrame)\n        self._Frame1.pack(fill='both',side='top')\n        self._FlowFrameLabel = Label(self._Frame1,text='Actions List')\n        self._FlowFrameLabel.pack(anchor='nw',side='left')\n        self._FilterFlowList = Checkbutton(self._Frame1\n            ,command=self._on_FilterFlowList_check,text='Filtered'\n            ,variable=self._Filtered)\n        self._FilterFlowList.pack(anchor='ne',side='right')\n        self._FlowFileUpBtn = Button(self._Frame1,state='disabled',text='UP')\n        self._FlowFileUpBtn.pack(side='right')\n        self._FlowFileUpBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_FlowFileUpBtn_ButRel_1)\n        self._FlowFrame = Frame(self._OpFrame)\n        self._FlowFrame.pack(expand='yes',fill='both',side='top')\n        self._FlowList = Listbox(self._FlowFrame)\n        self._FlowList.pack(expand='yes',fill='both',side='left')\n        self._FlowList.bind('<<ListboxSelect>>',self._on_FlowList_select)\n        self._FlowList.bind('<Double-Button-1>',self._on_FlowList_DblBtn)\n        self._FlowScroll = Scrollbar(self._FlowFrame)\n        self._FlowScroll.pack(anchor='e',fill='y',side='left')\n        self._Frame3 = Frame(self._OpFrame)\n        self._Frame3.pack(fill='x',side='top')\n        self._AddOpBtn = Button(self._Frame3,height='3',text='ADD OP')\n        self._AddOpBtn.pack(expand='yes',fill='both',side='left')\n        self._AddOpBtn.bind('<ButtonRelease-1>',self._on_AddOpBtn_Button_1)\n        self._DelOpBtn = Button(self._Frame3,text='DELETE OP')\n        self._DelOpBtn.pack(expand='yes',fill='both',side='left')\n        self._DelOpBtn.bind('<ButtonRelease-1>',self._on_DelOpBtn_Button_1)\n        self._TabHost = ttk.Notebook(self._ContentFrame)\n        self._TabHost.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self._Frame9 = Frame(self._ContentFrame)\n        self._Frame9.pack(fill='x',side='top')\n        self._WorkLabelFrame = Frame(self._ContentFrame)\n        self._WorkLabelFrame.pack(anchor='nw',fill='x',side='top')\n        self._WorkFrameLabel = Label(self._WorkLabelFrame,text='Parameters List')\n        self._WorkFrameLabel.pack(padx='35',side='left')\n        self._CurActionLabel = Label(self._WorkLabelFrame\n            ,textvariable=self._CurAction)\n        self._CurActionLabel.pack(side='left')\n        self._ParFrame = Frame(self._ContentFrame)\n        self._ParFrame.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self._StringFrame = Frame(self._TabHost)\n        self._StringFrame.pack(side='left')\n        self._MiscFrame = Frame(self._TabHost)\n        self._MiscFrame.pack(side='left')\n        self._CanvasFrame = Frame(self._TabHost)\n        self._CanvasFrame.pack(side='left')\n        self._ScreenView = Canvas(self._CanvasFrame,background='#000000'\n            ,height=SCREEN_H,width=SCREEN_W)\n        self._ScreenView.pack(expand='yes',side='left')\n        self._Frame10 = Frame(self._Frame9)\n        self._Frame10.pack(side='left')\n        self._EditString1 = ttk.Entry(self._Frame10\n            ,textvariable=self._CurrentEditString1,width='50')\n        self._EditString1.pack(anchor='s',side='top')\n        self._EditString3 = Entry(self._Frame10\n            ,textvariable=self._CurrentEditString3,width='50')\n        self._EditString3.pack(side='bottom')\n        self._EditString2 = Entry(self._Frame10\n            ,textvariable=self._CurrentEditString2,width='50')\n        self._EditString2.pack(side='bottom')\n        self._Frame12 = Frame(self._Frame9)\n        self._Frame12.pack(side='left')\n        self._String1Len = Label(self._Frame12,textvariable=self._EditString1Len)\n        self._String1Len.pack(side='top')\n        self._String2Len = Label(self._Frame12,textvariable=self._EditString2Len)\n        self._String2Len.pack(side='top')\n        self._String3Len = Label(self._Frame12,textvariable=self._EditString3Len)\n        self._String3Len.pack(side='bottom')\n        self._Frame11 = Frame(self._Frame9)\n        self._Frame11.pack(anchor='nw',fill='x',side='left')\n        self._SetStringBtn = Button(self._Frame11,text='SET STRING')\n        self._SetStringBtn.pack(side='left')\n        self._SetStringBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_SetStringBtn_Button_1)\n        self._Frame4 = Frame(self._ParFrame)\n        self._Frame4.pack(expand='yes',fill='both',side='left')\n        self._ParList = Listbox(self._Frame4)\n        self._ParList.pack(expand='yes',fill='both',side='top')\n        self._Frame5 = Frame(self._ParFrame)\n        self._Frame5.pack(expand='yes',fill='x',side='left')\n        self._Frame8 = Frame(self._StringFrame)\n        self._Frame8.pack(side='top')\n        self._StringListLabel = Label(self._Frame8,text='String list')\n        self._StringListLabel.pack(anchor='n',fill='x',side='left')\n        self._Frame6 = Frame(self._StringFrame)\n        self._Frame6.pack(expand='yes',fill='both',side='top')\n        self._StringList = Listbox(self._Frame6)\n        self._StringList.pack(anchor='nw',expand='yes',fill='both',side='left')\n        self._StringList.bind('<<ListboxSelect>>',self._on_StringList_select)\n        self._StringScroll = Scrollbar(self._Frame6)\n        self._StringScroll.pack(anchor='e',fill='y',side='left')\n        self._Frame7 = Frame(self._StringFrame)\n        self._Frame7.pack(fill='both',side='top')\n        self._StringIdxTextLbl = Label(self._Frame7,text='Current string:')\n        self._StringIdxTextLbl.pack(side='left')\n        self._StringIdxLbl = Label(self._Frame7,textvariable=self._StringIdx)\n        self._StringIdxLbl.pack(side='left')\n        self._AddStringBtn = Button(self._Frame7,text='Add string')\n        self._AddStringBtn.pack(anchor='e',side='left')\n        self._AddStringBtn.bind('<ButtonPress-1>' \\\n            ,self._on_AddStringBtn_Button_1)\n        self._Frame14 = Frame(self._MiscFrame)\n        self._Frame14.pack(expand='yes',fill='both',side='top')\n        self._TextAreaLbl = Label(self._Frame14,text='Text area')\n        self._TextAreaLbl.pack(anchor='n',side='top')\n        self._PakTextArea = Text(self._Frame14,height='8',wrap='word')\n        self._PakTextArea.pack(expand='yes',fill='y',side='top')\n        self._Frame13 = Frame(self._MiscFrame)\n        self._Frame13.pack(fill='x',side='top')\n        self._MaxWidthEntry = IntegerEntry(self._Frame13,state='disabled'\n            ,textvariable=self._TextWidthVal)\n        self._MaxWidthEntry.pack(side='left')\n        self._MaxWidthTest = Checkbutton(self._Frame13\n            ,command=self._on_MaxWidthTest_click,text='Max Width'\n            ,variable=self._MaxWidthEnabled)\n        self._MaxWidthTest.pack(fill='x',side='left')\n        self._SetPakTextBtn = Button(self._Frame13,text='Set Text')\n        self._SetPakTextBtn.pack(side='right')\n        self._SetPakTextBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_SetPakTextBtn_ButRel_1)\n        self._ParListFrame = Frame(self._Frame5)\n        self._ParListFrame.pack(expand='yes',fill='x',side='top')\n        self._OpCodeLabel = Label(self._ParListFrame,text='Op Code',width='10')\n        self._OpCodeLabel.pack(anchor='nw',side='left')\n        self._OpCodeEdit = Entry(self._ParListFrame\n            ,textvariable=self._OpCodeEditText)\n        self._OpCodeEdit.pack(anchor='nw',side='left')\n        self._ParEditFrame = Frame(self._Frame5)\n        self._ParEditFrame.pack(expand='yes',fill='x',side='top')\n        self._ParLabel = Label(self._ParEditFrame\n            ,textvariable=self._ParLabelText,width='10')\n        self._ParLabel.pack(anchor='nw',side='left')\n        self._ParEdit = Entry(self._ParEditFrame,textvariable=self._ParEditText)\n        self._ParEdit.pack(anchor='nw',side='left')\n        self._Button1 = Button(self._ParEditFrame)\n        self._Button1.pack(anchor='nw',side='left')\n"
p747
aS'        #\n        #Your code here\n        #\n        self._FileNameText.set(\'Select the file\')\n        self._ParLabelText.set(\'Par name\')\n        self._CurrentEditString1.trace(\'w\', self._on_EditString1_modified)\n        self._CurrentEditString2.trace(\'w\', self._on_EditString2_modified)\n        self._CurrentEditString3.trace(\'w\', self._on_EditString3_modified)\n        self._TextWidthVal.trace(\'w\', self._on_MaxWidthEntry_changed)\n        # Tabs\n        self._TabHost.add(self._CanvasFrame, text="Canvas")\n        self._TabHost.add(self._StringFrame, text="Strings")\n        self._TabHost.add(self._MiscFrame, text="Pak Text")\n        # Filter\n        self._FilterFlowList.deselect()\n        # Set menu\n        self._RootMenu = Menu(Master)\n        # File menu\n        FileMenu = Menu(self._RootMenu, tearoff=0)\n        FileMenu.add_command(label="Open", command=self.openFile)\n        FileMenu.add_command(label="Save", command=self.saveFile)\n        FileMenu.add_command(label="Check Progress", command=self.checkProgress)\n        FileMenu.add_command(label="Extract Pak", command=self.extractPak)\n        FileMenu.add_command(label="Exit", command=exit)\n        self._RootMenu.add_cascade(label="File", menu=FileMenu)\n        # Options menu\n        OptionsMenu = Menu(self._RootMenu, tearoff=0)\n        OptionsMenu.add_command(label="Game Data", command=self.openGameDataOpts)\n        self._RootMenu.add_cascade(label="Options", menu=OptionsMenu)\n        Master.config(menu=self._RootMenu)\n        # Scrollbars\n        self._FlowScroll.config( command = self._FlowList.yview )\n        self._FlowList[\'yscrollcommand\'] = self._FlowScroll.set\n        self._StringScroll.config( command = self._StringList.yview )\n        self._StringList[\'yscrollcommand\'] = self._StringScroll.set\n'
p748
aS'    #\n    #Start of event handler methods\n    #\n'
p749
aS"    def _on_EditString1_modified(self,*args):\n        # We don't need to count the <CLT>s\n        string = self._CurrentEditString1.get()\n        string = re.sub(r'<CLT.*?>', '', string)\n        self._EditString1Len.set('Chars left: %d' % (96 - len(string)))\n        pass\n\n    def _on_EditString2_modified(self,*args):\n        # We don't need to count the <CLT>s\n        string = self._CurrentEditString2.get()\n        string = re.sub(r'<CLT.*?>', '', string)\n        self._EditString2Len.set('Chars left: %d' % (96 - len(string)))\n        pass\n\n    def _on_EditString3_modified(self,*args):\n        # We don't need to count the <CLT>s\n        string = self._CurrentEditString3.get()\n        string = re.sub(r'<CLT.*?>', '', string)\n        self._EditString3Len.set('Chars left: %d' % (96 - len(string)))\n        pass\n"
p750
aS'\n    def _on_AddOpBtn_Button_1(self'
p751
aS',Event=None):\n        question = "This action will ADD a new Operation into the script. Continue?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            # Here we should open another window to add op\n            w = OpCodeCreator(self)\n            # Wait for the window to close\n            w.wait_window(w)\n            pass\n        pass\n'
p752
aS'\n    def _on_AddStringBtn_Button_1(self'
p753
aS',Event=None):\n        # Show warning\n        question = "This action will ADD a string into the script. Continue?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            s = tkSimpleDialog.askstring("Add string", "")\n            if s:\n                # Append the string into the list and add it to the listbox\n                try:\n                    # Find opcode in which we declare the number of strings\n                    ns_idx = self.lin_stack[-1].opcode_list.index(0)\n                    # Add one more string\n                    self.lin_stack[-1].pars_list[ns_idx] = (self.lin_stack[-1].pars_list[ns_idx][0], self.lin_stack[-1].pars_list[ns_idx][0][1] + 1)\n                    # Add the string to the string_list \n                    self.lin_stack[-1].string_list.append(s.encode(\'utf16\'))\n                    # Add it to the listbox\n                    self._StringList.insert(END, s)\n                    # Show the index of the new string\n                    tkMessageBox.showinfo(\'String added\', \'Inserted string index: %s\' % str(len(self.lin_stack[-1].string_list) - 1))\n                except:\n                    # Something went wrong\n                    tkMessageBox.showerror(\'Error\', \'Error adding string\')\n        pass\n'
p754
aS'\n    def _on_DelOpBtn_Button_1(self'
p755
aS',Event=None):\n        question = "This action will DELETE the Operation from the script. Continue?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            i = int(self._FlowList.curselection()[0])\n            # Delete from lists\n            self._FlowList.delete(i)\n            # Change strings section offset\n            opcode = self.lin_stack[-1].opcode_list[i]\n            offset = 0x02\n            # Add size of each parameter\n            for par in OP_PARAMS[opcode]:\n                offset += struct.calcsize(par[1]) \n            self.lin_stack[-1].baseoffset -= offset\n            # Delete opcode, action and parameters\n            del self.lin_stack[-1].opcode_list[i]\n            del self.lin_stack[-1].action_list[i]\n            del self.lin_stack[-1].pars_list[i]\n        pass\n'
p756
aS'\n    def _on_FilterFlowList_check(self'
p757
aS",Event=None):\n        if self._Filtered.get() == '1':\n            # Create a filter window\n            flt = Filter(self)\n            # Populate the window\n            flt.initLists(self.hidden_opcodes, self.visible_opcodes)\n            # Wait for the window to close\n            flt.wait_window(flt)\n            pass\n        else:\n            pass\n        pass\n"
p758
aS'\n    def _on_FlowFileUpBtn_ButRel_1(self'
p759
aS',Event=None):\n        # For lin - just pop the last one and populate with the old\n        if self.mode == \'.lin\':\n            st = self.lin_stack\n            question = "Save changes?"\n            proceed = tkMessageBox.askyesno("WARNING", question)\n            if proceed:\n                self.saveFile()\n            st.pop()\n            self.populateLinLists()\n            # Check stack size, if last element - disable UP btn\n            if len(st) < 2:\n                self._FlowFileUpBtn.config(state=\'disabled\')\n            # Fix header\n            self._FileNameText.set(os.path.split(st[-1].fn)[1])\n            pass\n        # For pak - we have internal writer\n        if self.mode == \'.pak\':\n            st = self.pak_stack\n            # Save changes\n            question = "Save changes?"\n            proceed = tkMessageBox.askyesno("WARNING", question)\n            if proceed:\n                # Create a data tuple\n                filename = st[-2].files[self.pak_filenum][0]\n                data = st[-1].to_string()\n                st[-2].files[self.pak_filenum] = (filename, data)\n            # Clear flowlist and pop the last element of the pak stack\n            self._FlowList.delete(0,END)\n            st.pop()\n            # Populate flowlist with original pak\'s files\n            for f in st[-1].files:\n                self._FlowList.insert(END, "%s" % f[0])                \n            # Check stack size, if last element - disable UP btn\n            if len(st) < 2:\n                self._FlowFileUpBtn.config(state=\'disabled\')\n        pass\n'
p760
aS'\n    def _on_FlowList_DblBtn(self'
p761
aS',Event=None):\n        if self.mode == \'.pak\':\n            self._on_FlowList_DblBtn_Pak()\n        pass\n    \n    def _on_FlowList_DblBtn_Pak(self):\n        if self._FlowList.size() > 0:\n            # Now working not with actions, but with files\n            i = int(self._FlowList.curselection()[0])\n            file = self.pak_stack[-1].files[i]\n            if \'.dat\' in file[0] or \'.p3d\' in file[0]:\n                question = "Try unpacking binary file?"\n                proceed = tkMessageBox.askyesno("WARNING", question)\n                if proceed:\n                    self.pak_filenum = i\n                    # We\'ll use it as a directory\n                    self._FlowList.delete(0,END)\n                    # Now unpack the file\n                    pak = PakFile()\n                    pak.fromData(file[1])\n                    self.pak_stack.append(pak)\n                    for f in self.pak_stack[-1].files:\n                        self._FlowList.insert(END, "%s" % f[0])\n                    # Set UP btn working\n                    self._FlowFileUpBtn.config(state=\'normal\')\n'
p762
aS'\n    def _on_FlowList_select(self'
p763
aS',Event=None):\n        self.current_act_idx = int(self._FlowList.curselection()[0])\n        if self.mode == \'.lin\':\n            self._on_FlowList_select_Lin()\n        if self.mode == \'.pak\':\n            self._on_FlowList_select_Pak()\n        pass\n    \n    def _on_FlowList_select_Lin(self):\n        if self._FlowList.size() > 0:\n            i = int(self._FlowList.curselection()[0])\n            action = self.lin_stack[-1].action_list[i]\n            pars = self.lin_stack[-1].pars_list[i]\n            code = self.lin_stack[-1].opcode_list[i]\n            # Clear everything related to pars in GUI\n            self._OpCodeEditText.set(\'\')\n            self._ParEditText.set(\'\')\n            self._ParLabelText.set(\'Par name\')\n            self._ParList.delete(0,END)\n            # Put all parameters to the GUI\n            self._OpCodeEditText.set(code)\n            for par in pars:\n                self._ParList.insert(END, "%s:\\t %d" % (par[0],par[1]) )\n            # What to do for different opcodes\n            # Show sprite\n            if code == WRD_SPRITE:\n                GuiFuncs.showSprite(self, GameDataLoc, pars)\n            # Show flash\n            if code == WRD_FLASH:\n                GuiFuncs.showFlash(self, GameDataLoc, pars)\n            # Show BGD\n            if code == WRD_BGD:\n                GuiFuncs.showBGD(self, GameDataLoc, pars)\n            # Text highlighting\n            if code == WRD_CLT:\n                self.scene.text_clt = True\n            # Get string idx\n            if code == WRD_GET_LINE_IDX:\n                self._StringList.select_set(pars[0][1])\n                self._on_StringList_select()\n                self.scene.text = self._StringList.get(pars[0][1])\n            # Print next string from FIFO\n            if code == WRD_PRINT_LINE:\n                GuiFuncs.printLine(self)\n            # If waiting for input (go to the next line waiting)\n            if code == WRD_WAIT_INPUT:\n                self.scene.text = \'\'\n            # Set speaker\n            if code == WRD_SPEAKER:\n                self.scene.speaker = self.charNames[pars[0][1]]\n            # Call script\n            if code == WRD_CALL_SCRIPT:\n                question = \'Call script: e%02d_%03d_%03d.lin?\' % (pars[0][1], pars[1][1], pars[2][1])\n                proceed = tkMessageBox.askyesno("Call script", question)\n                if proceed:\n                    # Clear canvas\n                    self._ScreenView.delete(ALL)\n                    self.scene.flash = []\n                    # Clear lists\n                    self._FlowList.delete(0,END)\n                    self._StringList.delete(0,END)\n                    # Load next file\n                    next_fn = os.path.join(DoneDataLoc, \'jp\', \'script\', \'e%02d_%03d_%03d.lin\' % (pars[0][1], pars[1][1], pars[2][1]))\n                    if not os.path.isfile(next_fn):\n                        next_fn = os.path.join(GameDataLoc, \'jp\', \'script\', \'e%02d_%03d_%03d.lin\' % (pars[0][1], pars[1][1], pars[2][1]))                    \n                    self.decodeFile(next_fn, clear = False)\n                    # Set UP btn working\n                    self._FlowFileUpBtn.config(state=\'normal\')\n            # Go to the next script\n            if code == WRD_GOTO_SCRIPT:\n                question = \'Go to the next script: e%02d_%03d_%03d.lin?\' % (pars[0][1], pars[1][1], pars[2][1])\n                loadNext = tkMessageBox.askyesno("Go to the next script", question)\n                if loadNext:\n                    # Clear canvas\n                    self._ScreenView.delete(ALL)\n                    self.scene.flash = []\n                    # Clear lists\n                    self._FlowList.delete(0,END)\n                    self._StringList.delete(0,END)\n                    # Load next file\n                    next_fn = os.path.join(DoneDataLoc, \'jp\', \'script\', \'e%02d_%03d_%03d.lin\' % (pars[0][1], pars[1][1], pars[2][1]))\n                    if not os.path.isfile(next_fn):\n                        next_fn = os.path.join(GameDataLoc, \'jp\', \'script\', \'e%02d_%03d_%03d.lin\' % (pars[0][1], pars[1][1], pars[2][1]))                    \n                    self.decodeFile(next_fn)\n        pass\n    \n    def _on_FlowList_select_Pak(self):\n        if self._FlowList.size() > 0:\n            # Now working not with actions, but with files\n            i = int(self._FlowList.curselection()[0])    \n            # If not - looking at the current pak file and level\n            file = self.pak_stack[-1].files[i]\n            # Checking the file type\n            if \'.gim\' in file[0]:\n                GimImage = GimFile()\n                GimImage.fromData(file[1])\n                GimImage.getImage()\n                pilImage = PIL.Image.new("RGBA", (GimImage.width, GimImage.height))\n                pilImage.putdata(GimImage.image)\n                self.scene.sprite = ImageTk.PhotoImage(pilImage)\n                POS_X = (2*SCREEN_W - GimImage.width)/2\n                POS_Y = (2*SCREEN_H - GimImage.height)/2\n                imagesprite = self._ScreenView.create_image(POS_X,POS_Y,image=self.scene.sprite, tag = \'sprite\')                \n            elif \'.gmo\' in file[0]:\n                GmoImage = GmoFile()\n                GmoImage.fromData(file[1])\n                GmoImage.extractGim()\n                GmoImage.gim.getImage()\n                pilImage = PIL.Image.new("RGBA", (GmoImage.gim.width, GmoImage.gim.height))\n                pilImage.putdata(GmoImage.gim.image)\n                self.scene.sprite = ImageTk.PhotoImage(pilImage)\n                POS_X = (2*SCREEN_W - GmoImage.gim.width)/2\n                POS_Y = (2*SCREEN_H - GmoImage.gim.height)/2\n                imagesprite = self._ScreenView.create_image(POS_X,POS_Y,image=self.scene.sprite, tag = \'sprite\')                \n            elif \'.txt\' in file[0]:\n                self.scene.text = file[1].decode(\'utf16\')\n                self._CurrentEditString1.set(self.scene.text)\n                self._PakTextArea.delete(1.0, END)\n                self._PakTextArea.insert(END, self.scene.text)\n        pass\n                \n    def openGameDataOpts(self):\n        gd = GameData()\n        pass\n    \n    def extractPak(self):\n        options = {}\n        options[\'filetypes\'] = [(\'pak files\', (\'*.pak\',\'*.p3d\'))]\n        fn = tkFileDialog.askopenfilename(**options)\n        ds = tkFileDialog.askdirectory()\n        if fn and ds:\n            pak = PakFile(fn)\n            pak.getFiles()\n            for f in pak.files:\n                fp = open(os.path.join(ds, f[0]), \'wb\')\n                fp.write(f[1])\n                fp.close\n        tkMessageBox.showinfo(\'Complete\', \'Pak file %s extracted successfully into %s\' % (fn, ds))\n        pass\n    \n    def checkProgress(self):\n        DataPath = {\'orig\': GameDataLoc,\n                             \'proc\': InProcDataLoc,\n                             \'done\': DoneDataLoc\n        }\n        fn = checkProgress(DataPath)\n        if fn:\n            self.openFile(fn)\n        pass\n        \n    def openFile(self, fn = None):\n        options = {}\n        options[\'filetypes\'] = [(\'script files\', \'.lin\'), (\'image files\', (\'*.gim\',\'*.gmo\')), (\'pak files\', (\'*.pak\',\'*.p3d\')), (\'all files\', \'.*\')]\n        if not fn:\n            fn = tkFileDialog.askopenfilename(**options)\n        if fn:\n            self.decodeFile(fn)\n        pass\n    \n    def saveFile(self):\n        fn = tkFileDialog.asksaveasfilename(initialfile=self._FileNameText.get())\n        if fn:\n            self.encodeFile(fn)\n            # Get current slider positions and re-read both files\n            fl = self._FlowList.yview()\n            st = self._StringList.yview()\n            self.decodeFile(fn)\n            self._FlowList.yview_moveto(fl[0])\n            self._StringList.yview_moveto(st[0])\n        pass\n    \n    def populateLinLists(self):\n        # Clear everything\n        self._StringList.delete(0,END)\n        self._FlowList.delete(0,END)\n        # Put strings into listbox\n        for s in self.lin_stack[-1].string_list:\n            self._StringList.insert(END, s.decode(\'utf16\'))        \n        # Set action list\n        for i in xrange(len(self.lin_stack[-1].action_list)):\n            self._FlowList.insert(END, "%s%s" % (self.lin_stack[-1].action_list[i], self.lin_stack[-1].pars_list[i]))\n        pass\n    \n    def decodeFile(self, fn, clear = True):\n        # Clear stacks\n        if clear:\n            self.lin_stack = []\n            self.pak_stack = []\n        # Get file type from ext\n        file = os.path.split(fn)[1]\n        self._FileNameText.set(file)\n        print("Decoding %s" % fn)\n        # Lin file\n        if \'.lin\' in file:\n            self.mode = \'.lin\'\n            # Decode another file\n            self.lin_stack.append(LinFile())\n            self.lin_stack[-1].decodeLinFile(fn)\n            self.populateLinLists()\n        \n        # Pak file\n        if \'.pak\' in file:\n            self.mode = \'.pak\'\n            # Decode .pak file\n            pak = PakFile(fn)\n            pak.getFiles()\n            # Append it into stack\n            self.pak_stack.append(pak)\n            # Clear everything\n            self._StringList.delete(0,END)\n            self._FlowList.delete(0,END)\n            # Put all filenames into the flow list\n            for f in self.pak_stack[-1].files:\n                self._FlowList.insert(END, "%s" % f[0])\n        \n        # P3d file\n        if \'.p3d\' in file:\n            self.mode = \'.pak\'\n            # Decode .pak file\n            pak = P3dFile(fn)\n            pak.getFiles()\n            # Append it into stack\n            self.pak_stack.append(pak)\n            # Clear everything\n            self._StringList.delete(0,END)\n            self._FlowList.delete(0,END)\n            # Put all filenames into the flow list\n            for f in self.pak_stack[-1].files:\n                self._FlowList.insert(END, "%s" % f[0])\n        pass\n        \n    def encodeFile(self,fn):\n        file = os.path.split(fn)[1]\n        self._FileNameText.set(file)\n        if \'.lin\' in fn:\n            self.lin_stack[-1].encodeLinFile(fn)\n        if \'.pak\' in fn:\n            self.pak_stack[-1].makePak(fn)\n        pass\n        \n    def exit():\n        Root.quit()\n\n'
p764
aS'\n    def _on_MaxWidthEntry_changed(self'
p765
aS',*args):\n        try:\n            self._PakTextArea.config(width=int(self._TextWidthVal.get()))\n        except:\n            pass\n        pass\n'
p766
aS'\n    def _on_MaxWidthTest_click(self'
p767
aS",Event=None):\n        if self._MaxWidthEnabled.get() == 1:\n            self._MaxWidthEntry.config(state='normal')\n            try: \n                self._PakTextArea.config(width=int(self._TextWidthVal.get()))\n            except:\n                self._TextWidthVal.set('36')\n        else:\n            self._MaxWidthEntry.config(state='disabled')\n        pass\n"
p768
aS'\n    def _on_SetPakTextBtn_ButRel_1(self'
p769
aS",Event=None):\n        str = self._PakTextArea.get(1.0, END)\n        i = self.current_act_idx\n        l = list(self.pak_stack[-1].files[i])\n        l[1] = str.encode('utf16')\n        self.pak_stack[-1].files[i] = tuple(l)\n        pass\n"
p770
aS'\n    def _on_SetStringBtn_Button_1(self'
p771
aS',Event=None):\n        # For .lin file we\'re just changing the string in its string_list\n        if self.mode == \'.lin\':\n            # Construct the new string\n            str1 = self._CurrentEditString1.get()\n            str2 = self._CurrentEditString2.get()\n            str3 = self._CurrentEditString3.get()\n            final_string = \'\'\n            if str1 != \'\':\n                final_string += str1 + (\'\\x0d\\x00\\x0a\\x00\').decode(\'utf16\')\n            if str2 != \'\':\n                final_string += str2 + (\'\\x0d\\x00\\x0a\\x00\').decode(\'utf16\')\n            if str3 != \'\':\n                final_string += str3 + (\'\\x0d\\x00\\x0a\\x00\').decode(\'utf16\')\n            # Replace chars that\'re not present in the game\n            final_string = final_string.replace(\'?\', u"\\uFF1F") # Question mark\n            # Get string index\n            idx = self.current_str_idx\n            # Delete the old string from the visible list\n            self._StringList.delete(idx)\n            # Insert the new string\n            self.lin_stack[-1].string_list[idx] = final_string\n            self._StringList.insert(idx, final_string)\n            # Show the new version\n            self.scene.text = self._StringList.get(idx)\n            GuiFuncs.printLine(self)\n        # For .pak we\'re changing the Pak.files[i] content\n        elif self.mode == \'.pak\':\n            str = self._CurrentEditString1.get()\n            i = self.current_act_idx\n            l = list(self.pak_stack[-1].files[i])\n            l[1] = str.encode(\'utf16\')\n            self.pak_stack[-1].files[i] = tuple(l)\n        pass\n'
p772
aS'\n    def _on_StringList_select(self'
p773
aS",Event=None):\n        if self._StringList.size() > 0:\n            num = int(self._StringList.curselection()[0])\n            string = self._StringList.get(num)\n            string = string.split('\\r\\n')\n            self._CurrentEditString1.set(string[0])\n            if len(string) > 1:\n                self._CurrentEditString2.set(string[1])\n            else:\n                self._CurrentEditString2.set('')\n            if len(string) > 2:\n                self._CurrentEditString3.set(string[2])\n            else:\n                self._CurrentEditString3.set('')\n            self.current_str_idx = num\n            self._StringIdx.set(num)\n        pass\n"
p774
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p775
aS'\n# This one-liner splits the string without consuming delimiters\ndef splitkeepsep(s, sep):\n    return reduce(lambda acc, elem: acc[:-1] + [acc[-1] + elem] if elem == sep else acc + [elem], re.split("(%s)" % re.escape(sep), s), [])'
p776
asg7
I0
sg44
I16268671
ssg29
(lp777
(dp778
g70
S'Tkinter'
p779
sg50
g157
sg73
S'Frame'
p780
sg75
(lp781
sg24
g149
sg85
g108
sg87
(lp782
sg89
(lp783
sa(dp784
g70
g602
sg50
S'_AddOpBtn'
p785
sg73
g604
sg75
(lp786
(dp787
g50
g81
sg79
g664
sa(dp788
g50
g84
sg79
g667
sasg24
Nsg85
(lp789
I795
aI9685
asg87
(lp790
(dp791
g135
S'_on_AddOpBtn_Button_1'
p792
sg137
S''
sg138
S'<ButtonRelease-1>'
p793
sasg89
(lp794
(dp795
g50
S'text'
p796
sg79
S'ADD OP'
p797
sg144
Nsa(dp798
g50
S'height'
p799
sg79
S'n:3'
p800
sg144
Nsasa(dp801
g70
S'Tkinter'
p802
sg50
S'_AddStringBtn'
p803
sg73
S'Button'
p804
sg75
(lp805
(dp806
g50
g78
sg79
S'e'
sasg24
Nsg85
(lp807
I3794
aI6142
asg87
(lp808
(dp809
g135
S'_on_AddStringBtn_Button_1'
p810
sg137
S''
sg138
S'<ButtonPress-1>'
p811
sasg89
(lp812
(dp813
g50
g796
sg79
S'Add string'
p814
sg144
Nsasa(dp815
g70
g232
sg50
S'_Button1'
p816
sg73
g234
sg75
(lp817
(dp818
g50
g78
sg79
S'nw'
p819
sasg24
Nsg85
(lp820
I7875
aI9738
asg87
(lp821
sg89
(lp822
sa(dp823
g70
S'Tkinter'
p824
sg50
S'_CanvasFrame'
p825
sg73
S'Frame'
p826
sg75
(lp827
sg24
(L0L
L1L
L1L
L0L
L2L
tp828
sg85
g108
sg87
(lp829
sg89
(lp830
sa(dp831
g70
S'Tkinter'
p832
sg50
S'_ContentFrame'
p833
sg73
S'Frame'
p834
sg75
(lp835
(dp836
g50
g78
sg79
S'nw'
p837
sa(dp838
g50
g81
sg79
S'yes'
p839
sa(dp840
g50
g84
sg79
S'both'
p841
sasg24
(L0L
L1L
L1L
tp842
sg85
g108
sg87
(lp843
sg89
(lp844
sa(dp845
g70
S'Tkinter'
p846
sg50
S'_CurActionLabel'
p847
sg73
S'Label'
p848
sg75
(lp849
sg24
Nsg85
(lp850
I6362
aI7822
asg87
(lp851
sg89
(lp852
(dp853
g50
S'textvariable'
p854
sg79
S'_CurAction'
p855
sg144
S's.as'
p856
sasa(dp857
g70
g602
sg50
S'_DelOpBtn'
p858
sg73
g604
sg75
(lp859
(dp860
g50
g81
sg79
g664
sa(dp861
g50
g84
sg79
g667
sasg24
Nsg85
(lp862
I1512
aI9685
asg87
(lp863
(dp864
g135
S'_on_DelOpBtn_Button_1'
p865
sg137
S''
sg138
S'<ButtonRelease-1>'
p866
sasg89
(lp867
(dp868
g50
g796
sg79
S'DELETE OP'
p869
sg144
Nsasa(dp870
g70
S'Tkinter'
p871
sg50
S'_EditString1'
p872
sg73
S'Entry'
p873
sg75
(lp874
(dp875
g50
g78
sg79
S's'
sasg24
Nsg85
(lp876
I3272
aI6640
asg87
(lp877
sg89
(lp878
(dp879
g50
S'pyclass'
p880
sg79
S'ttk.Entry'
p881
sg144
Nsa(dp882
g50
S'width'
p883
sg79
S'n:50'
p884
sg144
Nsa(dp885
g50
S'textvariable'
p886
sg79
S'_CurrentEditString1'
p887
sg144
S's.as'
p888
sasa(dp889
g70
g846
sg50
S'_EditString2'
p890
sg73
S'Entry'
p891
sg75
(lp892
sg24
Nsg85
(lp893
I3286
aI7008
asg87
(lp894
sg89
(lp895
(dp896
g50
g883
sg79
S'n:50'
p897
sg144
Nsa(dp898
g50
g886
sg79
S'_CurrentEditString2'
p899
sg144
S's.as'
p900
sasa(dp901
g70
S'Tkinter'
p902
sg50
S'_EditString3'
p903
sg73
S'Entry'
p904
sg75
(lp905
sg24
Nsg85
(lp906
I3299
aI7323
asg87
(lp907
sg89
(lp908
(dp909
g50
g883
sg79
S'n:50'
p910
sg144
Nsa(dp911
g50
g886
sg79
S'_CurrentEditString3'
p912
sg144
S's.as'
p913
sasa(dp914
g70
S'Tkinter'
p915
sg50
S'_FileName'
p916
sg73
S'Label'
p917
sg75
(lp918
sg24
Nsg85
(lp919
I4615
aI236
asg87
(lp920
sg89
(lp921
(dp922
g50
g854
sg79
S'_FileNameText'
p923
sg144
S's.as'
p924
sasa(dp925
g70
g832
sg50
S'_FileNameFrame'
p926
sg73
g834
sg75
(lp927
(dp928
g50
g84
sg79
S'x'
sasg24
(L0L
L0L
tp929
sg85
g108
sg87
(lp930
sg89
(lp931
sa(dp932
g70
g232
sg50
S'_FilterFlowList'
p933
sg73
S'Checkbutton'
p934
sg75
(lp935
(dp936
g50
g78
sg79
S'ne'
p937
sasg24
Nsg85
(lp938
I1982
aI1470
asg87
(lp939
sg89
(lp940
(dp941
g50
S'text'
p942
sg79
S'Filtered'
p943
sg144
Nsa(dp944
g50
S'variable'
p945
sg79
S'_Filtered'
p946
sg144
S'sif.as'
p947
sa(dp948
g50
S'command'
p949
sg79
S'_on_FilterFlowList_check'
p950
sg144
L1L
sasa(dp951
g70
g382
sg50
S'_FlowFileUpBtn'
p952
sg73
g384
sg75
(lp953
sg24
Nsg85
(lp954
I1199
aI1444
asg87
(lp955
(dp956
g135
S'_on_FlowFileUpBtn_ButRel_1'
p957
sg137
S''
sg138
S'<ButtonRelease-1>'
p958
sasg89
(lp959
(dp960
g50
g796
sg79
S'UP'
p961
sg144
Nsa(dp962
g50
S'state'
p963
sg79
S'disabled'
p964
sg144
Nsasa(dp965
g70
g627
sg50
S'_FlowFrame'
p966
sg73
g629
sg75
(lp967
(dp968
g50
g81
sg79
g664
sa(dp969
g50
g84
sg79
g667
sasg24
(L0L
L1L
L0L
L1L
tp970
sg85
g108
sg87
(lp971
sg89
(lp972
sa(dp973
g70
g915
sg50
S'_FlowFrameLabel'
p974
sg73
g917
sg75
(lp975
(dp976
g50
g78
sg79
S'nw'
p977
sasg24
Nsg85
(lp978
I287
aI1444
asg87
(lp979
sg89
(lp980
(dp981
g50
S'text'
p982
sg79
S'Actions List'
p983
sg144
Nsasa(dp984
g70
g382
sg50
S'_FlowList'
p985
sg73
S'Listbox'
p986
sg75
(lp987
(dp988
g50
g81
sg79
S'yes'
p989
sa(dp990
g50
g84
sg79
S'both'
p991
sasg24
Nsg85
(lp992
I991
aI4646
asg87
(lp993
(dp994
g135
S'_on_FlowList_select'
p995
sg137
S''
sg138
S'<<ListboxSelect>>'
p996
sa(dp997
g135
S'_on_FlowList_DblBtn'
p998
sg137
S''
sg138
S'<Double-Button-1>'
p999
sasg89
(lp1000
sa(dp1001
g70
g382
sg50
S'_FlowScroll'
p1002
sg73
S'Scrollbar'
p1003
sg75
(lp1004
(dp1005
g50
g78
sg79
S'e'
sa(dp1006
g50
g84
sg79
S'y'
sasg24
Nsg85
(lp1007
I1317
aI4646
asg87
(lp1008
sg89
(lp1009
sa(dp1010
g70
g224
sg50
S'_Frame1'
p1011
sg73
g226
sg75
(lp1012
(dp1013
g50
g84
sg79
S'both'
p1014
sasg24
(L0L
L1L
L0L
L0L
tp1015
sg85
g108
sg87
(lp1016
sg89
(lp1017
sa(dp1018
g70
S'Tkinter'
p1019
sg50
S'_Frame10'
p1020
sg73
S'Frame'
p1021
sg75
(lp1022
sg24
(L0L
L1L
L1L
L1L
L0L
tp1023
sg85
g108
sg87
(lp1024
sg89
(lp1025
sa(dp1026
g70
g1019
sg50
S'_Frame11'
p1027
sg73
g1021
sg75
(lp1028
(dp1029
g50
g78
sg79
S'nw'
p1030
sa(dp1031
g50
g84
sg79
S'x'
sasg24
(L0L
L1L
L1L
L1L
L2L
tp1032
sg85
g108
sg87
(lp1033
sg89
(lp1034
sa(dp1035
g70
g1019
sg50
S'_Frame12'
p1036
sg73
g1021
sg75
(lp1037
sg24
(L0L
L1L
L1L
L1L
L1L
tp1038
sg85
g108
sg87
(lp1039
sg89
(lp1040
sa(dp1041
g70
S'Tkinter'
p1042
sg50
S'_Frame13'
p1043
sg73
S'Frame'
p1044
sg75
(lp1045
(dp1046
g50
g84
sg79
S'x'
sasg24
(L0L
L1L
L1L
L0L
L1L
L1L
tp1047
sg85
g108
sg87
(lp1048
sg89
(lp1049
sa(dp1050
g70
g1042
sg50
S'_Frame14'
p1051
sg73
g1044
sg75
(lp1052
(dp1053
g50
g81
sg79
S'yes'
p1054
sa(dp1055
g50
g84
sg79
S'both'
p1056
sasg24
(L0L
L1L
L1L
L0L
L1L
L0L
tp1057
sg85
g108
sg87
(lp1058
sg89
(lp1059
sa(dp1060
g70
g832
sg50
S'_Frame2'
p1061
sg73
g834
sg75
(lp1062
(dp1063
g50
g78
sg79
g837
sa(dp1064
g50
g81
sg79
S'yes'
p1065
sa(dp1066
g50
g84
sg79
S'both'
p1067
sasg24
(L0L
L1L
tp1068
sg85
g108
sg87
(lp1069
sg89
(lp1070
sa(dp1071
g70
g627
sg50
S'_Frame3'
p1072
sg73
g629
sg75
(lp1073
(dp1074
g50
g84
sg79
S'x'
sasg24
(L0L
L1L
L0L
L2L
tp1075
sg85
g108
sg87
(lp1076
sg89
(lp1077
sa(dp1078
g70
S'Tkinter'
p1079
sg50
S'_Frame4'
p1080
sg73
S'Frame'
p1081
sg75
(lp1082
(dp1083
g50
g81
sg79
S'yes'
p1084
sa(dp1085
g50
g84
sg79
g1014
sasg24
(L0L
L1L
L1L
L3L
L0L
tp1086
sg85
g108
sg87
(lp1087
sg89
(lp1088
sa(dp1089
g70
g1079
sg50
S'_Frame5'
p1090
sg73
g1081
sg75
(lp1091
(dp1092
g50
g81
sg79
S'yes'
p1093
sa(dp1094
g50
g84
sg79
S'x'
sasg24
(L0L
L1L
L1L
L3L
L1L
tp1095
sg85
g108
sg87
(lp1096
sg89
(lp1097
sa(dp1098
g70
S'Tkinter'
p1099
sg50
S'_Frame6'
p1100
sg73
S'Frame'
p1101
sg75
(lp1102
(dp1103
g50
g81
sg79
S'yes'
p1104
sa(dp1105
g50
g84
sg79
S'both'
p1106
sasg24
(L0L
L1L
L1L
L0L
L0L
L1L
tp1107
sg85
g108
sg87
(lp1108
sg89
(lp1109
sa(dp1110
g70
g1099
sg50
S'_Frame7'
p1111
sg73
g1101
sg75
(lp1112
(dp1113
g50
g84
sg79
g1106
sasg24
(L0L
L1L
L1L
L0L
L0L
L2L
tp1114
sg85
g108
sg87
(lp1115
sg89
(lp1116
sa(dp1117
g70
S'Tkinter'
p1118
sg50
S'_Frame8'
p1119
sg73
S'Frame'
p1120
sg75
(lp1121
sg24
(L0L
L1L
L1L
L0L
L0L
L0L
tp1122
sg85
g108
sg87
(lp1123
sg89
(lp1124
sa(dp1125
g70
g1079
sg50
S'_Frame9'
p1126
sg73
g1081
sg75
(lp1127
(dp1128
g50
g84
sg79
S'x'
sasg24
(L0L
L1L
L1L
L1L
tp1129
sg85
g108
sg87
(lp1130
sg89
(lp1131
sa(dp1132
g70
S'Tkinter'
p1133
sg50
S'_MaxWidthEntry'
p1134
sg73
S'Entry'
p1135
sg75
(lp1136
sg24
Nsg85
(lp1137
I5593
aI6089
asg87
(lp1138
sg89
(lp1139
(dp1140
g50
g880
sg79
S'IntegerEntry'
p1141
sg144
Nsa(dp1142
g50
S'state'
p1143
sg79
S'disabled'
p1144
sg144
Nsa(dp1145
g50
g886
sg79
S'_TextWidthVal'
p1146
sg144
S's.as'
p1147
sasa(dp1148
g70
g1133
sg50
S'_MaxWidthTest'
p1149
sg73
S'Checkbutton'
p1150
sg75
(lp1151
(dp1152
g50
g84
sg79
S'x'
sasg24
Nsg85
(lp1153
I5828
aI6037
asg87
(lp1154
sg89
(lp1155
(dp1156
g50
g942
sg79
S'Max Width'
p1157
sg144
Nsa(dp1158
g50
g945
sg79
S'_MaxWidthEnabled'
p1159
sg144
S'sif.ai'
p1160
sa(dp1161
g50
g949
sg79
S'_on_MaxWidthTest_click'
p1162
sg144
L1L
sasa(dp1163
g70
g224
sg50
S'_MiscFrame'
p1164
sg73
g226
sg75
(lp1165
sg24
(L0L
L1L
L1L
L0L
L1L
tp1166
sg85
g108
sg87
(lp1167
sg89
(lp1168
sa(dp1169
g70
S'Tkinter'
p1170
sg50
S'_OpCodeEdit'
p1171
sg73
S'Entry'
p1172
sg75
(lp1173
(dp1174
g50
g78
sg79
S'nw'
p1175
sasg24
Nsg85
(lp1176
I7093
aI8714
asg87
(lp1177
sg89
(lp1178
(dp1179
g50
g886
sg79
S'_OpCodeEditText'
p1180
sg144
S's.as'
p1181
sasa(dp1182
g70
g846
sg50
S'_OpCodeLabel'
p1183
sg73
g848
sg75
(lp1184
(dp1185
g50
g78
sg79
g1175
sasg24
Nsg85
(lp1186
I6375
aI8714
asg87
(lp1187
sg89
(lp1188
(dp1189
g50
g982
sg79
S'Op Code'
p1190
sg144
Nsa(dp1191
g50
S'width'
p1192
sg79
S'n:10'
p1193
sg144
Nsasa(dp1194
g70
g832
sg50
S'_OpFrame'
p1195
sg73
g834
sg75
(lp1196
(dp1197
g50
S'ipadx'
p1198
sg79
S'n:25'
p1199
sa(dp1200
g50
g78
sg79
g837
sa(dp1201
g50
g84
sg79
S'y'
sasg24
(L0L
L1L
L0L
tp1202
sg85
g108
sg87
(lp1203
sg89
(lp1204
sa(dp1205
g70
g1133
sg50
S'_PakTextArea'
p1206
sg73
S'Text'
p1207
sg75
(lp1208
(dp1209
g50
g81
sg79
g1054
sa(dp1210
g50
g84
sg79
S'y'
sasg24
Nsg85
(lp1211
I6206
aI2441
asg87
(lp1212
sg89
(lp1213
(dp1214
g50
S'height'
p1215
sg79
S'n:8'
p1216
sg144
Nsa(dp1217
g50
S'wrap'
p1218
sg79
S'word'
p1219
sg144
Nsasa(dp1220
g70
g846
sg50
S'_ParEdit'
p1221
sg73
g891
sg75
(lp1222
(dp1223
g50
g78
sg79
g819
sasg24
Nsg85
(lp1224
I7106
aI9685
asg87
(lp1225
sg89
(lp1226
(dp1227
g50
g886
sg79
S'_ParEditText'
p1228
sg144
S's.as'
p1229
sasa(dp1230
g70
g1079
sg50
S'_ParEditFrame'
p1231
sg73
g1081
sg75
(lp1232
(dp1233
g50
g81
sg79
g1084
sa(dp1234
g50
g84
sg79
S'x'
sasg24
(L0L
L1L
L1L
L3L
L1L
L1L
tp1235
sg85
g108
sg87
(lp1236
sg89
(lp1237
sa(dp1238
g70
g1079
sg50
S'_ParFrame'
p1239
sg73
g1081
sg75
(lp1240
(dp1241
g50
g78
sg79
g1175
sa(dp1242
g50
g81
sg79
g1093
sa(dp1243
g50
g84
sg79
g1014
sasg24
(L0L
L1L
L1L
L3L
tp1244
sg85
g108
sg87
(lp1245
sg89
(lp1246
sa(dp1247
g70
g846
sg50
S'_ParLabel'
p1248
sg73
g848
sg75
(lp1249
(dp1250
g50
g78
sg79
g819
sasg24
Nsg85
(lp1251
I6428
aI9711
asg87
(lp1252
sg89
(lp1253
(dp1254
g50
g1192
sg79
S'n:10'
p1255
sg144
Nsa(dp1256
g50
g854
sg79
S'_ParLabelText'
p1257
sg144
S's.as'
p1258
sasa(dp1259
g70
g232
sg50
S'_ParList'
p1260
sg73
g258
sg75
(lp1261
(dp1262
g50
g81
sg79
g1084
sa(dp1263
g50
g84
sg79
g1014
sasg24
Nsg85
(lp1264
I3507
aI8845
asg87
(lp1265
sg89
(lp1266
sa(dp1267
g70
g1079
sg50
S'_ParListFrame'
p1268
sg73
g1081
sg75
(lp1269
(dp1270
g50
g81
sg79
g1084
sa(dp1271
g50
g84
sg79
S'x'
sasg24
(L0L
L1L
L1L
L3L
L1L
L0L
tp1272
sg85
g108
sg87
(lp1273
sg89
(lp1274
sa(dp1275
g70
S'Tkinter'
p1276
sg50
S'_ScreenView'
p1277
sg73
S'Canvas'
p1278
sg75
(lp1279
(dp1280
g50
g81
sg79
S'yes'
p1281
sasg24
Nsg85
(lp1282
I8605
aI2913
asg87
(lp1283
sg89
(lp1284
(dp1285
g50
S'height'
p1286
sg79
S'u:SCREEN_H'
p1287
sg144
Nsa(dp1288
g50
S'width'
p1289
sg79
S'u:SCREEN_W'
p1290
sg144
Nsa(dp1291
g50
S'background'
p1292
sg79
S'c:#000000'
p1293
sg144
Nsasa(dp1294
g70
g1133
sg50
S'_SetPakTextBtn'
p1295
sg73
S'Button'
p1296
sg75
(lp1297
sg24
Nsg85
(lp1298
I7171
aI6089
asg87
(lp1299
(dp1300
g135
S'_on_SetPakTextBtn_ButRel_1'
p1301
sg137
S''
sg138
S'<ButtonRelease-1>'
p1302
sasg89
(lp1303
(dp1304
g50
g796
sg79
S'Set Text'
p1305
sg144
Nsasa(dp1306
g70
S'Tkinter'
p1307
sg50
S'_SetStringBtn'
p1308
sg73
S'Button'
p1309
sg75
(lp1310
sg24
Nsg85
(lp1311
I6193
aI6955
asg87
(lp1312
(dp1313
g135
S'_on_SetStringBtn_Button_1'
p1314
sg137
S''
sg138
S'<ButtonRelease-1>'
p1315
sasg89
(lp1316
(dp1317
g50
g796
sg79
S'SET STRING'
p1318
sg144
Nsasa(dp1319
g70
g1307
sg50
S'_String1Len'
p1320
sg73
S'Label'
p1321
sg75
(lp1322
sg24
Nsg85
(lp1323
I4615
aI6693
asg87
(lp1324
sg89
(lp1325
(dp1326
g50
g854
sg79
S'_EditString1Len'
p1327
sg144
S's.as'
p1328
sasa(dp1329
g70
g1307
sg50
S'_String2Len'
p1330
sg73
g1321
sg75
(lp1331
sg24
Nsg85
(lp1332
I4602
aI7008
asg87
(lp1333
sg89
(lp1334
(dp1335
g50
g854
sg79
S'_EditString2Len'
p1336
sg144
S's.as'
p1337
sasa(dp1338
g70
g1307
sg50
S'_String3Len'
p1339
sg73
g1321
sg75
(lp1340
sg24
Nsg85
(lp1341
I4615
aI7349
asg87
(lp1342
sg89
(lp1343
(dp1344
g50
g854
sg79
S'_EditString3Len'
p1345
sg144
S's.as'
p1346
sasa(dp1347
g70
g824
sg50
S'_StringFrame'
p1348
sg73
g826
sg75
(lp1349
sg24
(L0L
L1L
L1L
L0L
L0L
tp1350
sg85
g108
sg87
(lp1351
sg89
(lp1352
sa(dp1353
g70
g802
sg50
S'_StringIdxLbl'
p1354
sg73
S'Label'
p1355
sg75
(lp1356
sg24
Nsg85
(lp1357
I3390
aI6089
asg87
(lp1358
sg89
(lp1359
(dp1360
g50
g854
sg79
S'_StringIdx'
p1361
sg144
S's.as'
p1362
sasa(dp1363
g70
g802
sg50
S'_StringIdxTextLbl'
p1364
sg73
g1355
sg75
(lp1365
sg24
Nsg85
(lp1366
I3038
aI6089
asg87
(lp1367
sg89
(lp1368
(dp1369
g50
g982
sg79
S'Current string:'
p1370
sg144
Nsasa(dp1371
g70
g915
sg50
S'_StringList'
p1372
sg73
S'Listbox'
p1373
sg75
(lp1374
(dp1375
g50
g78
sg79
S'nw'
p1376
sa(dp1377
g50
g81
sg79
S'yes'
p1378
sa(dp1379
g50
g84
sg79
S'both'
p1380
sasg24
Nsg85
(lp1381
I3038
aI2572
asg87
(lp1382
(dp1383
g135
S'_on_StringList_select'
p1384
sg137
S''
sg138
S'<<ListboxSelect>>'
p1385
sasg89
(lp1386
sa(dp1387
g70
g871
sg50
S'_StringListLabel'
p1388
sg73
S'Label'
p1389
sg75
(lp1390
(dp1391
g50
g78
sg79
S'n'
sa(dp1392
g50
g84
sg79
S'x'
sasg24
Nsg85
(lp1393
I3038
aI1627
asg87
(lp1394
sg89
(lp1395
(dp1396
g50
g982
sg79
S'String list'
p1397
sg144
Nsasa(dp1398
g70
S'Tkinter'
p1399
sg50
S'_StringScroll'
p1400
sg73
S'Scrollbar'
p1401
sg75
(lp1402
(dp1403
g50
g78
sg79
S'e'
sa(dp1404
g50
g84
sg79
S'y'
sasg24
Nsg85
(lp1405
I3546
aI2598
asg87
(lp1406
sg89
(lp1407
sa(dp1408
g70
S'Tkinter'
p1409
sg50
S'_TabHost'
p1410
sg73
S'Frame'
p1411
sg75
(lp1412
(dp1413
g50
g78
sg79
S'nw'
p1414
sa(dp1415
g50
g81
sg79
g839
sa(dp1416
g50
g84
sg79
g1380
sasg24
(L0L
L1L
L1L
L0L
tp1417
sg85
g108
sg87
(lp1418
sg89
(lp1419
(dp1420
g50
S'pyclass'
p1421
sg79
S'ttk.Notebook'
p1422
sg144
Nsasa(dp1423
g70
g1133
sg50
S'_TextAreaLbl'
p1424
sg73
S'Label'
p1425
sg75
(lp1426
(dp1427
g50
g78
sg79
S'n'
sasg24
Nsg85
(lp1428
I6193
aI1575
asg87
(lp1429
sg89
(lp1430
(dp1431
g50
g982
sg79
S'Text area'
p1432
sg144
Nsasa(dp1433
g70
g1170
sg50
S'_WorkFrameLabel'
p1434
sg73
S'Label'
p1435
sg75
(lp1436
(dp1437
g50
S'padx'
p1438
sg79
S'n:35'
p1439
sasg24
Nsg85
(lp1440
I5189
aI7848
asg87
(lp1441
sg89
(lp1442
(dp1443
g50
g982
sg79
S'Parameters List'
p1444
sg144
Nsasa(dp1445
g70
g1409
sg50
S'_WorkLabelFrame'
p1446
sg73
g1411
sg75
(lp1447
(dp1448
g50
g78
sg79
g1414
sa(dp1449
g50
g84
sg79
S'x'
sasg24
(L0L
L1L
L1L
L2L
tp1450
sg85
g108
sg87
(lp1451
sg89
(lp1452
sasg152
g724
sg34
L1L
sasg153
g35
sg154
g35
sg50
g6
sa(dp1453
g32
Nsg34
L1L
sg35
(dp1454
g37
S'1.12'
p1455
sg39
(lp1456
S''
aS'#coding=utf8\n\n'
p1457
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p1458
aS'\nfrom enum import Enum\n\nSCREEN_W = 480\nSCREEN_H = 272\n\nTEXT_H = 90\n\nSCENE_MODES   = Enum("normal", "normal_flat", "trial", "rules", "ammo", "ammoname", "ammosummary", "present", "presentname", "debate", "mtb", "climax", "anagram", "dive", "hanron", "menu", "map", "report", "report2", "skill", "skill2", "music", "eventname", "artworkname", "moviename", "theatre", "novel", "help", "other")\nSCENE_SPECIAL = Enum("option", "showopt", "react", "debate", "chatter", "hanron", "checkobj", "checkchar")\nBOX_COLORS    = Enum("yellow", "green", "blue")\nBOX_TYPES     = Enum("normal", "flat", "novel")\n\nCHAPTER_MONOKUMA = 100\nCHAPTER_FREETIME = 101\nCHAPTER_ISLAND   = 102\nCHAPTER_NOVEL    = 103'
p1459
asg7
I0
sg44
I14492031
ssg45
(lp1460
sg153
S'-Main-'
p1461
sg154
g1461
sg50
S'Common'
p1462
sa(dp1463
g32
S'-Main-'
p1464
sg34
L1L
sg35
(dp1465
g37
S'7.0'
p1466
sg39
(lp1467
S''
aS'#coding=utf8\n\n'
p1468
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p1469
aS'import ttk, PIL, tkMessageBox\n\ngui = ResViewer()'
p1470
asg7
I0
sg44
I2407807
ssg45
(lp1471
(dp1472
g48
g49
sg50
S'ResViewer'
p1473
sg28
Nsg51
S'Tkinter.Toplevel'
p1474
sg53
(lp1475
(lp1476
I4993
aI945
aI0
aa(lp1477
I1525
aI5459
aI1
aa(lp1478
I5763
aI9055
aI0
aa(lp1479
I4081
aI4987
aI1
aa(lp1480
I7210
aI4987
aI1
aasg39
(dp1481
g37
S'68.0'
p1482
sg39
(lp1483
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                  ResViewer                                   #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass ResViewer(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p1484
aS'        #\n        #Your code here\n        #\n'
p1485
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self._Frame5 = Frame(self)\n        self._Frame5.pack(side='top')\n        self._TopMenu = Menu(self._Frame5)\n        self._TopMenu.pack(side='left')\n        self._TopMenu.bind('<Map>',self._on_TopMenu_Map)\n        self._Frame3 = Frame(self)\n        self._Frame3.pack(side='top')\n        self._FileListFrame = Frame(self._Frame3)\n        self._FileListFrame.pack(side='left')\n        self._FileList = Listbox(self._FileListFrame)\n        self._FileList.pack(side='top')\n        self._Frame4 = Frame(self._Frame3)\n        self._Frame4.pack(side='left')\n        self._TabHost = ttk.Notebook(self._Frame4)\n        self._TabHost.pack(side='top')\n        self._Frame1 = Frame(self._Frame4)\n        self._Frame1.pack(side='top')\n        self._TextFrame = Frame(self._TabHost)\n        self._TextFrame.pack(side='left')\n        self._TextEdit = Entry(self._TextFrame)\n        self._TextEdit.pack(side='top')\n        self._CanvasFrame = Frame(self._TabHost)\n        self._CanvasFrame.pack(side='left')\n        self._Canvas = Canvas(self._CanvasFrame)\n        self._Canvas.pack(side='top')\n        self._MiscFrame = Frame(self._TabHost)\n        self._MiscFrame.pack(side='left')\n"
p1486
aS'        #\n        #Your code here\n        #\n        self._TabHost.add(self._TextFrame, text="Text")\n        self._TabHost.add(self._CanvasFrame, text="Graphics")\n        self._TabHost.add(self._MiscFrame, text="Misc")\n'
p1487
aS'    #\n    #Start of event handler methods\n    #\n'
p1488
aS'\n'
aS'\n    def _on_TopMenu_Map(self'
p1489
aS',Event=None):\n        # File menu\n        FileMenu = Menu(self._RootMenu, tearoff=0)\n        FileMenu.add_command(label="Open", command=self.openFile)\n        FileMenu.add_command(label="Save", command=self.saveFile)\n        FileMenu.add_command(label="Exit", command=exit)\n        self._RootMenu.add_cascade(label="File", menu=FileMenu)\n        pass\n    \n    def openFile(self):\n        pass\n    \n    def saveFile(self):\n        pass\n    \n    def exit(self):\n        self.destroy()\n        pass\n'
p1490
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p1491
aS''
asg7
I0
sg44
I12886399
ssg29
(lp1492
(dp1493
g70
S'Tkinter'
p1494
sg50
g1473
sg73
S'Toplevel'
p1495
sg75
(lp1496
sg24
g149
sg85
g108
sg87
(lp1497
sg89
(lp1498
sa(dp1499
g70
g232
sg50
S'_Canvas'
p1500
sg73
S'Canvas'
p1501
sg75
(lp1502
sg24
Nsg85
(lp1503
I5580
aI3123
asg87
(lp1504
sg89
(lp1505
sa(dp1506
g70
g224
sg50
S'_CanvasFrame'
p1507
sg73
g226
sg75
(lp1508
sg24
(L0L
L1L
L1L
L0L
L1L
tp1509
sg85
g108
sg87
(lp1510
sg89
(lp1511
sa(dp1512
g70
g232
sg50
S'_FileList'
p1513
sg73
g258
sg75
(lp1514
sg24
Nsg85
(lp1515
I691
aI3675
asg87
(lp1516
sg89
(lp1517
sa(dp1518
g70
g224
sg50
S'_FileListFrame'
p1519
sg73
g226
sg75
(lp1520
sg24
(L0L
L1L
L0L
tp1521
sg85
g108
sg87
(lp1522
sg89
(lp1523
sa(dp1524
g70
g224
sg50
S'_Frame1'
p1525
sg73
g226
sg75
(lp1526
sg24
(L0L
L1L
L1L
L1L
tp1527
sg85
g108
sg87
(lp1528
sg89
(lp1529
sa(dp1530
g70
g224
sg50
S'_Frame3'
p1531
sg73
g226
sg75
(lp1532
sg24
(L0L
L1L
tp1533
sg85
g108
sg87
(lp1534
sg89
(lp1535
sa(dp1536
g70
g224
sg50
S'_Frame4'
p1537
sg73
g226
sg75
(lp1538
sg24
(L0L
L1L
L1L
tp1539
sg85
g108
sg87
(lp1540
sg89
(lp1541
sa(dp1542
g70
g224
sg50
S'_Frame5'
p1543
sg73
g226
sg75
(lp1544
sg24
(L0L
L0L
tp1545
sg85
g108
sg87
(lp1546
sg89
(lp1547
sa(dp1548
g70
g224
sg50
S'_MiscFrame'
p1549
sg73
g226
sg75
(lp1550
sg24
(L0L
L1L
L1L
L0L
L2L
tp1551
sg85
g108
sg87
(lp1552
sg89
(lp1553
sa(dp1554
g70
g224
sg50
S'_TabHost'
p1555
sg73
g226
sg75
(lp1556
sg24
(L0L
L1L
L1L
L0L
tp1557
sg85
g108
sg87
(lp1558
sg89
(lp1559
(dp1560
g50
g1421
sg79
S'ttk.Notebook'
p1561
sg144
Nsasa(dp1562
g70
g232
sg50
S'_TextEdit'
p1563
sg73
S'Entry'
p1564
sg75
(lp1565
sg24
Nsg85
(lp1566
I2634
aI3307
asg87
(lp1567
sg89
(lp1568
sa(dp1569
g70
g224
sg50
S'_TextFrame'
p1570
sg73
g226
sg75
(lp1571
sg24
(L0L
L1L
L1L
L0L
L0L
tp1572
sg85
g108
sg87
(lp1573
sg89
(lp1574
sa(dp1575
g70
g232
sg50
S'_TopMenu'
p1576
sg73
S'Menu'
p1577
sg75
(lp1578
sg24
Nsg85
(lp1579
I248
aI367
asg87
(lp1580
(dp1581
g135
S'_on_TopMenu_Map'
p1582
sg137
S''
sg138
S'<Map>'
p1583
sasg89
(lp1584
sasg152
g1474
sg34
L1L
sasg153
g1473
sg154
g1473
sg50
g4
sa.