(lp1
(dp2
S'ModulePrevious'
p3
S'SDR2_Translate'
p4
sS'ModuleCurrent'
p5
g4
sS'Version'
p6
I1
sS'Geometry'
p7
S'1920x1017+-4+-4'
p8
sS'ProjectName'
p9
g4
sS'ImportTypes'
p10
(lp11
(S'Pmw'
p12
S'import'
p13
tp14
a(S'Tkinter'
p15
S'from'
p16
tp17
asS'EditorWidths'
p18
((lp19
L132L
aL132L
a(lp20
L132L
aL132L
a(lp21
L130L
aL130L
atp22
sS'ID'
p23
S'Rapyd Project'
p24
sS'ParkingLot'
p25
(dp26
S'SelectedWidreq'
p27
NsS'Widreqs'
p28
(lp29
ssa(dp30
S'PreviousForm'
p31
S'Filter'
p32
sS'OnTab'
p33
L1L
sS'-Main-'
p34
(dp35
S'Cursor'
p36
S'3.0'
p37
sS'Text'
p38
(lp39
S''
aS'#!/usr/bin/python\n#coding=utf8\nimport __future__\n'
p40
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p41
aS'\n\ntry:\n    #--------------------------------------------------------------------------#\n    # User code should go after this comment so it is inside the "try".        #\n    #     This allows rpErrorHandler to gain control on an error so it         #\n    #     can properly display a Rapyd-aware error message.                    #\n    #--------------------------------------------------------------------------#\n\n    #Adjust sys.path so we can find other modules of this project\n    import sys\n    if \'.\' not in sys.path:\n        sys.path.append(\'.\')\n    #Put lines to import other modules of this project here\n    import ttk, PIL, tkMessageBox, os, re, struct, tkFileDialog, tkSimpleDialog\n    import GuiFuncs, ConfigParser\n    from PIL import Image, ImageTk, ImageDraw, ImageFont\n    from GimFile import GimFile, GmoFile\n    from PakFile import PakFile\n    from OpCodes import *\n    from Common import *\n    from Scene import Scene\n    from clt import *\n    from Character import *\n    from LinFile import *\n    from enum import *\n    from GUI_Additional import IntegerEntry\n \n    if __name__ == \'__main__\':\n        # Read config\n        config_ok = False\n        while not config_ok:\n            config = ConfigParser.ConfigParser()\n            config.read(\'config.cfg\')\n            try:\n                GameDataLoc = config.get(\'Game Data\', \'Game_Data_Location\')\n                DoneDataLoc = config.get(\'Game Data\', \'Done_Data_Location\')\n                if not os.path.exists(GameDataLoc):\n                    raise Exception(\'Bad path\')\n                if not os.path.exists(DoneDataLoc):\n                    raise Exception(\'Bad path\')\n                config_ok = True\n            except:\n                w = GameData()\n                # Wait for the window to close\n                w.wait_window(w)\n                \n        # Load GUI\n'
p42
aS"        Root = Tk()\n        import Tkinter\n        Tkinter.CallWrapper = rpErrorHandler.CallWrapper\n        del Tkinter\n        App = SDR2_Translate(Root)\n        App.pack(expand='yes',fill='both')\n"
p43
aS"        Root.geometry('640x480+10+10')\n        Root.title('SDR2 Translate')\n        Root.mainloop()\n        \n    #--------------------------------------------------------------------------#\n    # User code should go above this comment.                                  #\n    #--------------------------------------------------------------------------#\nexcept:\n    rpErrorHandler.RunError()"
p44
asg6
I0
sS'Sha'
p45
I12017535
ssS'Forms'
p46
(lp47
(dp48
S'Requested'
p49
S'Gui'
p50
sS'Name'
p51
g32
sg27
NsS'Type'
p52
S'Tkinter.Toplevel'
p53
sS'Lines'
p54
(lp55
(lp56
I4997
aI8768
aI0
aa(lp57
I3384
aI4378
aI1
aa(lp58
I4973
aI4378
aI1
aasg38
(dp59
g36
S'32.0'
p60
sg38
(lp61
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                    Filter                                    #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass Filter(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p62
aS'        #\n        #Your code here\n        #\n'
p63
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self.bind('<Map>',self.on_Filter_Map)\n        self._OpCodesFrame = Frame(self)\n        self._OpCodesFrame.pack(side='top')\n        self._OkFrame = Frame(self)\n        self._OkFrame.pack(side='top')\n        self._CancelBtn = Button(self._OkFrame,text='Cancel')\n        self._CancelBtn.pack(anchor='e',side='right')\n        self._OkBtn = Button(self._OkFrame,text='OK')\n        self._OkBtn.pack(anchor='e',side='right')\n        self._VisibleFrame = Frame(self._OpCodesFrame)\n        self._VisibleFrame.pack(side='left')\n        self._VisibleCodesLbl = Label(self._VisibleFrame,text='Visible OpCodes')\n        self._VisibleCodesLbl.pack(side='top')\n        self._VisibleCodeList = Listbox(self._VisibleFrame)\n        self._VisibleCodeList.pack(side='top')\n        self._VisibleCodeList.bind('<<ListboxSelect>>' \\\n            ,self._on_VisibleCodeList_select)\n        self._BtnFrame = Frame(self._OpCodesFrame)\n        self._BtnFrame.pack(side='left')\n        self._HideBtn = Button(self._BtnFrame,state='disabled',text='=>')\n        self._HideBtn.pack(side='top')\n        self._HideBtn.bind('<ButtonPress-1>',self._on_HideBtn_Button_1)\n        self._ShowBtn = Button(self._BtnFrame,state='disabled',text='<=')\n        self._ShowBtn.pack(side='top')\n        self._ShowBtn.bind('<ButtonPress-1>',self._on_ShowBtn_Button_1)\n        self._HiddenFrame = Frame(self._OpCodesFrame)\n        self._HiddenFrame.pack(side='left')\n        self._HiddenCodeLbl = Label(self._HiddenFrame,text='Hidden OpCodes')\n        self._HiddenCodeLbl.pack(side='top')\n        self._HiddenCodeList = Listbox(self._HiddenFrame)\n        self._HiddenCodeList.pack(side='top')\n        self._HiddenCodeList.bind('<<ListboxSelect>>' \\\n            ,self._on_HiddenCodeList_select)\n"
p64
aS'        #\n        #Your code here\n        #\n        self.Master = Master\n        self.visible_list = {}\n        self.hidden_list = {}\n'
p65
aS'    #\n    #Start of event handler methods\n    #\n'
p66
aS"    def initLists(self, hidden, visible):\n        self.hidden_list = hidden\n        self.visible_list = visible\n        self.populate()\n        pass\n\n    def populate(self):\n        self._VisibleCodeList.delete(0,END)\n        self._HiddenCodeList.delete(0,END)\n        for code,value in self.hidden_list.items():\n            if value != '':\n                self._HiddenCodeList.insert(END, value)\n            else:\n                self._HiddenCodeList.insert(END, 'op_'+code)\n        for code,value in self.visible_list.items():\n            if value != '':\n                self._VisibleCodeList.insert(END, value)\n            else:\n                self._VisibleCodeList.insert(END, 'op_'+code)\n        pass\n"
p67
aS'\n    def _on_HiddenCodeList_select(self'
p68
aS",Event=None):\n        self._ShowBtn['state'] = 'normal'\n        self._HideBtn['state'] = 'disabled'\n        pass\n"
p69
aS'\n    def _on_HideBtn_Button_1(self'
p70
aS',Event=None):\n        # Delete from the Visible list\n        i = int(self._FlowList.curselection()[0])        \n        \n        self._VisibleCodeList.delete(i)\n        # Insert into the Hidden list\n        self._HiddenCodeList.insert\n        pass\n'
p71
aS'\n    def _on_ShowBtn_Button_1(self'
p72
aS',Event=None):\n        pass\n'
p73
aS'\n    def _on_VisibleCodeList_select(self'
p74
aS",Event=None):\n        self._ShowBtn['state'] = 'disabled'\n        self._HideBtn['state'] = 'normal'\n        pass\n"
p75
aS'\n    def on_Filter_Map(self'
p76
aS',Event=None):\n        # Grab the focus\n        self.focus_set()\n        self.grab_set()\n        self.transient(self.Master)\n        pass\n'
p77
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p78
aS''
asg6
I0
sg45
I8776831
ssg28
(lp79
(dp80
S'ModuleName'
p81
S'Tkinter'
p82
sg51
g32
sS'WidgetName'
p83
S'Toplevel'
p84
sS'PackOptions'
p85
(lp86
sg23
(I0
tp87
sS'XY'
p88
(I0
I0
tp89
sS'Bindings'
p90
(lp91
(dp92
S'Handler'
p93
S'on_Filter_Map'
p94
sS'Component'
p95
S''
sS'Event'
p96
S'<Map>'
p97
sasS'Options'
p98
(lp99
sa(dp100
g81
S'Tkinter'
p101
sg51
S'_BtnFrame'
p102
sg83
S'Frame'
p103
sg85
(lp104
sg23
(L0L
L0L
L1L
tp105
sg88
g89
sg90
(lp106
sg98
(lp107
sa(dp108
g81
S'Tkinter'
p109
sg51
S'_CancelBtn'
p110
sg83
S'Button'
p111
sg85
(lp112
(dp113
g51
S'anchor'
p114
sS'Value'
p115
S'e'
sasg23
Nsg88
(lp116
I8138
aI9306
asg90
(lp117
sg98
(lp118
(dp119
g51
S'text'
p120
sg115
S'Cancel'
p121
sS'Extra'
p122
Nsasa(dp123
g81
g109
sg51
S'_HiddenCodeLbl'
p124
sg83
S'Label'
p125
sg85
(lp126
sg23
Nsg88
(lp127
I6962
aI203
asg90
(lp128
sg98
(lp129
(dp130
g51
S'text'
p131
sg115
S'Hidden OpCodes'
p132
sg122
Nsasa(dp133
g81
g109
sg51
S'_HiddenCodeList'
p134
sg83
S'Listbox'
p135
sg85
(lp136
sg23
Nsg88
(lp137
I6847
aI4545
asg90
(lp138
(dp139
g93
S'_on_HiddenCodeList_select'
p140
sg95
S''
sg96
S'<<ListboxSelect>>'
p141
sasg98
(lp142
sa(dp143
g81
g101
sg51
S'_HiddenFrame'
p144
sg83
g103
sg85
(lp145
sg23
(L0L
L0L
L2L
tp146
sg88
g89
sg90
(lp147
sg98
(lp148
sa(dp149
g81
g109
sg51
S'_HideBtn'
p150
sg83
g111
sg85
(lp151
sg23
Nsg88
(lp152
I4002
aI3816
asg90
(lp153
(dp154
g93
S'_on_HideBtn_Button_1'
p155
sg95
S''
sg96
S'<ButtonPress-1>'
p156
sasg98
(lp157
(dp158
g51
g120
sg115
S'=>'
p159
sg122
Nsa(dp160
g51
S'state'
p161
sg115
S'disabled'
p162
sg122
Nsasa(dp163
g81
g109
sg51
S'_OkBtn'
p164
sg83
g111
sg85
(lp165
(dp166
g51
g114
sg115
S'e'
sasg23
Nsg88
(lp167
I7016
aI9306
asg90
(lp168
sg98
(lp169
(dp170
g51
g120
sg115
S'OK'
p171
sg122
Nsasa(dp172
g81
g101
sg51
S'_OkFrame'
p173
sg83
g103
sg85
(lp174
sg23
(L0L
L1L
tp175
sg88
g89
sg90
(lp176
sg98
(lp177
sa(dp178
g81
g101
sg51
S'_OpCodesFrame'
p179
sg83
g103
sg85
(lp180
sg23
(L0L
L0L
tp181
sg88
g89
sg90
(lp182
sg98
(lp183
sa(dp184
g81
g109
sg51
S'_ShowBtn'
p185
sg83
g111
sg85
(lp186
sg23
Nsg88
(lp187
I3996
aI5108
asg90
(lp188
(dp189
g93
S'_on_ShowBtn_Button_1'
p190
sg95
S''
sg96
S'<ButtonPress-1>'
p191
sasg98
(lp192
(dp193
g51
g120
sg115
S'<='
p194
sg122
Nsa(dp195
g51
g161
sg115
g162
sg122
Nsasa(dp196
g81
g109
sg51
S'_VisibleCodeList'
p197
sg83
g135
sg85
(lp198
sg23
Nsg88
(lp199
I2110
aI4342
asg90
(lp200
(dp201
g93
S'_on_VisibleCodeList_select'
p202
sg95
S''
sg96
S'<<ListboxSelect>>'
p203
sasg98
(lp204
sa(dp205
g81
g109
sg51
S'_VisibleCodesLbl'
p206
sg83
g125
sg85
(lp207
sg23
Nsg88
(lp208
I1825
aI419
asg90
(lp209
sg98
(lp210
(dp211
g51
g131
sg115
S'Visible OpCodes'
p212
sg122
Nsasa(dp213
g81
g101
sg51
S'_VisibleFrame'
p214
sg83
g103
sg85
(lp215
sg23
(L0L
L0L
L0L
tp216
sg88
g89
sg90
(lp217
sg98
(lp218
sasS'BaseClass'
p219
g53
sg33
L1L
sa(dp220
g49
g50
sg51
S'GameData'
p221
sg27
Nsg52
S'Tkinter.Toplevel'
p222
sg54
(lp223
(lp224
I4997
aI431
aI0
aa(lp225
I4997
aI1112
aI0
aa(lp226
I4997
aI4246
aI0
aasg38
(dp227
g36
S'55.0'
p228
sg38
(lp229
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                   GameData                                   #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass GameData(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p230
aS'        #\n        #Your code here\n        #\n'
p231
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self.GameDataLoc = StringVar()\n        self.DoneDataLoc = StringVar()\n        self._Frame3 = Frame(self)\n        self._Frame3.pack(side='top')\n        self._GameDataLbl = Label(self._Frame3,text='Game Data Options')\n        self._GameDataLbl.pack(side='top')\n        self._Frame2 = Frame(self)\n        self._Frame2.pack(side='top')\n        self._PathLbl = Label(self._Frame2,text='Path to Game Data')\n        self._PathLbl.pack(side='left')\n        self._DataLoc = Entry(self._Frame2,textvariable=self.GameDataLoc)\n        self._DataLoc.pack(side='left')\n        self._BrowseLocBtn = Button(self._Frame2,text='Browse')\n        self._BrowseLocBtn.pack(side='left')\n        self._BrowseLocBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_BrowseLocBtn_Button_1)\n        self._Frame4 = Frame(self)\n        self._Frame4.pack(side='top')\n        self._DoneLbl = Label(self._Frame4,text='Path to Done Files')\n        self._DoneLbl.pack(side='left')\n        self._DoneLoc = Entry(self._Frame4,textvariable=self.DoneDataLoc)\n        self._DoneLoc.pack(side='left')\n        self._BrowseDoneBtn = Button(self._Frame4,text='Browse')\n        self._BrowseDoneBtn.pack(side='left')\n        self._BrowseDoneBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_BrowseDoneBtn_ButRel_1)\n        self._Frame1 = Frame(self)\n        self._Frame1.pack(side='top')\n        self._OkBtn = Button(self._Frame1,text='Ok')\n        self._OkBtn.pack(side='left')\n        self._OkBtn.bind('<ButtonPress-1>',self._on_OkBtn_Button_1)\n        self._CancelBtn = Button(self._Frame1,text='Cancel')\n        self._CancelBtn.pack(side='left')\n        self._CancelBtn.bind('<ButtonRelease-1>',self._on_CancelBtn_ButRel_1)\n"
p232
aS"        #\n        #Your code here\n        #\n        try:\n            self.GameDataLoc.set(GameDataLoc)\n        except:\n            self.GameDataLoc.set('')\n        try:\n            self.DoneDataLoc.set(DoneDataLoc)\n        except:\n            self.DoneDataLoc.set('')\n"
p233
aS'    #\n    #Start of event handler methods\n    #\n'
p234
aS'\n'
aS'\n    def _on_BrowseDoneBtn_ButRel_1(self'
p235
aS',Event=None):\n        loc = tkFileDialog.askdirectory()\n        if loc:\n            self.DoneDataLoc.set(loc)\n        pass\n'
p236
aS'\n    def _on_BrowseLocBtn_Button_1(self'
p237
aS',Event=None):\n        loc = tkFileDialog.askdirectory()\n        if loc:\n            self.GameDataLoc.set(loc)\n        pass\n'
p238
aS'\n    def _on_CancelBtn_ButRel_1(self'
p239
aS',Event=None):\n        # Exit\n        self.destroy()\n        pass\n'
p240
aS'\n    def _on_OkBtn_Button_1(self'
p241
aS",Event=None):\n        # Write config\n        config = ConfigParser.ConfigParser()\n        config.add_section('Game Data')\n        config.set('Game Data', 'Game_Data_Location', self.GameDataLoc.get())\n        config.set('Game Data', 'Done_Data_Location', self.DoneDataLoc.get())\n        with open('config.cfg', 'wb') as configfile:\n            config.write(configfile)\n        # Exit\n        self.destroy()\n        pass\n"
p242
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p243
aS''
asg6
I0
sg45
I13667199
ssg28
(lp244
(dp245
g81
S'Tkinter'
p246
sg51
g221
sg83
S'Toplevel'
p247
sg85
(lp248
sg23
g87
sg88
g89
sg90
(lp249
sg98
(lp250
sa(dp251
g81
S'Tkinter'
p252
sg51
S'_BrowseDoneBtn'
p253
sg83
S'Button'
p254
sg85
(lp255
sg23
Nsg88
(lp256
I2535
aI2297
asg90
(lp257
(dp258
g93
S'_on_BrowseDoneBtn_ButRel_1'
p259
sg95
S''
sg96
S'<ButtonRelease-1>'
p260
sasg98
(lp261
(dp262
g51
g120
sg115
S'Browse'
p263
sg122
Nsasa(dp264
g81
S'Tkinter'
p265
sg51
S'_BrowseLocBtn'
p266
sg83
S'Button'
p267
sg85
(lp268
sg23
Nsg88
(lp269
I2547
aI825
asg90
(lp270
(dp271
g93
S'_on_BrowseLocBtn_Button_1'
p272
sg95
S''
sg96
S'<ButtonRelease-1>'
p273
sasg98
(lp274
(dp275
g51
g120
sg115
S'Browse'
p276
sg122
Nsasa(dp277
g81
S'Tkinter'
p278
sg51
S'_CancelBtn'
p279
sg83
S'Button'
p280
sg85
(lp281
sg23
Nsg88
(lp282
I5045
aI5132
asg90
(lp283
(dp284
g93
S'_on_CancelBtn_ButRel_1'
p285
sg95
S''
sg96
S'<ButtonRelease-1>'
p286
sasg98
(lp287
(dp288
g51
g120
sg115
S'Cancel'
p289
sg122
Nsasa(dp290
g81
g265
sg51
S'_DataLoc'
p291
sg83
S'Entry'
p292
sg85
(lp293
sg23
Nsg88
(lp294
I1965
aI789
asg90
(lp295
sg98
(lp296
(dp297
g51
S'textvariable'
p298
sg115
S'GameDataLoc'
p299
sg122
S's.as'
p300
sasa(dp301
g81
g252
sg51
S'_DoneLbl'
p302
sg83
S'Label'
p303
sg85
(lp304
sg23
Nsg88
(lp305
I1261
aI2297
asg90
(lp306
sg98
(lp307
(dp308
g51
g131
sg115
S'Path to Done Files'
p309
sg122
Nsasa(dp310
g81
g252
sg51
S'_DoneLoc'
p311
sg83
S'Entry'
p312
sg85
(lp313
sg23
Nsg88
(lp314
I1977
aI2333
asg90
(lp315
sg98
(lp316
(dp317
g51
g298
sg115
S'DoneDataLoc'
p318
sg122
S's.as'
p319
sasa(dp320
g81
S'Tkinter'
p321
sg51
S'_Frame1'
p322
sg83
S'Frame'
p323
sg85
(lp324
sg23
(L0L
L3L
tp325
sg88
g89
sg90
(lp326
sg98
(lp327
sa(dp328
g81
g321
sg51
S'_Frame2'
p329
sg83
g323
sg85
(lp330
sg23
(L0L
L1L
tp331
sg88
g89
sg90
(lp332
sg98
(lp333
sa(dp334
g81
g321
sg51
S'_Frame3'
p335
sg83
g323
sg85
(lp336
sg23
(L0L
L0L
tp337
sg88
g89
sg90
(lp338
sg98
(lp339
sa(dp340
g81
S'Tkinter'
p341
sg51
S'_Frame4'
p342
sg83
S'Frame'
p343
sg85
(lp344
sg23
(L0L
L2L
tp345
sg88
g89
sg90
(lp346
sg98
(lp347
sa(dp348
g81
g265
sg51
S'_GameDataLbl'
p349
sg83
S'Label'
p350
sg85
(lp351
sg23
Nsg88
(lp352
I4378
aI179
asg90
(lp353
sg98
(lp354
(dp355
g51
g131
sg115
S'Game Data Options'
p356
sg122
Nsasa(dp357
g81
g278
sg51
S'_OkBtn'
p358
sg83
g280
sg85
(lp359
sg23
Nsg88
(lp360
I4494
aI5144
asg90
(lp361
(dp362
g93
S'_on_OkBtn_Button_1'
p363
sg95
S''
sg96
S'<ButtonPress-1>'
p364
sasg98
(lp365
(dp366
g51
g120
sg115
S'Ok'
p367
sg122
Nsasa(dp368
g81
g265
sg51
S'_PathLbl'
p369
sg83
g350
sg85
(lp370
sg23
Nsg88
(lp371
I1225
aI789
asg90
(lp372
sg98
(lp373
(dp374
g51
g131
sg115
S'Path to Game Data'
p375
sg122
Nsasasg219
g222
sg33
L1L
sa(dp376
g49
g38
sg51
S'OpCodeCreator'
p377
sg27
Nsg52
S'Tkinter.Toplevel'
p378
sg54
(lp379
(lp380
I4997
aI622
aI0
aa(lp381
I4997
aI6914
aI0
aa(lp382
I4997
aI8947
aI0
aasg38
(dp383
g36
S'86.51'
p384
sg38
(lp385
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                OpCodeCreator                                 #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass OpCodeCreator(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p386
aS'        #\n        #Your code here\n        #\n        self.selected_opcode = 0\n        self.selected_par = 0\n        self.opcode_list = []\n        self.par_list = []\n        self.Master = Master\n'
p387
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self.bind('<Map>',self.on_OpCodeCreator_Map)\n        self._ParValue = StringVar()\n        self._ParName = StringVar()\n        self._HeaderFrame = Frame(self)\n        self._HeaderFrame.pack(side='top')\n        self._TopLabel = Label(self._HeaderFrame\n            ,text='Define the opcode and press OK')\n        self._TopLabel.pack(side='top')\n        self._ListFrame = Frame(self)\n        self._ListFrame.pack(side='top')\n        self._OpCodeList = Listbox(self._ListFrame)\n        self._OpCodeList.pack(expand='yes',fill='both',side='left')\n        self._OpCodeList.bind('<<ListboxSelect>>',self._on_OpCodeList_select)\n        self._OpCodeList.bind('<Map>',self._on_OpCodeList_Map)\n        self._ParBox = Listbox(self._ListFrame)\n        self._ParBox.pack(side='left')\n        self._ParBox.bind('<<ListboxSelect>>',self._on_ParBox_select)\n        self._EntryFrame = Frame(self)\n        self._EntryFrame.pack(side='top')\n        self._ParNameLbl = Label(self._EntryFrame,textvariable=self._ParName)\n        self._ParNameLbl.pack(side='left')\n        self._ParEntry = Entry(self._EntryFrame,textvariable=self._ParValue)\n        self._ParEntry.pack(side='left')\n        self._AddParBtn = Button(self._EntryFrame,text='Set')\n        self._AddParBtn.pack(side='left')\n        self._AddParBtn.bind('<ButtonPress-1>',self._on_AddParBtn_Button_1)\n        self._SubmitFrame = Frame(self)\n        self._SubmitFrame.pack(expand='yes',fill='x',side='top')\n        self._CancelBtn = Button(self._SubmitFrame,text='Cancel')\n        self._CancelBtn.pack(anchor='e',side='right')\n        self._CancelBtn.bind('<ButtonPress-1>',self._on_CancelBtn_Button_1)\n        self._OkBtn = Button(self._SubmitFrame,text='OK')\n        self._OkBtn.pack(anchor='e',side='right')\n        self._OkBtn.bind('<ButtonPress-1>',self._on_OkBtn_Button_1)\n"
p388
aS'        #\n        #Your code here\n        #\n'
p389
aS'    #\n    #Start of event handler methods\n    #\n'
p390
aS'\n'
aS'\n    def _on_AddParBtn_Button_1(self'
p391
aS',Event=None):\n        # Save current parameter to the list\n        i = self.selected_par  \n        self.par_list[i] = (self.par_list[i][0], int(self._ParValue.get()))\n        # Re-populate parameters listbox\n        self._ParBox_populate()\n        pass\n'
p392
aS'\n    def _on_CancelBtn_Button_1(self'
p393
aS',Event=None):\n        self.destroy()\n        pass\n'
p394
aS'\n    def _on_OkBtn_Button_1(self'
p395
aS',Event=None):\n        question = "You really sure you want to add the new op?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            # Insert new value into the master\'s lists\n            i = self.Master.current_act_idx+1\n            self.Master.lin_stack[-1].opcode_list.insert(i, self.selected_opcode)\n            self.Master.lin_stack[-1].action_list.insert(i, OP_FUNCTIONS[self.selected_opcode])\n            self.Master.lin_stack[-1].pars_list.insert(i, self.par_list)\n            # Fix the string offset, initial value for the 0x70 + opcode\n            add_offset = 0x02\n            for par in OP_PARAMS[self.selected_opcode]:\n                # Add size of each parameter\n                add_offset += struct.calcsize(par[1]) \n            # Add the new offset to the base offset\n            self.Master.lin_stack[-1].baseoffset += add_offset\n            # Add to the master\'s listbox\n            self.Master._FlowList.insert(i, "%s%s" % (self.Master.lin_stack[-1].action_list[i], self.Master.lin_stack[-1].pars_list[i]))\n            # Exit\n            self.destroy()\n        pass\n'
p396
aS'\n    def _on_OpCodeList_Map(self'
p397
aS',Event=None):\n        for code,name in OP_FUNCTIONS.iteritems():\n            if not name:\n                self._OpCodeList.insert(END, "op_%d" % code)\n            else:\n                self._OpCodeList.insert(END, name)\n            # We need to store the opcodes, otherwise we won\'t have 2-sided relation\n            self.opcode_list.append(code)\n        pass\n    \n'
p398
aS'\n    def _on_OpCodeList_select(self'
p399
aS',Event=None):\n        i = int(self._OpCodeList.curselection()[0])\n        self.selected_opcode = self.opcode_list[i]\n        # Add the parameters to the list\n        self.par_list = []\n        for par in OP_PARAMS[self.selected_opcode]:\n            self.par_list.append((par[0], -1))\n        # Display pars in the listbox\n        self._ParBox_populate()\n        pass\n        \n    def _ParBox_populate(self):\n        self._ParBox.delete(0,END)\n        for par in self.par_list:\n            self._ParBox.insert(END, par)\n        pass\n    \n'
p400
aS'\n    def _on_ParBox_select(self'
p401
aS',Event=None):\n        self.selected_par = int(self._ParBox.curselection()[0])  \n        i = self.selected_par      \n        # Put the current name and value to the label and editbox\n        self._ParName.set(self.par_list[i][0])\n        self._ParValue.set(self.par_list[i][1])\n        pass\n'
p402
aS'\n    def on_OpCodeCreator_Map(self'
p403
aS',Event=None):\n        # Grab the focus\n        self.focus_set()\n        self.grab_set()\n        # Some strange shit happend on Windoze with the next line\n        #self.transient(self.Master)\n        pass\n'
p404
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p405
aS''
asg6
I0
sg45
I9408383
ssg28
(lp406
(dp407
g81
S'Tkinter'
p408
sg51
g377
sg83
S'Toplevel'
p409
sg85
(lp410
sg23
g87
sg88
g89
sg90
(lp411
(dp412
g93
S'on_OpCodeCreator_Map'
p413
sg95
S''
sg96
S'<Map>'
p414
sasg98
(lp415
sa(dp416
g81
S'Tkinter'
p417
sg51
S'_AddParBtn'
p418
sg83
S'Button'
p419
sg85
(lp420
sg23
Nsg88
(lp421
I4469
aI7847
asg90
(lp422
(dp423
g93
S'_on_AddParBtn_Button_1'
p424
sg95
S''
sg96
S'<ButtonPress-1>'
p425
sasg98
(lp426
(dp427
g51
g120
sg115
S'Set'
p428
sg122
Nsasa(dp429
g81
g417
sg51
S'_CancelBtn'
p430
sg83
g419
sg85
(lp431
(dp432
g51
g114
sg115
S'e'
sasg23
Nsg88
(lp433
I8096
aI9617
asg90
(lp434
(dp435
g93
S'_on_CancelBtn_Button_1'
p436
sg95
S''
sg96
S'<ButtonPress-1>'
p437
sasg98
(lp438
(dp439
g51
g120
sg115
S'Cancel'
p440
sg122
Nsasa(dp441
g81
S'Tkinter'
p442
sg51
S'_EntryFrame'
p443
sg83
S'Frame'
p444
sg85
(lp445
sg23
(L0L
L2L
tp446
sg88
g89
sg90
(lp447
sg98
(lp448
sa(dp449
g81
g442
sg51
S'_HeaderFrame'
p450
sg83
g444
sg85
(lp451
sg23
(L0L
L0L
tp452
sg88
g89
sg90
(lp453
sg98
(lp454
sa(dp455
g81
g442
sg51
S'_ListFrame'
p456
sg83
g444
sg85
(lp457
sg23
(L0L
L1L
tp458
sg88
g89
sg90
(lp459
sg98
(lp460
sa(dp461
g81
g417
sg51
S'_OkBtn'
p462
sg83
g419
sg85
(lp463
(dp464
g51
g114
sg115
S'e'
sasg23
Nsg88
(lp465
I7326
aI9522
asg90
(lp466
(dp467
g93
S'_on_OkBtn_Button_1'
p468
sg95
S''
sg96
S'<ButtonPress-1>'
p469
sasg98
(lp470
(dp471
g51
g120
sg115
S'OK'
p472
sg122
Nsasa(dp473
g81
g417
sg51
S'_OpCodeList'
p474
sg83
S'Listbox'
p475
sg85
(lp476
(dp477
g51
S'expand'
p478
sg115
S'yes'
p479
sa(dp480
g51
S'fill'
p481
sg115
S'both'
p482
sasg23
Nsg88
(lp483
I1662
aI3110
asg90
(lp484
(dp485
g93
S'_on_OpCodeList_select'
p486
sg95
S''
sg96
S'<<ListboxSelect>>'
p487
sa(dp488
g93
S'_on_OpCodeList_Map'
p489
sg95
S''
sg96
S'<Map>'
p490
sasg98
(lp491
sa(dp492
g81
g417
sg51
S'_ParBox'
p493
sg83
g475
sg85
(lp494
sg23
Nsg88
(lp495
I5409
aI3110
asg90
(lp496
(dp497
g93
S'_on_ParBox_select'
p498
sg95
S''
sg96
S'<<ListboxSelect>>'
p499
sasg98
(lp500
sa(dp501
g81
g417
sg51
S'_ParEntry'
p502
sg83
S'Entry'
p503
sg85
(lp504
sg23
Nsg88
(lp505
I3857
aI7835
asg90
(lp506
sg98
(lp507
(dp508
g51
g298
sg115
S'_ParValue'
p509
sg122
S's.as'
p510
sasa(dp511
g81
g417
sg51
S'_ParNameLbl'
p512
sg83
S'Label'
p513
sg85
(lp514
sg23
Nsg88
(lp515
I3341
aI7775
asg90
(lp516
sg98
(lp517
(dp518
g51
S'textvariable'
p519
sg115
S'_ParName'
p520
sg122
S's.as'
p521
sasa(dp522
g81
g442
sg51
S'_SubmitFrame'
p523
sg83
g444
sg85
(lp524
(dp525
g51
g478
sg115
g479
sa(dp526
g51
g481
sg115
S'x'
sasg23
(L0L
L3L
tp527
sg88
g89
sg90
(lp528
sg98
(lp529
sa(dp530
g81
g417
sg51
S'_TopLabel'
p531
sg83
g513
sg85
(lp532
sg23
Nsg88
(lp533
I4603
aI191
asg90
(lp534
sg98
(lp535
(dp536
g51
g131
sg115
S'Define the opcode and press OK'
p537
sg122
Nsasasg219
g378
sg33
L1L
sa(dp538
g49
g38
sg51
S'SDR2_Translate'
p539
sg27
S'_FlowList'
p540
sg52
S'Tkinter.Frame'
p541
sg54
(lp542
(lp543
I4997
aI562
aI0
aa(lp544
I2547
aI5275
aI1
aa(lp545
I1273
aI1687
aI0
aa(lp546
I1273
aI9318
aI0
aa(lp547
I6270
aI7572
aI0
aa(lp548
I6270
aI8266
aI0
aa(lp549
I6270
aI6435
aI0
aa(lp550
I5282
aI3493
aI1
aa(lp551
I7744
aI3493
aI1
aa(lp552
I3911
aI5766
aI0
aa(lp553
I3911
aI2057
aI0
aa(lp554
I6513
aI5766
aI0
aa(lp555
I4348
aI6998
aI1
aa(lp556
I5749
aI6998
aI1
aa(lp557
I5949
aI9127
aI1
aa(lp558
I7975
aI9438
aI0
aasg38
(dp559
g36
S'535.31'
p560
sg38
(lp561
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                SDR2_Translate                                #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass SDR2_Translate(Frame):\n    def __init__(self,Master=None,*pos,**kw):\n'
p562
aS"        #\n        #Your code here\n        #\n        self.curPath = '.'\n        self.current_str_idx = 0\n        self.current_act_idx = 0\n        self.actionFlow = []\n        self.strange_byte = ''\n        self.currentImage = ''\n        self.scene = Scene()\n        self.charNames = getCharNames(GameDataLoc)\n        self.lin_stack = []\n        self.mode = ''\n        self.pak_filenum = 0\n        self.pak_stack = []\n        self.visible_opcodes = OP_FUNCTIONS\n        self.hidden_opcodes = {}\n"
p563
aS"\n        apply(Frame.__init__,(self,Master),kw)\n        self._CurAction = StringVar()\n        self._CurrentEditString1 = StringVar()\n        self._CurrentEditString2 = StringVar()\n        self._CurrentEditString3 = StringVar()\n        self._FileNameText = StringVar()\n        self._Filtered = StringVar()\n        self._TextWidthVal = StringVar()\n        self._MaxWidthEnabled = IntVar()\n        self._OpCodeEditText = StringVar()\n        self._ParEditText = StringVar()\n        self._ParLabelText = StringVar()\n        self._EditString1Len = StringVar()\n        self._EditString2Len = StringVar()\n        self._EditString3Len = StringVar()\n        self._StringIdx = StringVar()\n        self._FileNameFrame = Frame(self)\n        self._FileNameFrame.pack(fill='x',side='top')\n        self._FileName = Label(self._FileNameFrame\n            ,textvariable=self._FileNameText)\n        self._FileName.pack(side='top')\n        self._Frame2 = Frame(self)\n        self._Frame2.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self._OpFrame = Frame(self._Frame2)\n        self._OpFrame.pack(anchor='nw',fill='y',ipadx='25',side='left')\n        self._ContentFrame = Frame(self._Frame2)\n        self._ContentFrame.pack(anchor='nw',expand='yes',fill='both',side='left')\n        self._Frame1 = Frame(self._OpFrame)\n        self._Frame1.pack(fill='both',side='top')\n        self._FlowFrameLabel = Label(self._Frame1,text='Actions List')\n        self._FlowFrameLabel.pack(anchor='nw',side='left')\n        self._FilterFlowList = Checkbutton(self._Frame1\n            ,command=self._on_FilterFlowList_check,text='Filtered'\n            ,variable=self._Filtered)\n        self._FilterFlowList.pack(anchor='ne',side='right')\n        self._FlowFileUpBtn = Button(self._Frame1,state='disabled',text='UP')\n        self._FlowFileUpBtn.pack(side='right')\n        self._FlowFileUpBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_FlowFileUpBtn_ButRel_1)\n        self._FlowFrame = Frame(self._OpFrame)\n        self._FlowFrame.pack(expand='yes',fill='both',side='top')\n        self._FlowList = Listbox(self._FlowFrame)\n        self._FlowList.pack(expand='yes',fill='both',side='left')\n        self._FlowList.bind('<<ListboxSelect>>',self._on_FlowList_select)\n        self._FlowList.bind('<Double-Button-1>',self._on_FlowList_DblBtn)\n        self._FlowScroll = Scrollbar(self._FlowFrame)\n        self._FlowScroll.pack(anchor='e',fill='y',side='left')\n        self._Frame3 = Frame(self._OpFrame)\n        self._Frame3.pack(fill='x',side='top')\n        self._AddOpBtn = Button(self._Frame3,height='3',text='ADD OP')\n        self._AddOpBtn.pack(expand='yes',fill='both',side='left')\n        self._AddOpBtn.bind('<ButtonRelease-1>',self._on_AddOpBtn_Button_1)\n        self._DelOpBtn = Button(self._Frame3,text='DELETE OP')\n        self._DelOpBtn.pack(expand='yes',fill='both',side='left')\n        self._DelOpBtn.bind('<ButtonRelease-1>',self._on_DelOpBtn_Button_1)\n        self._TabHost = ttk.Notebook(self._ContentFrame)\n        self._TabHost.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self._Frame9 = Frame(self._ContentFrame)\n        self._Frame9.pack(fill='x',side='top')\n        self._WorkLabelFrame = Frame(self._ContentFrame)\n        self._WorkLabelFrame.pack(anchor='nw',fill='x',side='top')\n        self._WorkFrameLabel = Label(self._WorkLabelFrame,text='Parameters List')\n        self._WorkFrameLabel.pack(padx='35',side='left')\n        self._CurActionLabel = Label(self._WorkLabelFrame\n            ,textvariable=self._CurAction)\n        self._CurActionLabel.pack(side='left')\n        self._ParFrame = Frame(self._ContentFrame)\n        self._ParFrame.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self._StringFrame = Frame(self._TabHost)\n        self._StringFrame.pack(side='left')\n        self._MiscFrame = Frame(self._TabHost)\n        self._MiscFrame.pack(side='left')\n        self._CanvasFrame = Frame(self._TabHost)\n        self._CanvasFrame.pack(side='left')\n        self._ScreenView = Canvas(self._CanvasFrame,background='#000000'\n            ,height=SCREEN_H,width=SCREEN_W)\n        self._ScreenView.pack(expand='yes',side='left')\n        self._Frame10 = Frame(self._Frame9)\n        self._Frame10.pack(side='left')\n        self._EditString1 = ttk.Entry(self._Frame10\n            ,textvariable=self._CurrentEditString1,width='50')\n        self._EditString1.pack(anchor='s',side='top')\n        self._EditString3 = Entry(self._Frame10\n            ,textvariable=self._CurrentEditString3,width='50')\n        self._EditString3.pack(side='bottom')\n        self._EditString2 = Entry(self._Frame10\n            ,textvariable=self._CurrentEditString2,width='50')\n        self._EditString2.pack(side='bottom')\n        self._Frame12 = Frame(self._Frame9)\n        self._Frame12.pack(side='left')\n        self._String1Len = Label(self._Frame12,textvariable=self._EditString1Len)\n        self._String1Len.pack(side='top')\n        self._String2Len = Label(self._Frame12,textvariable=self._EditString2Len)\n        self._String2Len.pack(side='top')\n        self._String3Len = Label(self._Frame12,textvariable=self._EditString3Len)\n        self._String3Len.pack(side='bottom')\n        self._Frame11 = Frame(self._Frame9)\n        self._Frame11.pack(anchor='nw',fill='x',side='left')\n        self._SetStringBtn = Button(self._Frame11,text='SET STRING')\n        self._SetStringBtn.pack(side='left')\n        self._SetStringBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_SetStringBtn_Button_1)\n        self._Frame4 = Frame(self._ParFrame)\n        self._Frame4.pack(expand='yes',fill='both',side='left')\n        self._ParList = Listbox(self._Frame4)\n        self._ParList.pack(expand='yes',fill='both',side='top')\n        self._Frame5 = Frame(self._ParFrame)\n        self._Frame5.pack(expand='yes',fill='x',side='left')\n        self._Frame8 = Frame(self._StringFrame)\n        self._Frame8.pack(side='top')\n        self._StringListLabel = Label(self._Frame8,text='String list')\n        self._StringListLabel.pack(anchor='n',fill='x',side='left')\n        self._Frame6 = Frame(self._StringFrame)\n        self._Frame6.pack(expand='yes',fill='both',side='top')\n        self._StringList = Listbox(self._Frame6)\n        self._StringList.pack(anchor='nw',expand='yes',fill='both',side='left')\n        self._StringList.bind('<<ListboxSelect>>',self._on_StringList_select)\n        self._StringScroll = Scrollbar(self._Frame6)\n        self._StringScroll.pack(anchor='e',fill='y',side='left')\n        self._Frame7 = Frame(self._StringFrame)\n        self._Frame7.pack(fill='both',side='top')\n        self._StringIdxTextLbl = Label(self._Frame7,text='Current string:')\n        self._StringIdxTextLbl.pack(side='left')\n        self._StringIdxLbl = Label(self._Frame7,textvariable=self._StringIdx)\n        self._StringIdxLbl.pack(side='left')\n        self._AddStringBtn = Button(self._Frame7,text='Add string')\n        self._AddStringBtn.pack(anchor='e',side='left')\n        self._AddStringBtn.bind('<ButtonPress-1>' \\\n            ,self._on_AddStringBtn_Button_1)\n        self._Frame14 = Frame(self._MiscFrame)\n        self._Frame14.pack(expand='yes',fill='both',side='top')\n        self._TextAreaLbl = Label(self._Frame14,text='Text area')\n        self._TextAreaLbl.pack(anchor='n',side='top')\n        self._PakTextArea = Text(self._Frame14,height='8',wrap='word')\n        self._PakTextArea.pack(expand='yes',fill='y',side='top')\n        self._Frame13 = Frame(self._MiscFrame)\n        self._Frame13.pack(fill='x',side='top')\n        self._MaxWidthEntry = IntegerEntry(self._Frame13,state='disabled'\n            ,textvariable=self._TextWidthVal)\n        self._MaxWidthEntry.pack(side='left')\n        self._MaxWidthTest = Checkbutton(self._Frame13\n            ,command=self._on_MaxWidthTest_click,text='Max Width'\n            ,variable=self._MaxWidthEnabled)\n        self._MaxWidthTest.pack(fill='x',side='left')\n        self._SetPakTextBtn = Button(self._Frame13,text='Set Text')\n        self._SetPakTextBtn.pack(side='right')\n        self._SetPakTextBtn.bind('<ButtonRelease-1>' \\\n            ,self._on_SetPakTextBtn_ButRel_1)\n        self._ParListFrame = Frame(self._Frame5)\n        self._ParListFrame.pack(expand='yes',fill='x',side='top')\n        self._OpCodeLabel = Label(self._ParListFrame,text='Op Code',width='10')\n        self._OpCodeLabel.pack(anchor='nw',side='left')\n        self._OpCodeEdit = Entry(self._ParListFrame\n            ,textvariable=self._OpCodeEditText)\n        self._OpCodeEdit.pack(anchor='nw',side='left')\n        self._ParEditFrame = Frame(self._Frame5)\n        self._ParEditFrame.pack(expand='yes',fill='x',side='top')\n        self._ParLabel = Label(self._ParEditFrame\n            ,textvariable=self._ParLabelText,width='10')\n        self._ParLabel.pack(anchor='nw',side='left')\n        self._ParEdit = Entry(self._ParEditFrame,textvariable=self._ParEditText)\n        self._ParEdit.pack(anchor='nw',side='left')\n        self._Button1 = Button(self._ParEditFrame)\n        self._Button1.pack(anchor='nw',side='left')\n"
p564
aS'        #\n        #Your code here\n        #\n        self._FileNameText.set(\'Select the file\')\n        self._ParLabelText.set(\'Par name\')\n        self._CurrentEditString1.trace(\'w\', self._on_EditString1_modified)\n        self._CurrentEditString2.trace(\'w\', self._on_EditString2_modified)\n        self._CurrentEditString3.trace(\'w\', self._on_EditString3_modified)\n        self._TextWidthVal.trace(\'w\', self._on_MaxWidthEntry_changed)\n        # Tabs\n        self._TabHost.add(self._CanvasFrame, text="Canvas")\n        self._TabHost.add(self._StringFrame, text="Strings")\n        self._TabHost.add(self._MiscFrame, text="Pak Text")\n        # Filter\n        self._FilterFlowList.deselect()\n        # Set menu\n        self._RootMenu = Menu(Master)\n        # File menu\n        FileMenu = Menu(self._RootMenu, tearoff=0)\n        FileMenu.add_command(label="Open", command=self.openFile)\n        FileMenu.add_command(label="Save", command=self.saveFile)\n        FileMenu.add_command(label="Extract Pak", command=self.extractPak)\n        FileMenu.add_command(label="Exit", command=exit)\n        self._RootMenu.add_cascade(label="File", menu=FileMenu)\n        # Options menu\n        OptionsMenu = Menu(self._RootMenu, tearoff=0)\n        OptionsMenu.add_command(label="Game Data", command=self.openGameDataOpts)\n        self._RootMenu.add_cascade(label="Options", menu=OptionsMenu)\n        Master.config(menu=self._RootMenu)\n        # Scrollbars\n        self._FlowScroll.config( command = self._FlowList.yview )\n        self._FlowList[\'yscrollcommand\'] = self._FlowScroll.set\n        self._StringScroll.config( command = self._StringList.yview )\n        self._StringList[\'yscrollcommand\'] = self._StringScroll.set\n'
p565
aS'    #\n    #Start of event handler methods\n    #\n'
p566
aS"    def _on_EditString1_modified(self,*args):\n        # We don't need to count the <CLT>s\n        string = self._CurrentEditString1.get()\n        string = re.sub(r'<CLT.*?>', '', string)\n        self._EditString1Len.set('Chars left: %d' % (96 - len(string)))\n        pass\n\n    def _on_EditString2_modified(self,*args):\n        # We don't need to count the <CLT>s\n        string = self._CurrentEditString2.get()\n        string = re.sub(r'<CLT.*?>', '', string)\n        self._EditString2Len.set('Chars left: %d' % (96 - len(string)))\n        pass\n\n    def _on_EditString3_modified(self,*args):\n        # We don't need to count the <CLT>s\n        string = self._CurrentEditString3.get()\n        string = re.sub(r'<CLT.*?>', '', string)\n        self._EditString3Len.set('Chars left: %d' % (96 - len(string)))\n        pass\n"
p567
aS'\n    def _on_AddOpBtn_Button_1(self'
p568
aS',Event=None):\n        question = "This action will ADD a new Operation into the script. Continue?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            # Here we should open another window to add op\n            w = OpCodeCreator(self)\n            # Wait for the window to close\n            w.wait_window(w)\n            pass\n        pass\n'
p569
aS'\n    def _on_AddStringBtn_Button_1(self'
p570
aS',Event=None):\n        # Show warning\n        question = "This action will ADD a string into the script. Continue?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            s = tkSimpleDialog.askstring("Add string", "")\n            if s:\n                # Append the string into the list and add it to the listbox\n                try:\n                    # Find opcode in which we declare the number of strings\n                    ns_idx = self.lin_stack[-1].opcode_list.index(0)\n                    # Add one more string\n                    self.lin_stack[-1].pars_list[ns_idx] = (self.lin_stack[-1].pars_list[ns_idx][0], self.lin_stack[-1].pars_list[ns_idx][0][1] + 1)\n                    # Add the string to the string_list \n                    self.lin_stack[-1].string_list.append(s.encode(\'utf16\'))\n                    # Add it to the listbox\n                    self._StringList.insert(END, s)\n                    # Show the index of the new string\n                    tkMessageBox.showinfo(\'String added\', \'Inserted string index: %s\' % str(len(self.lin_stack[-1].string_list) - 1))\n                except:\n                    # Something went wrong\n                    tkMessageBox.showerror(\'Error\', \'Error adding string\')\n        pass\n'
p571
aS'\n    def _on_DelOpBtn_Button_1(self'
p572
aS',Event=None):\n        question = "This action will DELETE the Operation from the script. Continue?"\n        proceed = tkMessageBox.askyesno("WARNING", question)\n        if proceed:\n            i = int(self._FlowList.curselection()[0])\n            # Delete from lists\n            self._FlowList.delete(i)\n            # Change strings section offset\n            opcode = self.lin_stack[-1].opcode_list[i]\n            offset = 0x02\n            # Add size of each parameter\n            for par in OP_PARAMS[opcode]:\n                offset += struct.calcsize(par[1]) \n            self.lin_stack[-1].baseoffset -= offset\n            # Delete opcode, action and parameters\n            del self.lin_stack[-1].opcode_list[i]\n            del self.lin_stack[-1].action_list[i]\n            del self.lin_stack[-1].pars_list[i]\n        pass\n'
p573
aS'\n    def _on_FilterFlowList_check(self'
p574
aS",Event=None):\n        if self._Filtered.get() == '1':\n            # Create a filter window\n            flt = Filter(self)\n            # Populate the window\n            flt.initLists(self.hidden_opcodes, self.visible_opcodes)\n            # Wait for the window to close\n            flt.wait_window(flt)\n            pass\n        else:\n            pass\n        pass\n"
p575
aS'\n    def _on_FlowFileUpBtn_ButRel_1(self'
p576
aS',Event=None):\n        # For lin - just pop the last one and populate with the old\n        if self.mode == \'.lin\':\n            st = self.lin_stack\n            question = "Save changes?"\n            proceed = tkMessageBox.askyesno("WARNING", question)\n            if proceed:\n                self.saveFile()\n            st.pop()\n            self.populateLinLists()\n            # Check stack size, if last element - disable UP btn\n            if len(st) < 2:\n                self._FlowFileUpBtn.config(state=\'disabled\')\n            # Fix header\n            self._FileNameText.set(os.path.split(st[-1].fn)[1])\n            pass\n        # For pak - we have internal writer\n        if self.mode == \'.pak\':\n            st = self.pak_stack\n            # Save changes\n            question = "Save changes?"\n            proceed = tkMessageBox.askyesno("WARNING", question)\n            if proceed:\n                # Create a data tuple\n                filename = st[-2].files[self.pak_filenum][0]\n                data = st[-1].to_string()\n                st[-2].files[self.pak_filenum] = (filename, data)\n            # Clear flowlist and pop the last element of the pak stack\n            self._FlowList.delete(0,END)\n            st.pop()\n            # Populate flowlist with original pak\'s files\n            for f in st[-1].files:\n                self._FlowList.insert(END, "%s" % f[0])                \n            # Check stack size, if last element - disable UP btn\n            if len(st) < 2:\n                self._FlowFileUpBtn.config(state=\'disabled\')\n        pass\n'
p577
aS'\n    def _on_FlowList_DblBtn(self'
p578
aS',Event=None):\n        if self.mode == \'.pak\':\n            self._on_FlowList_DblBtn_Pak()\n        pass\n    \n    def _on_FlowList_DblBtn_Pak(self):\n        if self._FlowList.size() > 0:\n            # Now working not with actions, but with files\n            i = int(self._FlowList.curselection()[0])\n            file = self.pak_stack[-1].files[i]\n            if \'.dat\' in file[0] or \'.p3d\' in file[0]:\n                question = "Try unpacking binary file?"\n                proceed = tkMessageBox.askyesno("WARNING", question)\n                if proceed:\n                    self.pak_filenum = i\n                    # We\'ll use it as a directory\n                    self._FlowList.delete(0,END)\n                    # Now unpack the file\n                    pak = PakFile()\n                    pak.fromData(file[1])\n                    self.pak_stack.append(pak)\n                    for f in self.pak_stack[-1].files:\n                        self._FlowList.insert(END, "%s" % f[0])\n                    # Set UP btn working\n                    self._FlowFileUpBtn.config(state=\'normal\')\n'
p579
aS'\n    def _on_FlowList_select(self'
p580
aS',Event=None):\n        self.current_act_idx = int(self._FlowList.curselection()[0])\n        if self.mode == \'.lin\':\n            self._on_FlowList_select_Lin()\n        if self.mode == \'.pak\':\n            self._on_FlowList_select_Pak()\n        pass\n    \n    def _on_FlowList_select_Lin(self):\n        if self._FlowList.size() > 0:\n            i = int(self._FlowList.curselection()[0])\n            action = self.lin_stack[-1].action_list[i]\n            pars = self.lin_stack[-1].pars_list[i]\n            code = self.lin_stack[-1].opcode_list[i]\n            # Clear everything related to pars in GUI\n            self._OpCodeEditText.set(\'\')\n            self._ParEditText.set(\'\')\n            self._ParLabelText.set(\'Par name\')\n            self._ParList.delete(0,END)\n            # Put all parameters to the GUI\n            self._OpCodeEditText.set(code)\n            for par in pars:\n                self._ParList.insert(END, "%s:\\t %d" % (par[0],par[1]) )\n            # What to do for different opcodes\n            # Show sprite\n            if code == WRD_SPRITE:\n                GuiFuncs.showSprite(self, GameDataLoc, pars)\n            # Show flash\n            if code == WRD_FLASH:\n                GuiFuncs.showFlash(self, GameDataLoc, pars)\n            # Show BGD\n            if code == WRD_BGD:\n                GuiFuncs.showBGD(self, GameDataLoc, pars)\n            # Text highlighting\n            if code == WRD_CLT:\n                self.scene.text_clt = True\n            # Get string idx\n            if code == WRD_GET_LINE_IDX:\n                self._StringList.select_set(pars[0][1])\n                self._on_StringList_select()\n                self.scene.text = self._StringList.get(pars[0][1])\n            # Print next string from FIFO\n            if code == WRD_PRINT_LINE:\n                GuiFuncs.printLine(self)\n            # If waiting for input (go to the next line waiting)\n            if code == WRD_WAIT_INPUT:\n                self.scene.text = \'\'\n            # Set speaker\n            if code == WRD_SPEAKER:\n                self.scene.speaker = self.charNames[pars[0][1]]\n            # Call script\n            if code == WRD_CALL_SCRIPT:\n                question = \'Call script: e%02d_%03d_%03d.lin?\' % (pars[0][1], pars[1][1], pars[2][1])\n                proceed = tkMessageBox.askyesno("Call script", question)\n                if proceed:\n                    # Clear canvas\n                    self._ScreenView.delete(ALL)\n                    self.scene.flash = []\n                    # Clear lists\n                    self._FlowList.delete(0,END)\n                    self._StringList.delete(0,END)\n                    # Load next file\n                    next_fn = os.path.join(DoneDataLoc, \'jp\', \'script\', \'e%02d_%03d_%03d.lin\' % (pars[0][1], pars[1][1], pars[2][1]))\n                    if not os.path.isfile(next_fn):\n                        next_fn = os.path.join(GameDataLoc, \'jp\', \'script\', \'e%02d_%03d_%03d.lin\' % (pars[0][1], pars[1][1], pars[2][1]))                    \n                    self.decodeFile(next_fn, clear = False)\n                    # Set UP btn working\n                    self._FlowFileUpBtn.config(state=\'normal\')\n            # Go to the next script\n            if code == WRD_GOTO_SCRIPT:\n                question = \'Go to the next script: e%02d_%03d_%03d.lin?\' % (pars[0][1], pars[1][1], pars[2][1])\n                loadNext = tkMessageBox.askyesno("Go to the next script", question)\n                if loadNext:\n                    # Clear canvas\n                    self._ScreenView.delete(ALL)\n                    self.scene.flash = []\n                    # Clear lists\n                    self._FlowList.delete(0,END)\n                    self._StringList.delete(0,END)\n                    # Load next file\n                    next_fn = os.path.join(DoneDataLoc, \'jp\', \'script\', \'e%02d_%03d_%03d.lin\' % (pars[0][1], pars[1][1], pars[2][1]))\n                    if not os.path.isfile(next_fn):\n                        next_fn = os.path.join(GameDataLoc, \'jp\', \'script\', \'e%02d_%03d_%03d.lin\' % (pars[0][1], pars[1][1], pars[2][1]))                    \n                    self.decodeFile(next_fn)\n        pass\n    \n    def _on_FlowList_select_Pak(self):\n        if self._FlowList.size() > 0:\n            # Now working not with actions, but with files\n            i = int(self._FlowList.curselection()[0])    \n            # If not - looking at the current pak file and level\n            file = self.pak_stack[-1].files[i]\n            # Checking the file type\n            if \'.gim\' in file[0]:\n                GimImage = GimFile()\n                GimImage.fromData(file[1])\n                GimImage.getImage()\n                pilImage = PIL.Image.new("RGBA", (GimImage.width, GimImage.height))\n                pilImage.putdata(GimImage.image)\n                self.scene.sprite = ImageTk.PhotoImage(pilImage)\n                POS_X = (2*SCREEN_W - GimImage.width)/2\n                POS_Y = (2*SCREEN_H - GimImage.height)/2\n                imagesprite = self._ScreenView.create_image(POS_X,POS_Y,image=self.scene.sprite, tag = \'sprite\')                \n            elif \'.gmo\' in file[0]:\n                GmoImage = GmoFile()\n                GmoImage.fromData(file[1])\n                GmoImage.extractGim()\n                GmoImage.gim.getImage()\n                pilImage = PIL.Image.new("RGBA", (GmoImage.gim.width, GmoImage.gim.height))\n                pilImage.putdata(GmoImage.gim.image)\n                self.scene.sprite = ImageTk.PhotoImage(pilImage)\n                POS_X = (2*SCREEN_W - GmoImage.gim.width)/2\n                POS_Y = (2*SCREEN_H - GmoImage.gim.height)/2\n                imagesprite = self._ScreenView.create_image(POS_X,POS_Y,image=self.scene.sprite, tag = \'sprite\')                \n            elif \'.txt\' in file[0]:\n                self.scene.text = file[1].decode(\'utf16\')\n                self._CurrentEditString1.set(self.scene.text)\n                self._PakTextArea.delete(1.0, END)\n                self._PakTextArea.insert(END, self.scene.text)\n        pass\n                \n    def openGameDataOpts(self):\n        gd = GameData()\n        pass\n    \n    def extractPak(self):\n        options = {}\n        options[\'filetypes\'] = [(\'pak files\', (\'*.pak\',\'*.p3d\'))]\n        fn = tkFileDialog.askopenfilename(**options)\n        ds = tkFileDialog.askdirectory()\n        if fn and ds:\n            pak = PakFile(fn)\n            pak.getFiles()\n            for f in pak.files:\n                fp = open(os.path.join(ds, f[0]), \'wb\')\n                fp.write(f[1])\n                fp.close\n        tkMessageBox.showinfo(\'Complete\', \'Pak file %s extracted successfully into %s\' % (fn, ds))\n        pass\n        \n    def openFile(self):\n        options = {}\n        options[\'filetypes\'] = [(\'script files\', \'.lin\'), (\'image files\', (\'*.gim\',\'*.gmo\')), (\'pak files\', (\'*.pak\',\'*.p3d\')), (\'all files\', \'.*\')]\n        fn = tkFileDialog.askopenfilename(**options)\n        if fn:\n            self.decodeFile(fn)\n        pass\n    \n    def saveFile(self):\n        fn = tkFileDialog.asksaveasfilename(initialfile=self._FileNameText.get())\n        if fn:\n            self.encodeFile(fn)\n            # Get current slider positions and re-read both files\n            fl = self._FlowList.yview()\n            st = self._StringList.yview()\n            self.decodeFile(fn)\n            self._FlowList.yview_moveto(fl[0])\n            self._StringList.yview_moveto(st[0])\n        pass\n    \n    def populateLinLists(self):\n        # Clear everything\n        self._StringList.delete(0,END)\n        self._FlowList.delete(0,END)\n        # Put strings into listbox\n        for s in self.lin_stack[-1].string_list:\n            self._StringList.insert(END, s.decode(\'utf16\'))        \n        # Set action list\n        for i in xrange(len(self.lin_stack[-1].action_list)):\n            self._FlowList.insert(END, "%s%s" % (self.lin_stack[-1].action_list[i], self.lin_stack[-1].pars_list[i]))\n        pass\n    \n    def decodeFile(self, fn, clear = True):\n        # Clear stacks\n        if clear:\n            self.lin_stack = []\n            self.pak_stack = []\n        # Get file type from ext\n        file = os.path.split(fn)[1]\n        self._FileNameText.set(file)\n        print("Decoding %s" % fn)\n        # Lin file\n        if \'.lin\' in file:\n            self.mode = \'.lin\'\n            # Decode another file\n            self.lin_stack.append(LinFile())\n            self.lin_stack[-1].decodeLinFile(fn)\n            self.populateLinLists()\n        \n        # Pak file\n        if \'.pak\' in file:\n            self.mode = \'.pak\'\n            # Decode .pak file\n            pak = PakFile(fn)\n            pak.getFiles()\n            # Append it into stack\n            self.pak_stack.append(pak)\n            # Clear everything\n            self._StringList.delete(0,END)\n            self._FlowList.delete(0,END)\n            # Put all filenames into the flow list\n            for f in self.pak_stack[-1].files:\n                self._FlowList.insert(END, "%s" % f[0])\n        \n        # P3d file\n        if \'.p3d\' in file:\n            self.mode = \'.pak\'\n            # Decode .pak file\n            pak = P3dFile(fn)\n            pak.getFiles()\n            # Append it into stack\n            self.pak_stack.append(pak)\n            # Clear everything\n            self._StringList.delete(0,END)\n            self._FlowList.delete(0,END)\n            # Put all filenames into the flow list\n            for f in self.pak_stack[-1].files:\n                self._FlowList.insert(END, "%s" % f[0])\n        pass\n        \n    def encodeFile(self,fn):\n        file = os.path.split(fn)[1]\n        self._FileNameText.set(file)\n        if \'.lin\' in fn:\n            self.lin_stack[-1].encodeLinFile(fn)\n        if \'.pak\' in fn:\n            self.pak_stack[-1].makePak(fn)\n        pass\n        \n    def exit():\n        Root.quit()\n\n'
p581
aS'\n    def _on_MaxWidthEntry_changed(self'
p582
aS',*args):\n        try:\n            self._PakTextArea.config(width=int(self._TextWidthVal.get()))\n        except:\n            pass\n        pass\n'
p583
aS'\n    def _on_MaxWidthTest_click(self'
p584
aS",Event=None):\n        if self._MaxWidthEnabled.get() == 1:\n            self._MaxWidthEntry.config(state='normal')\n            try: \n                self._PakTextArea.config(width=int(self._TextWidthVal.get()))\n            except:\n                self._TextWidthVal.set('36')\n        else:\n            self._MaxWidthEntry.config(state='disabled')\n        pass\n"
p585
aS'\n    def _on_SetPakTextBtn_ButRel_1(self'
p586
aS",Event=None):\n        str = self._PakTextArea.get(1.0, END)\n        i = self.current_act_idx\n        l = list(self.pak_stack[-1].files[i])\n        l[1] = str.encode('utf16')\n        self.pak_stack[-1].files[i] = tuple(l)\n        pass\n"
p587
aS'\n    def _on_SetStringBtn_Button_1(self'
p588
aS',Event=None):\n        # For .lin file we\'re just changing the string in its string_list\n        if self.mode == \'.lin\':\n            # Construct the new string\n            str1 = self._CurrentEditString1.get()\n            str2 = self._CurrentEditString2.get()\n            str3 = self._CurrentEditString3.get()\n            final_string = \'\'\n            if str1 != \'\':\n                final_string += str1 + (\'\\x0d\\x00\\x0a\\x00\').decode(\'utf16\')\n            if str2 != \'\':\n                final_string += str2 + (\'\\x0d\\x00\\x0a\\x00\').decode(\'utf16\')\n            if str3 != \'\':\n                final_string += str3 + (\'\\x0d\\x00\\x0a\\x00\').decode(\'utf16\')\n            # Replace chars that\'re not present in the game\n            final_string = final_string.replace(\'?\', u"\\uFF1F") # Question mark\n            # Get string index\n            idx = self.current_str_idx\n            # Delete the old string from the visible list\n            self._StringList.delete(idx)\n            # Insert the new string\n            self.lin_stack[-1].string_list[idx] = final_string\n            self._StringList.insert(idx, final_string)\n            # Show the new version\n            self.scene.text = self._StringList.get(idx)\n            GuiFuncs.printLine(self)\n        # For .pak we\'re changing the Pak.files[i] content\n        elif self.mode == \'.pak\':\n            str = self._CurrentEditString1.get()\n            i = self.current_act_idx\n            l = list(self.pak_stack[-1].files[i])\n            l[1] = str.encode(\'utf16\')\n            self.pak_stack[-1].files[i] = tuple(l)\n        pass\n'
p589
aS'\n    def _on_StringList_select(self'
p590
aS",Event=None):\n        if self._StringList.size() > 0:\n            num = int(self._StringList.curselection()[0])\n            string = self._StringList.get(num)\n            string = string.split('\\r\\n')\n            self._CurrentEditString1.set(string[0])\n            if len(string) > 1:\n                self._CurrentEditString2.set(string[1])\n            else:\n                self._CurrentEditString2.set('')\n            if len(string) > 2:\n                self._CurrentEditString3.set(string[2])\n            else:\n                self._CurrentEditString3.set('')\n            self.current_str_idx = num\n            self._StringIdx.set(num)\n        pass\n"
p591
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p592
aS'\n# This one-liner splits the string without consuming delimiters\ndef splitkeepsep(s, sep):\n    return reduce(lambda acc, elem: acc[:-1] + [acc[-1] + elem] if elem == sep else acc + [elem], re.split("(%s)" % re.escape(sep), s), [])'
p593
asg6
I0
sg45
I9431167
ssg28
(lp594
(dp595
g81
S'Tkinter'
p596
sg51
g539
sg83
S'Frame'
p597
sg85
(lp598
sg23
g87
sg88
g89
sg90
(lp599
sg98
(lp600
sa(dp601
g81
g417
sg51
S'_AddOpBtn'
p602
sg83
g419
sg85
(lp603
(dp604
g51
g478
sg115
g479
sa(dp605
g51
g481
sg115
g482
sasg23
Nsg88
(lp606
I794
aI9689
asg90
(lp607
(dp608
g93
S'_on_AddOpBtn_Button_1'
p609
sg95
S''
sg96
S'<ButtonRelease-1>'
p610
sasg98
(lp611
(dp612
g51
g120
sg115
S'ADD OP'
p613
sg122
Nsa(dp614
g51
S'height'
p615
sg115
S'n:3'
p616
sg122
Nsasa(dp617
g81
S'Tkinter'
p618
sg51
S'_AddStringBtn'
p619
sg83
S'Button'
p620
sg85
(lp621
(dp622
g51
g114
sg115
S'e'
sasg23
Nsg88
(lp623
I3790
aI6124
asg90
(lp624
(dp625
g93
S'_on_AddStringBtn_Button_1'
p626
sg95
S''
sg96
S'<ButtonPress-1>'
p627
sasg98
(lp628
(dp629
g51
g120
sg115
S'Add string'
p630
sg122
Nsasa(dp631
g81
g109
sg51
S'_Button1'
p632
sg83
g111
sg85
(lp633
(dp634
g51
g114
sg115
S'nw'
p635
sasg23
Nsg88
(lp636
I7871
aI9749
asg90
(lp637
sg98
(lp638
sa(dp639
g81
S'Tkinter'
p640
sg51
S'_CanvasFrame'
p641
sg83
S'Frame'
p642
sg85
(lp643
sg23
(L0L
L1L
L1L
L0L
L2L
tp644
sg88
g89
sg90
(lp645
sg98
(lp646
sa(dp647
g81
S'Tkinter'
p648
sg51
S'_ContentFrame'
p649
sg83
S'Frame'
p650
sg85
(lp651
(dp652
g51
g114
sg115
S'nw'
p653
sa(dp654
g51
g478
sg115
S'yes'
p655
sa(dp656
g51
g481
sg115
S'both'
p657
sasg23
(L0L
L1L
L1L
tp658
sg88
g89
sg90
(lp659
sg98
(lp660
sa(dp661
g81
S'Tkinter'
p662
sg51
S'_CurActionLabel'
p663
sg83
S'Label'
p664
sg85
(lp665
sg23
Nsg88
(lp666
I6367
aI7823
asg90
(lp667
sg98
(lp668
(dp669
g51
g519
sg115
S'_CurAction'
p670
sg122
S's.as'
p671
sasa(dp672
g81
g417
sg51
S'_DelOpBtn'
p673
sg83
g419
sg85
(lp674
(dp675
g51
g478
sg115
g479
sa(dp676
g51
g481
sg115
g482
sasg23
Nsg88
(lp677
I1516
aI9689
asg90
(lp678
(dp679
g93
S'_on_DelOpBtn_Button_1'
p680
sg95
S''
sg96
S'<ButtonRelease-1>'
p681
sasg98
(lp682
(dp683
g51
g120
sg115
S'DELETE OP'
p684
sg122
Nsasa(dp685
g81
S'Tkinter'
p686
sg51
S'_EditString1'
p687
sg83
S'Entry'
p688
sg85
(lp689
(dp690
g51
g114
sg115
S's'
sasg23
Nsg88
(lp691
I3269
aI6639
asg90
(lp692
sg98
(lp693
(dp694
g51
S'pyclass'
p695
sg115
S'ttk.Entry'
p696
sg122
Nsa(dp697
g51
S'width'
p698
sg115
S'n:50'
p699
sg122
Nsa(dp700
g51
g298
sg115
S'_CurrentEditString1'
p701
sg122
S's.as'
p702
sasa(dp703
g81
g662
sg51
S'_EditString2'
p704
sg83
S'Entry'
p705
sg85
(lp706
sg23
Nsg88
(lp707
I3281
aI7010
asg90
(lp708
sg98
(lp709
(dp710
g51
g698
sg115
S'n:50'
p711
sg122
Nsa(dp712
g51
g298
sg115
S'_CurrentEditString2'
p713
sg122
S's.as'
p714
sasa(dp715
g81
S'Tkinter'
p716
sg51
S'_EditString3'
p717
sg83
S'Entry'
p718
sg85
(lp719
sg23
Nsg88
(lp720
I3299
aI7321
asg90
(lp721
sg98
(lp722
(dp723
g51
g698
sg115
S'n:50'
p724
sg122
Nsa(dp725
g51
g298
sg115
S'_CurrentEditString3'
p726
sg122
S's.as'
p727
sasa(dp728
g81
S'Tkinter'
p729
sg51
S'_FileName'
p730
sg83
S'Label'
p731
sg85
(lp732
sg23
Nsg88
(lp733
I4615
aI239
asg90
(lp734
sg98
(lp735
(dp736
g51
g519
sg115
S'_FileNameText'
p737
sg122
S's.as'
p738
sasa(dp739
g81
g648
sg51
S'_FileNameFrame'
p740
sg83
g650
sg85
(lp741
(dp742
g51
g481
sg115
S'x'
sasg23
(L0L
L0L
tp743
sg88
g89
sg90
(lp744
sg98
(lp745
sa(dp746
g81
g109
sg51
S'_FilterFlowList'
p747
sg83
S'Checkbutton'
p748
sg85
(lp749
(dp750
g51
g114
sg115
S'ne'
p751
sasg23
Nsg88
(lp752
I1983
aI1459
asg90
(lp753
sg98
(lp754
(dp755
g51
S'text'
p756
sg115
S'Filtered'
p757
sg122
Nsa(dp758
g51
S'variable'
p759
sg115
S'_Filtered'
p760
sg122
S'sif.as'
p761
sa(dp762
g51
S'command'
p763
sg115
S'_on_FilterFlowList_check'
p764
sg122
L1L
sasa(dp765
g81
g252
sg51
S'_FlowFileUpBtn'
p766
sg83
g254
sg85
(lp767
sg23
Nsg88
(lp768
I1195
aI1447
asg90
(lp769
(dp770
g93
S'_on_FlowFileUpBtn_ButRel_1'
p771
sg95
S''
sg96
S'<ButtonRelease-1>'
p772
sasg98
(lp773
(dp774
g51
g120
sg115
S'UP'
p775
sg122
Nsa(dp776
g51
g161
sg115
S'disabled'
p777
sg122
Nsasa(dp778
g81
g442
sg51
S'_FlowFrame'
p779
sg83
g444
sg85
(lp780
(dp781
g51
g478
sg115
g479
sa(dp782
g51
g481
sg115
g482
sasg23
(L0L
L1L
L0L
L1L
tp783
sg88
g89
sg90
(lp784
sg98
(lp785
sa(dp786
g81
g729
sg51
S'_FlowFrameLabel'
p787
sg83
g731
sg85
(lp788
(dp789
g51
g114
sg115
S'nw'
p790
sasg23
Nsg88
(lp791
I285
aI1447
asg90
(lp792
sg98
(lp793
(dp794
g51
g131
sg115
S'Actions List'
p795
sg122
Nsasa(dp796
g81
g252
sg51
g540
sg83
S'Listbox'
p797
sg85
(lp798
(dp799
g51
g478
sg115
S'yes'
p800
sa(dp801
g51
g481
sg115
S'both'
p802
sasg23
Nsg88
(lp803
I988
aI4653
asg90
(lp804
(dp805
g93
S'_on_FlowList_select'
p806
sg95
S''
sg96
S'<<ListboxSelect>>'
p807
sa(dp808
g93
S'_on_FlowList_DblBtn'
p809
sg95
S''
sg96
S'<Double-Button-1>'
p810
sasg98
(lp811
sa(dp812
g81
g252
sg51
S'_FlowScroll'
p813
sg83
S'Scrollbar'
p814
sg85
(lp815
(dp816
g51
g114
sg115
S'e'
sa(dp817
g51
g481
sg115
S'y'
sasg23
Nsg88
(lp818
I1322
aI4641
asg90
(lp819
sg98
(lp820
sa(dp821
g81
g101
sg51
S'_Frame1'
p822
sg83
g103
sg85
(lp823
(dp824
g51
g481
sg115
S'both'
p825
sasg23
(L0L
L1L
L0L
L0L
tp826
sg88
g89
sg90
(lp827
sg98
(lp828
sa(dp829
g81
S'Tkinter'
p830
sg51
S'_Frame10'
p831
sg83
S'Frame'
p832
sg85
(lp833
sg23
(L0L
L1L
L1L
L1L
L0L
tp834
sg88
g89
sg90
(lp835
sg98
(lp836
sa(dp837
g81
g830
sg51
S'_Frame11'
p838
sg83
g832
sg85
(lp839
(dp840
g51
g114
sg115
S'nw'
p841
sa(dp842
g51
g481
sg115
S'x'
sasg23
(L0L
L1L
L1L
L1L
L2L
tp843
sg88
g89
sg90
(lp844
sg98
(lp845
sa(dp846
g81
g830
sg51
S'_Frame12'
p847
sg83
g832
sg85
(lp848
sg23
(L0L
L1L
L1L
L1L
L1L
tp849
sg88
g89
sg90
(lp850
sg98
(lp851
sa(dp852
g81
S'Tkinter'
p853
sg51
S'_Frame13'
p854
sg83
S'Frame'
p855
sg85
(lp856
(dp857
g51
g481
sg115
S'x'
sasg23
(L0L
L1L
L1L
L0L
L1L
L1L
tp858
sg88
g89
sg90
(lp859
sg98
(lp860
sa(dp861
g81
g853
sg51
S'_Frame14'
p862
sg83
g855
sg85
(lp863
(dp864
g51
g478
sg115
S'yes'
p865
sa(dp866
g51
g481
sg115
S'both'
p867
sasg23
(L0L
L1L
L1L
L0L
L1L
L0L
tp868
sg88
g89
sg90
(lp869
sg98
(lp870
sa(dp871
g81
g648
sg51
S'_Frame2'
p872
sg83
g650
sg85
(lp873
(dp874
g51
g114
sg115
g653
sa(dp875
g51
g478
sg115
S'yes'
p876
sa(dp877
g51
g481
sg115
S'both'
p878
sasg23
(L0L
L1L
tp879
sg88
g89
sg90
(lp880
sg98
(lp881
sa(dp882
g81
g442
sg51
S'_Frame3'
p883
sg83
g444
sg85
(lp884
(dp885
g51
g481
sg115
S'x'
sasg23
(L0L
L1L
L0L
L2L
tp886
sg88
g89
sg90
(lp887
sg98
(lp888
sa(dp889
g81
S'Tkinter'
p890
sg51
S'_Frame4'
p891
sg83
S'Frame'
p892
sg85
(lp893
(dp894
g51
g478
sg115
S'yes'
p895
sa(dp896
g51
g481
sg115
g825
sasg23
(L0L
L1L
L1L
L3L
L0L
tp897
sg88
g89
sg90
(lp898
sg98
(lp899
sa(dp900
g81
g890
sg51
S'_Frame5'
p901
sg83
g892
sg85
(lp902
(dp903
g51
g478
sg115
S'yes'
p904
sa(dp905
g51
g481
sg115
S'x'
sasg23
(L0L
L1L
L1L
L3L
L1L
tp906
sg88
g89
sg90
(lp907
sg98
(lp908
sa(dp909
g81
S'Tkinter'
p910
sg51
S'_Frame6'
p911
sg83
S'Frame'
p912
sg85
(lp913
(dp914
g51
g478
sg115
S'yes'
p915
sa(dp916
g51
g481
sg115
S'both'
p917
sasg23
(L0L
L1L
L1L
L0L
L0L
L1L
tp918
sg88
g89
sg90
(lp919
sg98
(lp920
sa(dp921
g81
g910
sg51
S'_Frame7'
p922
sg83
g912
sg85
(lp923
(dp924
g51
g481
sg115
g917
sasg23
(L0L
L1L
L1L
L0L
L0L
L2L
tp925
sg88
g89
sg90
(lp926
sg98
(lp927
sa(dp928
g81
S'Tkinter'
p929
sg51
S'_Frame8'
p930
sg83
S'Frame'
p931
sg85
(lp932
sg23
(L0L
L1L
L1L
L0L
L0L
L0L
tp933
sg88
g89
sg90
(lp934
sg98
(lp935
sa(dp936
g81
g890
sg51
S'_Frame9'
p937
sg83
g892
sg85
(lp938
(dp939
g51
g481
sg115
S'x'
sasg23
(L0L
L1L
L1L
L1L
tp940
sg88
g89
sg90
(lp941
sg98
(lp942
sa(dp943
g81
S'Tkinter'
p944
sg51
S'_MaxWidthEntry'
p945
sg83
S'Entry'
p946
sg85
(lp947
sg23
Nsg88
(lp948
I5591
aI6077
asg90
(lp949
sg98
(lp950
(dp951
g51
g695
sg115
S'IntegerEntry'
p952
sg122
Nsa(dp953
g51
S'state'
p954
sg115
S'disabled'
p955
sg122
Nsa(dp956
g51
g298
sg115
S'_TextWidthVal'
p957
sg122
S's.as'
p958
sasa(dp959
g81
g944
sg51
S'_MaxWidthTest'
p960
sg83
S'Checkbutton'
p961
sg85
(lp962
(dp963
g51
g481
sg115
S'x'
sasg23
Nsg88
(lp964
I5828
aI6029
asg90
(lp965
sg98
(lp966
(dp967
g51
g756
sg115
S'Max Width'
p968
sg122
Nsa(dp969
g51
g759
sg115
S'_MaxWidthEnabled'
p970
sg122
S'sif.ai'
p971
sa(dp972
g51
g763
sg115
S'_on_MaxWidthTest_click'
p973
sg122
L1L
sasa(dp974
g81
g101
sg51
S'_MiscFrame'
p975
sg83
g103
sg85
(lp976
sg23
(L0L
L1L
L1L
L0L
L1L
tp977
sg88
g89
sg90
(lp978
sg98
(lp979
sa(dp980
g81
S'Tkinter'
p981
sg51
S'_OpCodeEdit'
p982
sg83
S'Entry'
p983
sg85
(lp984
(dp985
g51
g114
sg115
S'nw'
p986
sasg23
Nsg88
(lp987
I7095
aI8708
asg90
(lp988
sg98
(lp989
(dp990
g51
g298
sg115
S'_OpCodeEditText'
p991
sg122
S's.as'
p992
sasa(dp993
g81
g662
sg51
S'_OpCodeLabel'
p994
sg83
g664
sg85
(lp995
(dp996
g51
g114
sg115
g986
sasg23
Nsg88
(lp997
I6380
aI8708
asg90
(lp998
sg98
(lp999
(dp1000
g51
g131
sg115
S'Op Code'
p1001
sg122
Nsa(dp1002
g51
S'width'
p1003
sg115
S'n:10'
p1004
sg122
Nsasa(dp1005
g81
g648
sg51
S'_OpFrame'
p1006
sg83
g650
sg85
(lp1007
(dp1008
g51
S'ipadx'
p1009
sg115
S'n:25'
p1010
sa(dp1011
g51
g114
sg115
g653
sa(dp1012
g51
g481
sg115
S'y'
sasg23
(L0L
L1L
L0L
tp1013
sg88
g89
sg90
(lp1014
sg98
(lp1015
sa(dp1016
g81
g944
sg51
S'_PakTextArea'
p1017
sg83
S'Text'
p1018
sg85
(lp1019
(dp1020
g51
g478
sg115
g865
sa(dp1021
g51
g481
sg115
S'y'
sasg23
Nsg88
(lp1022
I6204
aI2476
asg90
(lp1023
sg98
(lp1024
(dp1025
g51
S'height'
p1026
sg115
S'n:8'
p1027
sg122
Nsa(dp1028
g51
S'wrap'
p1029
sg115
S'word'
p1030
sg122
Nsasa(dp1031
g81
g662
sg51
S'_ParEdit'
p1032
sg83
g705
sg85
(lp1033
(dp1034
g51
g114
sg115
g635
sasg23
Nsg88
(lp1035
I7101
aI9689
asg90
(lp1036
sg98
(lp1037
(dp1038
g51
g298
sg115
S'_ParEditText'
p1039
sg122
S's.as'
p1040
sasa(dp1041
g81
g890
sg51
S'_ParEditFrame'
p1042
sg83
g892
sg85
(lp1043
(dp1044
g51
g478
sg115
g895
sa(dp1045
g51
g481
sg115
S'x'
sasg23
(L0L
L1L
L1L
L3L
L1L
L1L
tp1046
sg88
g89
sg90
(lp1047
sg98
(lp1048
sa(dp1049
g81
g890
sg51
S'_ParFrame'
p1050
sg83
g892
sg85
(lp1051
(dp1052
g51
g114
sg115
g986
sa(dp1053
g51
g478
sg115
g904
sa(dp1054
g51
g481
sg115
g825
sasg23
(L0L
L1L
L1L
L3L
tp1055
sg88
g89
sg90
(lp1056
sg98
(lp1057
sa(dp1058
g81
g662
sg51
S'_ParLabel'
p1059
sg83
g664
sg85
(lp1060
(dp1061
g51
g114
sg115
g635
sasg23
Nsg88
(lp1062
I6422
aI9701
asg90
(lp1063
sg98
(lp1064
(dp1065
g51
g1003
sg115
S'n:10'
p1066
sg122
Nsa(dp1067
g51
g519
sg115
S'_ParLabelText'
p1068
sg122
S's.as'
p1069
sasa(dp1070
g81
g109
sg51
S'_ParList'
p1071
sg83
g135
sg85
(lp1072
(dp1073
g51
g478
sg115
g895
sa(dp1074
g51
g481
sg115
g825
sasg23
Nsg88
(lp1075
I3511
aI8864
asg90
(lp1076
sg98
(lp1077
sa(dp1078
g81
g890
sg51
S'_ParListFrame'
p1079
sg83
g892
sg85
(lp1080
(dp1081
g51
g478
sg115
g895
sa(dp1082
g51
g481
sg115
S'x'
sasg23
(L0L
L1L
L1L
L3L
L1L
L0L
tp1083
sg88
g89
sg90
(lp1084
sg98
(lp1085
sa(dp1086
g81
S'Tkinter'
p1087
sg51
S'_ScreenView'
p1088
sg83
S'Canvas'
p1089
sg85
(lp1090
(dp1091
g51
g478
sg115
S'yes'
p1092
sasg23
Nsg88
(lp1093
I8599
aI2931
asg90
(lp1094
sg98
(lp1095
(dp1096
g51
S'height'
p1097
sg115
S'u:SCREEN_H'
p1098
sg122
Nsa(dp1099
g51
S'width'
p1100
sg115
S'u:SCREEN_W'
p1101
sg122
Nsa(dp1102
g51
S'background'
p1103
sg115
S'c:#000000'
p1104
sg122
Nsasa(dp1105
g81
g944
sg51
S'_SetPakTextBtn'
p1106
sg83
S'Button'
p1107
sg85
(lp1108
sg23
Nsg88
(lp1109
I7168
aI6077
asg90
(lp1110
(dp1111
g93
S'_on_SetPakTextBtn_ButRel_1'
p1112
sg95
S''
sg96
S'<ButtonRelease-1>'
p1113
sasg98
(lp1114
(dp1115
g51
g120
sg115
S'Set Text'
p1116
sg122
Nsasa(dp1117
g81
S'Tkinter'
p1118
sg51
S'_SetStringBtn'
p1119
sg83
S'Button'
p1120
sg85
(lp1121
sg23
Nsg88
(lp1122
I6198
aI6950
asg90
(lp1123
(dp1124
g93
S'_on_SetStringBtn_Button_1'
p1125
sg95
S''
sg96
S'<ButtonRelease-1>'
p1126
sasg98
(lp1127
(dp1128
g51
g120
sg115
S'SET STRING'
p1129
sg122
Nsasa(dp1130
g81
g1118
sg51
S'_String1Len'
p1131
sg83
S'Label'
p1132
sg85
(lp1133
sg23
Nsg88
(lp1134
I4609
aI6687
asg90
(lp1135
sg98
(lp1136
(dp1137
g51
g519
sg115
S'_EditString1Len'
p1138
sg122
S's.as'
p1139
sasa(dp1140
g81
g1118
sg51
S'_String2Len'
p1141
sg83
g1132
sg85
(lp1142
sg23
Nsg88
(lp1143
I4597
aI6998
asg90
(lp1144
sg98
(lp1145
(dp1146
g51
g519
sg115
S'_EditString2Len'
p1147
sg122
S's.as'
p1148
sasa(dp1149
g81
g1118
sg51
S'_String3Len'
p1150
sg83
g1132
sg85
(lp1151
sg23
Nsg88
(lp1152
I4609
aI7333
asg90
(lp1153
sg98
(lp1154
(dp1155
g51
g519
sg115
S'_EditString3Len'
p1156
sg122
S's.as'
p1157
sasa(dp1158
g81
g640
sg51
S'_StringFrame'
p1159
sg83
g642
sg85
(lp1160
sg23
(L0L
L1L
L1L
L0L
L0L
tp1161
sg88
g89
sg90
(lp1162
sg98
(lp1163
sa(dp1164
g81
g618
sg51
S'_StringIdxLbl'
p1165
sg83
S'Label'
p1166
sg85
(lp1167
sg23
Nsg88
(lp1168
I3390
aI6089
asg90
(lp1169
sg98
(lp1170
(dp1171
g51
g519
sg115
S'_StringIdx'
p1172
sg122
S's.as'
p1173
sasa(dp1174
g81
g618
sg51
S'_StringIdxTextLbl'
p1175
sg83
g1166
sg85
(lp1176
sg23
Nsg88
(lp1177
I3038
aI6089
asg90
(lp1178
sg98
(lp1179
(dp1180
g51
g131
sg115
S'Current string:'
p1181
sg122
Nsasa(dp1182
g81
g729
sg51
S'_StringList'
p1183
sg83
S'Listbox'
p1184
sg85
(lp1185
(dp1186
g51
g114
sg115
S'nw'
p1187
sa(dp1188
g51
g478
sg115
S'yes'
p1189
sa(dp1190
g51
g481
sg115
S'both'
p1191
sasg23
Nsg88
(lp1192
I3038
aI2584
asg90
(lp1193
(dp1194
g93
S'_on_StringList_select'
p1195
sg95
S''
sg96
S'<<ListboxSelect>>'
p1196
sasg98
(lp1197
sa(dp1198
g81
g686
sg51
S'_StringListLabel'
p1199
sg83
S'Label'
p1200
sg85
(lp1201
(dp1202
g51
g114
sg115
S'n'
sa(dp1203
g51
g481
sg115
S'x'
sasg23
Nsg88
(lp1204
I3038
aI1627
asg90
(lp1205
sg98
(lp1206
(dp1207
g51
g131
sg115
S'String list'
p1208
sg122
Nsasa(dp1209
g81
S'Tkinter'
p1210
sg51
S'_StringScroll'
p1211
sg83
S'Scrollbar'
p1212
sg85
(lp1213
(dp1214
g51
g114
sg115
S'e'
sa(dp1215
g51
g481
sg115
S'y'
sasg23
Nsg88
(lp1216
I3542
aI2620
asg90
(lp1217
sg98
(lp1218
sa(dp1219
g81
S'Tkinter'
p1220
sg51
S'_TabHost'
p1221
sg83
S'Frame'
p1222
sg85
(lp1223
(dp1224
g51
g114
sg115
S'nw'
p1225
sa(dp1226
g51
g478
sg115
g655
sa(dp1227
g51
g481
sg115
g1191
sasg23
(L0L
L1L
L1L
L0L
tp1228
sg88
g89
sg90
(lp1229
sg98
(lp1230
(dp1231
g51
S'pyclass'
p1232
sg115
S'ttk.Notebook'
p1233
sg122
Nsasa(dp1234
g81
g944
sg51
S'_TextAreaLbl'
p1235
sg83
S'Label'
p1236
sg85
(lp1237
(dp1238
g51
g114
sg115
S'n'
sasg23
Nsg88
(lp1239
I6198
aI1555
asg90
(lp1240
sg98
(lp1241
(dp1242
g51
g131
sg115
S'Text area'
p1243
sg122
Nsasa(dp1244
g81
g981
sg51
S'_WorkFrameLabel'
p1245
sg83
S'Label'
p1246
sg85
(lp1247
(dp1248
g51
S'padx'
p1249
sg115
S'n:35'
p1250
sasg23
Nsg88
(lp1251
I5191
aI7847
asg90
(lp1252
sg98
(lp1253
(dp1254
g51
g131
sg115
S'Parameters List'
p1255
sg122
Nsasa(dp1256
g81
g1220
sg51
S'_WorkLabelFrame'
p1257
sg83
g1222
sg85
(lp1258
(dp1259
g51
g114
sg115
g1225
sa(dp1260
g51
g481
sg115
S'x'
sasg23
(L0L
L1L
L1L
L2L
tp1261
sg88
g89
sg90
(lp1262
sg98
(lp1263
sasg219
g541
sg33
L1L
sasS'VisibleForm'
p1264
g539
sS'SelectedForm'
p1265
g539
sg51
g4
sa(dp1266
g31
Nsg33
L1L
sg34
(dp1267
g36
S'11.0'
p1268
sg38
(lp1269
S''
aS'#coding=utf8\n\n'
p1270
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p1271
aS'\nfrom enum import Enum\n\nSCREEN_W = 480\nSCREEN_H = 272\n\nTEXT_H = 90\n\nSCENE_MODES   = Enum("normal", "normal_flat", "trial", "rules", "ammo", "ammoname", "ammosummary", "present", "presentname", "debate", "mtb", "climax", "anagram", "dive", "hanron", "menu", "map", "report", "report2", "skill", "skill2", "music", "eventname", "artworkname", "moviename", "theatre", "novel", "help", "other")\nSCENE_SPECIAL = Enum("option", "showopt", "react", "debate", "chatter", "hanron", "checkobj", "checkchar")\nBOX_COLORS    = Enum("yellow", "green", "blue")\nBOX_TYPES     = Enum("normal", "flat", "novel")\n\nCHAPTER_MONOKUMA = 100\nCHAPTER_FREETIME = 101\nCHAPTER_ISLAND   = 102\nCHAPTER_NOVEL    = 103'
p1272
asg6
I0
sg45
I14492031
ssg46
(lp1273
sg1264
S'-Main-'
p1274
sg1265
g34
sg51
S'Common'
p1275
sa(dp1276
g31
S'-Main-'
p1277
sg33
L1L
sg34
(dp1278
g36
S'7.0'
p1279
sg38
(lp1280
S''
aS'#coding=utf8\n\n'
p1281
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p1282
aS'import ttk, PIL, tkMessageBox\n\ngui = ResViewer()'
p1283
asg6
I0
sg45
I2407807
ssg46
(lp1284
(dp1285
S'Requested'
p1286
S'Gui'
p1287
sS'Name'
p1288
S'ResViewer'
p1289
sS'SelectedWidreq'
p1290
S'_TopMenu'
p1291
sS'Text'
p1292
(dp1293
g36
S'68.0'
p1294
sg38
(lp1295
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                  ResViewer                                   #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass ResViewer(Toplevel):\n    def __init__(self,Master=None,*pos,**kw):\n'
p1296
aS'        #\n        #Your code here\n        #\n'
p1297
aS"\n        apply(Toplevel.__init__,(self,Master),kw)\n        self._Frame5 = Frame(self)\n        self._Frame5.pack(side='top')\n        self._TopMenu = Menu(self._Frame5)\n        self._TopMenu.pack(side='left')\n        self._TopMenu.bind('<Map>',self._on_TopMenu_Map)\n        self._Frame3 = Frame(self)\n        self._Frame3.pack(side='top')\n        self._FileListFrame = Frame(self._Frame3)\n        self._FileListFrame.pack(side='left')\n        self._FileList = Listbox(self._FileListFrame)\n        self._FileList.pack(side='top')\n        self._Frame4 = Frame(self._Frame3)\n        self._Frame4.pack(side='left')\n        self._TabHost = ttk.Notebook(self._Frame4)\n        self._TabHost.pack(side='top')\n        self._Frame1 = Frame(self._Frame4)\n        self._Frame1.pack(side='top')\n        self._TextFrame = Frame(self._TabHost)\n        self._TextFrame.pack(side='left')\n        self._TextEdit = Entry(self._TextFrame)\n        self._TextEdit.pack(side='top')\n        self._CanvasFrame = Frame(self._TabHost)\n        self._CanvasFrame.pack(side='left')\n        self._Canvas = Canvas(self._CanvasFrame)\n        self._Canvas.pack(side='top')\n        self._MiscFrame = Frame(self._TabHost)\n        self._MiscFrame.pack(side='left')\n"
p1298
aS'        #\n        #Your code here\n        #\n        self._TabHost.add(self._TextFrame, text="Text")\n        self._TabHost.add(self._CanvasFrame, text="Graphics")\n        self._TabHost.add(self._MiscFrame, text="Misc")\n'
p1299
aS'    #\n    #Start of event handler methods\n    #\n'
p1300
aS'\n'
aS'\n    def _on_TopMenu_Map(self'
p1301
aS',Event=None):\n        # File menu\n        FileMenu = Menu(self._RootMenu, tearoff=0)\n        FileMenu.add_command(label="Open", command=self.openFile)\n        FileMenu.add_command(label="Save", command=self.saveFile)\n        FileMenu.add_command(label="Exit", command=exit)\n        self._RootMenu.add_cascade(label="File", menu=FileMenu)\n        pass\n    \n    def openFile(self):\n        pass\n    \n    def saveFile(self):\n        pass\n    \n    def exit(self):\n        self.destroy()\n        pass\n'
p1302
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p1303
aS''
asg6
I0
sg45
I12886399
ssS'Lines'
p1304
(lp1305
(lp1306
L4996L
aL939L
aL0L
aa(lp1307
L1531L
aL5463L
aL1L
aa(lp1308
L5762L
aL9061L
aL0L
aa(lp1309
L4082L
aL4994L
aL1L
aa(lp1310
L7215L
aL4994L
aL1L
aasS'BaseClass'
p1311
S'Tkinter.Toplevel'
p1312
sS'Widreqs'
p1313
(lp1314
(dp1315
S'ModuleName'
p1316
S'Tkinter'
p1317
sg1288
g1289
sS'WidgetName'
p1318
S'Toplevel'
p1319
sS'PackOptions'
p1320
(lp1321
sS'Options'
p1322
(lp1323
sS'XY'
p1324
(L0L
L0L
tp1325
sS'Bindings'
p1326
(lp1327
sS'ID'
p1328
(L0L
tp1329
sa(dp1330
g1316
g109
sg1288
S'_Canvas'
p1331
sg1318
S'Canvas'
p1332
sg1320
(lp1333
sg1322
(lp1334
sg1324
(lp1335
L5585L
aL3129L
asg1326
(lp1336
sg1328
Nsa(dp1337
g1316
g101
sg1288
S'_CanvasFrame'
p1338
sg1318
g103
sg1320
(lp1339
sg1322
(lp1340
sg1324
g1325
sg1326
(lp1341
sg1328
(L0L
L1L
L1L
L0L
L1L
tp1342
sa(dp1343
g1316
g109
sg1288
S'_FileList'
p1344
sg1318
g135
sg1320
(lp1345
sg1322
(lp1346
sg1324
(lp1347
L687L
aL3682L
asg1326
(lp1348
sg1328
Nsa(dp1349
g1316
g101
sg1288
S'_FileListFrame'
p1350
sg1318
g103
sg1320
(lp1351
sg1322
(lp1352
sg1324
g1325
sg1326
(lp1353
sg1328
(L0L
L1L
L0L
tp1354
sa(dp1355
g1316
g101
sg1288
S'_Frame1'
p1356
sg1318
g103
sg1320
(lp1357
sg1322
(lp1358
sg1324
g1325
sg1326
(lp1359
sg1328
(L0L
L1L
L1L
L1L
tp1360
sa(dp1361
g1316
g101
sg1288
S'_Frame3'
p1362
sg1318
g103
sg1320
(lp1363
sg1322
(lp1364
sg1324
g1325
sg1326
(lp1365
sg1328
(L0L
L1L
tp1366
sa(dp1367
g1316
g101
sg1288
S'_Frame4'
p1368
sg1318
g103
sg1320
(lp1369
sg1322
(lp1370
sg1324
g1325
sg1326
(lp1371
sg1328
(L0L
L1L
L1L
tp1372
sa(dp1373
g1316
g101
sg1288
S'_Frame5'
p1374
sg1318
g103
sg1320
(lp1375
sg1322
(lp1376
sg1324
g1325
sg1326
(lp1377
sg1328
(L0L
L0L
tp1378
sa(dp1379
g1316
g101
sg1288
S'_MiscFrame'
p1380
sg1318
g103
sg1320
(lp1381
sg1322
(lp1382
sg1324
g1325
sg1326
(lp1383
sg1328
(L0L
L1L
L1L
L0L
L2L
tp1384
sa(dp1385
g1316
g101
sg1288
S'_TabHost'
p1386
sg1318
g103
sg1320
(lp1387
sg1322
(lp1388
(dp1389
g1288
S'pyclass'
p1390
sS'Value'
p1391
S'ttk.Notebook'
p1392
sS'Extra'
p1393
Nsasg1324
g1325
sg1326
(lp1394
sg1328
(L0L
L1L
L1L
L0L
tp1395
sa(dp1396
g1316
g109
sg1288
S'_TextEdit'
p1397
sg1318
S'Entry'
p1398
sg1320
(lp1399
sg1322
(lp1400
sg1324
(lp1401
L2629L
aL3321L
asg1326
(lp1402
sg1328
Nsa(dp1403
g1316
g101
sg1288
S'_TextFrame'
p1404
sg1318
g103
sg1320
(lp1405
sg1322
(lp1406
sg1324
g1325
sg1326
(lp1407
sg1328
(L0L
L1L
L1L
L0L
L0L
tp1408
sa(dp1409
g1316
g109
sg1288
g1291
sg1318
S'Menu'
p1410
sg1320
(lp1411
sg1322
(lp1412
sg1324
(lp1413
L241L
aL373L
asg1326
(lp1414
(dp1415
S'Handler'
p1416
S'_on_TopMenu_Map'
p1417
sS'Component'
p1418
S''
sS'Event'
p1419
S'<Map>'
p1420
sasg1328
NsasS'Type'
p1421
g1312
sS'OnTab'
p1422
L1L
sasg1264
g1289
sg1265
g1289
sg51
S'ResViewer'
p1423
sa.